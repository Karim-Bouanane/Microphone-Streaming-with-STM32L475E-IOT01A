
Microphone-Streaming-with-STM32L475E-IOT01A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009158  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be8  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed0  08009ed0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed8  08009ed8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052fc  2000007c  08009f5c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005378  08009f5c  00025378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156b3  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ed  00000000  00000000  000357a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001288  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e3b  00000000  00000000  00039b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028d23  00000000  00000000  0003a953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cd6  00000000  00000000  00063676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f02d6  00000000  00000000  0007a34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005988  00000000  00000000  0016a624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  0016ffac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092d0 	.word	0x080092d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080092d0 	.word	0x080092d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f003 f89f 	bl	80036c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f8c3 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 fa05 	bl	8000998 <MX_GPIO_Init>
  MX_DMA_Init();
 800058e:	f000 f9e5 	bl	800095c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000592:	f000 f9b3 	bl	80008fc <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 8000596:	f000 f90d 	bl	80007b4 <MX_DFSDM1_Init>
  MX_FATFS_Init();
 800059a:	f007 faf9 	bl	8007b90 <MX_FATFS_Init>
  MX_SPI3_Init();
 800059e:	f000 f96f 	bl	8000880 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  if (wifi_init() != 0)
 80005a2:	f000 fc21 	bl	8000de8 <wifi_init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d000      	beq.n	80005ae <main+0x32>
  {
  	while(1);
 80005ac:	e7fe      	b.n	80005ac <main+0x30>
  }

  if (wifi_shareAP() != 0)
 80005ae:	f000 fc55 	bl	8000e5c <wifi_shareAP>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d000      	beq.n	80005ba <main+0x3e>
	{
  	asm("nop");
 80005b8:	bf00      	nop
	}

  if (wifi_server() != 0)
 80005ba:	f000 fc9d 	bl	8000ef8 <wifi_server>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d000      	beq.n	80005c6 <main+0x4a>
	{
  	asm("nop");
 80005c4:	bf00      	nop
	}

  start_wifi_cli();
 80005c6:	f000 fffd 	bl	80015c4 <start_wifi_cli>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t preambule[4] = "Send";
 80005ca:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <main+0x178>)
 80005cc:	60bb      	str	r3, [r7, #8]
  uint8_t rcv_data[4] = {0};
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]

  if (HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, raw_audio_buff, AUDIO_BUFFER_SIZE) != HAL_OK)
 80005d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005d6:	4948      	ldr	r1, [pc, #288]	; (80006f8 <main+0x17c>)
 80005d8:	4848      	ldr	r0, [pc, #288]	; (80006fc <main+0x180>)
 80005da:	f003 fbfd 	bl	8003dd8 <HAL_DFSDM_FilterRegularStart_DMA>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <main+0x6c>
  {
	  Error_Handler();
 80005e4:	f001 f834 	bl	8001650 <Error_Handler>
  }

  while (1)
  {

		switch (audio_buffer_status)
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <main+0x184>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	d04e      	beq.n	800068e <main+0x112>
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	dcf9      	bgt.n	80005e8 <main+0x6c>
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d002      	beq.n	80005fe <main+0x82>
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	d018      	beq.n	800062e <main+0xb2>
 80005fc:	e7f4      	b.n	80005e8 <main+0x6c>
		{
			case AUDIO_WAITING_SEND_SIGNAL:

				if (HAL_UART_Receive(&huart1, (uint8_t *)rcv_data, 4, HAL_MAX_DELAY) == HAL_OK)
 80005fe:	1d39      	adds	r1, r7, #4
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2204      	movs	r2, #4
 8000606:	483f      	ldr	r0, [pc, #252]	; (8000704 <main+0x188>)
 8000608:	f006 fd88 	bl	800711c <HAL_UART_Receive>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d16e      	bne.n	80006f0 <main+0x174>
				{
					if (memcmp(rcv_data, preambule, 4) == 0)
 8000612:	f107 0108 	add.w	r1, r7, #8
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2204      	movs	r2, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f007 fdda 	bl	80081d4 <memcmp>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d164      	bne.n	80006f0 <main+0x174>
					{
						// wait for DMA to fill buffer
						audio_buffer_status = AUDIO_WAITING_BUFFER;
 8000626:	4b36      	ldr	r3, [pc, #216]	; (8000700 <main+0x184>)
 8000628:	2201      	movs	r2, #1
 800062a:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
 800062c:	e060      	b.n	80006f0 <main+0x174>

			case AUDIO_HALF_BUFFER_AVIALABLE:

				for(uint16_t sample_index = 0; sample_index < AUDIO_BUFFER_SIZE / 2; sample_index ++)
 800062e:	2300      	movs	r3, #0
 8000630:	81fb      	strh	r3, [r7, #14]
 8000632:	e024      	b.n	800067e <main+0x102>
				{
					conv_audio_buff[sample_index] = SaturaLH(((int32_t)raw_audio_buff[sample_index] >> 8), -32768, 32767);
 8000634:	89fb      	ldrh	r3, [r7, #14]
 8000636:	4a30      	ldr	r2, [pc, #192]	; (80006f8 <main+0x17c>)
 8000638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063c:	121b      	asrs	r3, r3, #8
 800063e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000642:	db0a      	blt.n	800065a <main+0xde>
 8000644:	89fb      	ldrh	r3, [r7, #14]
 8000646:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <main+0x17c>)
 8000648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064c:	121b      	asrs	r3, r3, #8
 800064e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000652:	4293      	cmp	r3, r2
 8000654:	bfa8      	it	ge
 8000656:	4613      	movge	r3, r2
 8000658:	e000      	b.n	800065c <main+0xe0>
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <main+0x18c>)
 800065c:	89fa      	ldrh	r2, [r7, #14]
 800065e:	492b      	ldr	r1, [pc, #172]	; (800070c <main+0x190>)
 8000660:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					HAL_UART_Transmit(&huart1, (uint8_t *)&conv_audio_buff[sample_index], 2, HAL_MAX_DELAY);
 8000664:	89fb      	ldrh	r3, [r7, #14]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <main+0x190>)
 800066a:	1899      	adds	r1, r3, r2
 800066c:	f04f 33ff 	mov.w	r3, #4294967295
 8000670:	2202      	movs	r2, #2
 8000672:	4824      	ldr	r0, [pc, #144]	; (8000704 <main+0x188>)
 8000674:	f006 fcbe 	bl	8006ff4 <HAL_UART_Transmit>
				for(uint16_t sample_index = 0; sample_index < AUDIO_BUFFER_SIZE / 2; sample_index ++)
 8000678:	89fb      	ldrh	r3, [r7, #14]
 800067a:	3301      	adds	r3, #1
 800067c:	81fb      	strh	r3, [r7, #14]
 800067e:	89fb      	ldrh	r3, [r7, #14]
 8000680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000684:	d3d6      	bcc.n	8000634 <main+0xb8>
				}
				audio_buffer_status = AUDIO_WAITING_SEND_SIGNAL;
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <main+0x184>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
				break;
 800068c:	e031      	b.n	80006f2 <main+0x176>

			case AUDIO_FULL_BUFFER_AVAILABLE:

				for(uint16_t sample_index = AUDIO_BUFFER_SIZE / 2; sample_index < AUDIO_BUFFER_SIZE; sample_index ++)
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	81bb      	strh	r3, [r7, #12]
 8000694:	e024      	b.n	80006e0 <main+0x164>
				{
					conv_audio_buff[sample_index] = SaturaLH(((int32_t)raw_audio_buff[sample_index] >> 8), -32768, 32767);
 8000696:	89bb      	ldrh	r3, [r7, #12]
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <main+0x17c>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	121b      	asrs	r3, r3, #8
 80006a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80006a4:	db0a      	blt.n	80006bc <main+0x140>
 80006a6:	89bb      	ldrh	r3, [r7, #12]
 80006a8:	4a13      	ldr	r2, [pc, #76]	; (80006f8 <main+0x17c>)
 80006aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ae:	121b      	asrs	r3, r3, #8
 80006b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80006b4:	4293      	cmp	r3, r2
 80006b6:	bfa8      	it	ge
 80006b8:	4613      	movge	r3, r2
 80006ba:	e000      	b.n	80006be <main+0x142>
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <main+0x18c>)
 80006be:	89ba      	ldrh	r2, [r7, #12]
 80006c0:	4912      	ldr	r1, [pc, #72]	; (800070c <main+0x190>)
 80006c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
					HAL_UART_Transmit(&huart1, (uint8_t *)&conv_audio_buff[sample_index], 2, HAL_MAX_DELAY);
 80006c6:	89bb      	ldrh	r3, [r7, #12]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <main+0x190>)
 80006cc:	1899      	adds	r1, r3, r2
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	2202      	movs	r2, #2
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <main+0x188>)
 80006d6:	f006 fc8d 	bl	8006ff4 <HAL_UART_Transmit>
				for(uint16_t sample_index = AUDIO_BUFFER_SIZE / 2; sample_index < AUDIO_BUFFER_SIZE; sample_index ++)
 80006da:	89bb      	ldrh	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	81bb      	strh	r3, [r7, #12]
 80006e0:	89bb      	ldrh	r3, [r7, #12]
 80006e2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006e6:	d3d6      	bcc.n	8000696 <main+0x11a>
				}
				audio_buffer_status = AUDIO_WAITING_SEND_SIGNAL;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <main+0x184>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
				break;
 80006ee:	e000      	b.n	80006f2 <main+0x176>
				break;
 80006f0:	bf00      	nop
		switch (audio_buffer_status)
 80006f2:	e779      	b.n	80005e8 <main+0x6c>
 80006f4:	646e6553 	.word	0x646e6553
 80006f8:	20000258 	.word	0x20000258
 80006fc:	20000098 	.word	0x20000098
 8000700:	20000254 	.word	0x20000254
 8000704:	200001d0 	.word	0x200001d0
 8000708:	ffff8000 	.word	0xffff8000
 800070c:	20002198 	.word	0x20002198

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	; 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fd68 	bl	80081f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000736:	f004 f9a3 	bl	8004a80 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 ff86 	bl	8001650 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000744:	2310      	movs	r3, #16
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000758:	2301      	movs	r3, #1
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075c:	2301      	movs	r3, #1
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000760:	2328      	movs	r3, #40	; 0x28
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000764:	2307      	movs	r3, #7
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076c:	2302      	movs	r3, #2
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	4618      	mov	r0, r3
 8000776:	f004 f9d9 	bl	8004b2c <HAL_RCC_OscConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000780:	f000 ff66 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000784:	230f      	movs	r3, #15
 8000786:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000788:	2303      	movs	r3, #3
 800078a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	2104      	movs	r1, #4
 800079c:	4618      	mov	r0, r3
 800079e:	f004 fda1 	bl	80052e4 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a8:	f000 ff52 	bl	8001650 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3758      	adds	r7, #88	; 0x58
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007ba:	4a2d      	ldr	r2, [pc, #180]	; (8000870 <MX_DFSDM1_Init+0xbc>)
 80007bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007be:	4b2b      	ldr	r3, [pc, #172]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007d0:	4b26      	ldr	r3, [pc, #152]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007d2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007d6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80007d8:	4b24      	ldr	r3, [pc, #144]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007da:	2240      	movs	r2, #64	; 0x40
 80007dc:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80007de:	4b23      	ldr	r3, [pc, #140]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80007e4:	4821      	ldr	r0, [pc, #132]	; (800086c <MX_DFSDM1_Init+0xb8>)
 80007e6:	f003 f9d7 	bl	8003b98 <HAL_DFSDM_FilterInit>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80007f0:	f000 ff2e 	bl	8001650 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 80007f6:	4a20      	ldr	r2, [pc, #128]	; (8000878 <MX_DFSDM1_Init+0xc4>)
 80007f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 40;
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000808:	2228      	movs	r2, #40	; 0x28
 800080a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800080c:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000818:	4b16      	ldr	r3, [pc, #88]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800081e:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000826:	2204      	movs	r2, #4
 8000828:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000838:	2200      	movs	r2, #0
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800083c:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 800083e:	2200      	movs	r2, #0
 8000840:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000842:	480c      	ldr	r0, [pc, #48]	; (8000874 <MX_DFSDM1_Init+0xc0>)
 8000844:	f003 f8e8 	bl	8003a18 <HAL_DFSDM_ChannelInit>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800084e:	f000 feff 	bl	8001650 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000852:	2201      	movs	r2, #1
 8000854:	4909      	ldr	r1, [pc, #36]	; (800087c <MX_DFSDM1_Init+0xc8>)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_DFSDM1_Init+0xb8>)
 8000858:	f003 fa78 	bl	8003d4c <HAL_DFSDM_FilterConfigRegChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000862:	f000 fef5 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000098 	.word	0x20000098
 8000870:	40016100 	.word	0x40016100
 8000874:	200000ec 	.word	0x200000ec
 8000878:	40016040 	.word	0x40016040
 800087c:	00020004 	.word	0x00020004

08000880 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_SPI3_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_SPI3_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_SPI3_Init+0x74>)
 800088c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000890:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_SPI3_Init+0x74>)
 800089a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800089e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008b6:	2210      	movs	r2, #16
 80008b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008ce:	2207      	movs	r2, #7
 80008d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008da:	2208      	movs	r2, #8
 80008dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_SPI3_Init+0x74>)
 80008e0:	f005 fbe0 	bl	80060a4 <HAL_SPI_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 feb1 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000016c 	.word	0x2000016c
 80008f8:	40003c00 	.word	0x40003c00

080008fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <MX_USART1_UART_Init+0x58>)
 8000904:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200000;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000908:	4a13      	ldr	r2, [pc, #76]	; (8000958 <MX_USART1_UART_Init+0x5c>)
 800090a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800090c:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART1_UART_Init+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000914:	2200      	movs	r2, #0
 8000916:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_USART1_UART_Init+0x54>)
 800091a:	2200      	movs	r2, #0
 800091c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000920:	220c      	movs	r2, #12
 8000922:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART1_UART_Init+0x54>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART1_UART_Init+0x54>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_USART1_UART_Init+0x54>)
 800093e:	f006 fb0b 	bl	8006f58 <HAL_UART_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
 8000948:	f000 fe82 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001d0 	.word	0x200001d0
 8000954:	40013800 	.word	0x40013800
 8000958:	00124f80 	.word	0x00124f80

0800095c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_DMA_Init+0x38>)
 8000964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <MX_DMA_Init+0x38>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6493      	str	r3, [r2, #72]	; 0x48
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_DMA_Init+0x38>)
 8000970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	200e      	movs	r0, #14
 8000980:	f003 f813 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000984:	200e      	movs	r0, #14
 8000986:	f003 f82c 	bl	80039e2 <HAL_NVIC_EnableIRQ>

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4bbc      	ldr	r3, [pc, #752]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4abb      	ldr	r2, [pc, #748]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4bb9      	ldr	r3, [pc, #740]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4bb6      	ldr	r3, [pc, #728]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4ab5      	ldr	r2, [pc, #724]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4bb3      	ldr	r3, [pc, #716]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4bb0      	ldr	r3, [pc, #704]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4aaf      	ldr	r2, [pc, #700]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4bad      	ldr	r3, [pc, #692]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4baa      	ldr	r3, [pc, #680]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	4aa9      	ldr	r2, [pc, #676]	; (8000ca0 <MX_GPIO_Init+0x308>)
 80009fc:	f043 0302 	orr.w	r3, r3, #2
 8000a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a02:	4ba7      	ldr	r3, [pc, #668]	; (8000ca0 <MX_GPIO_Init+0x308>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	f003 0302 	and.w	r3, r3, #2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0e:	4ba4      	ldr	r3, [pc, #656]	; (8000ca0 <MX_GPIO_Init+0x308>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	4aa3      	ldr	r2, [pc, #652]	; (8000ca0 <MX_GPIO_Init+0x308>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1a:	4ba1      	ldr	r3, [pc, #644]	; (8000ca0 <MX_GPIO_Init+0x308>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a2c:	489d      	ldr	r0, [pc, #628]	; (8000ca4 <MX_GPIO_Init+0x30c>)
 8000a2e:	f003 ffdd 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f003 ffd6 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a40:	2200      	movs	r2, #0
 8000a42:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a46:	4898      	ldr	r0, [pc, #608]	; (8000ca8 <MX_GPIO_Init+0x310>)
 8000a48:	f003 ffd0 	bl	80049ec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a52:	4896      	ldr	r0, [pc, #600]	; (8000cac <MX_GPIO_Init+0x314>)
 8000a54:	f003 ffca 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4893      	ldr	r0, [pc, #588]	; (8000cac <MX_GPIO_Init+0x314>)
 8000a60:	f003 ffc4 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a6a:	4891      	ldr	r0, [pc, #580]	; (8000cb0 <MX_GPIO_Init+0x318>)
 8000a6c:	f003 ffbe 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2120      	movs	r1, #32
 8000a74:	488c      	ldr	r0, [pc, #560]	; (8000ca8 <MX_GPIO_Init+0x310>)
 8000a76:	f003 ffb9 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	4889      	ldr	r0, [pc, #548]	; (8000ca4 <MX_GPIO_Init+0x30c>)
 8000a80:	f003 ffb4 	bl	80049ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a84:	f240 1315 	movw	r3, #277	; 0x115
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4881      	ldr	r0, [pc, #516]	; (8000ca4 <MX_GPIO_Init+0x30c>)
 8000a9e:	f003 fcef 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000aa2:	236a      	movs	r3, #106	; 0x6a
 8000aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	487b      	ldr	r0, [pc, #492]	; (8000ca4 <MX_GPIO_Init+0x30c>)
 8000ab8:	f003 fce2 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ac2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4877      	ldr	r0, [pc, #476]	; (8000cb0 <MX_GPIO_Init+0x318>)
 8000ad4:	f003 fcd4 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000ad8:	233f      	movs	r3, #63	; 0x3f
 8000ada:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000adc:	230b      	movs	r3, #11
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4871      	ldr	r0, [pc, #452]	; (8000cb0 <MX_GPIO_Init+0x318>)
 8000aec:	f003 fcc8 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000af0:	2303      	movs	r3, #3
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b00:	2308      	movs	r3, #8
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0e:	f003 fcb7 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b12:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2e:	f003 fca7 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b32:	2308      	movs	r3, #8
 8000b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b42:	2301      	movs	r3, #1
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b50:	f003 fc96 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000b54:	2310      	movs	r3, #16
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	4619      	mov	r1, r3
 8000b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6a:	f003 fc89 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000b6e:	23e0      	movs	r3, #224	; 0xe0
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f003 fc78 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4840      	ldr	r0, [pc, #256]	; (8000ca8 <MX_GPIO_Init+0x310>)
 8000ba6:	f003 fc6b 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000baa:	2302      	movs	r3, #2
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bae:	230b      	movs	r3, #11
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	483a      	ldr	r0, [pc, #232]	; (8000ca8 <MX_GPIO_Init+0x310>)
 8000bbe:	f003 fc5f 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000bc2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000bc6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4833      	ldr	r0, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0x310>)
 8000bdc:	f003 fc50 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000be0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000be4:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_GPIO_Init+0x30c>)
 8000bfe:	f003 fc3f 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c08:	2312      	movs	r3, #18
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c14:	2304      	movs	r3, #4
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4822      	ldr	r0, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0x310>)
 8000c20:	f003 fc2e 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000c24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c36:	2307      	movs	r3, #7
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481a      	ldr	r0, [pc, #104]	; (8000cac <MX_GPIO_Init+0x314>)
 8000c42:	f003 fc1d 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c46:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c4a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_GPIO_Init+0x314>)
 8000c5e:	f003 fc0f 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c62:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480c      	ldr	r0, [pc, #48]	; (8000cac <MX_GPIO_Init+0x314>)
 8000c7c:	f003 fc00 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c80:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x318>)
 8000c9a:	f003 fbf1 	bl	8004480 <HAL_GPIO_Init>
 8000c9e:	e009      	b.n	8000cb4 <MX_GPIO_Init+0x31c>
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48001000 	.word	0x48001000
 8000ca8:	48000400 	.word	0x48000400
 8000cac:	48000c00 	.word	0x48000c00
 8000cb0:	48000800 	.word	0x48000800

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cb4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4830      	ldr	r0, [pc, #192]	; (8000d8c <MX_GPIO_Init+0x3f4>)
 8000ccc:	f003 fbd8 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f003 fbca 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000cec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cfe:	230a      	movs	r3, #10
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0c:	f003 fbb8 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d10:	2302      	movs	r3, #2
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d20:	2305      	movs	r3, #5
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4819      	ldr	r0, [pc, #100]	; (8000d90 <MX_GPIO_Init+0x3f8>)
 8000d2c:	f003 fba8 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d30:	2378      	movs	r3, #120	; 0x78
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d40:	2307      	movs	r3, #7
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_GPIO_Init+0x3f8>)
 8000d4c:	f003 fb98 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d56:	2312      	movs	r3, #18
 8000d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d62:	2304      	movs	r3, #4
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <MX_GPIO_Init+0x3fc>)
 8000d6e:	f003 fb87 	bl	8004480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	2007      	movs	r0, #7
 8000d78:	f002 fe17 	bl	80039aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d7c:	2007      	movs	r0, #7
 8000d7e:	f002 fe30 	bl	80039e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48000c00 	.word	0x48000c00
 8000d94:	48000400 	.word	0x48000400

08000d98 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	if(audio_buffer_status == AUDIO_WAITING_BUFFER)
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d102      	bne.n	8000dae <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x16>
	{
		audio_buffer_status = AUDIO_HALF_BUFFER_AVIALABLE;
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x24>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	701a      	strb	r2, [r3, #0]
	}
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000254 	.word	0x20000254

08000dc0 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	if(audio_buffer_status == AUDIO_WAITING_BUFFER)
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d102      	bne.n	8000dd6 <HAL_DFSDM_FilterRegConvCpltCallback+0x16>
	{
		audio_buffer_status = AUDIO_FULL_BUFFER_AVAILABLE;
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>)
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	701a      	strb	r2, [r3, #0]
	}
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000254 	.word	0x20000254

08000de8 <wifi_init>:


static int wifi_init(void)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];

  /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000dee:	f002 fab1 	bl	8003354 <WIFI_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d121      	bne.n	8000e3c <wifi_init+0x54>
  {
    if(WIFI_GetMAC_Address(MAC_Addr, sizeof(MAC_Addr)) == WIFI_STATUS_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2106      	movs	r1, #6
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 fad5 	bl	80033ac <WIFI_GetMAC_Address>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d113      	bne.n	8000e30 <wifi_init+0x48>
    {
      LOG(("eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8000e08:	783b      	ldrb	r3, [r7, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	461c      	mov	r4, r3
 8000e10:	78bb      	ldrb	r3, [r7, #2]
 8000e12:	461d      	mov	r5, r3
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	793a      	ldrb	r2, [r7, #4]
 8000e18:	7979      	ldrb	r1, [r7, #5]
 8000e1a:	9102      	str	r1, [sp, #8]
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	462b      	mov	r3, r5
 8000e22:	4622      	mov	r2, r4
 8000e24:	4601      	mov	r1, r0
 8000e26:	480a      	ldr	r0, [pc, #40]	; (8000e50 <wifi_init+0x68>)
 8000e28:	f007 f83a 	bl	8007ea0 <iprintf>
  else
  {
  	LOG(("> ERROR : ES-WIFI Not Initialized\r\n"));
    return -1;
  }
  return 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e00a      	b.n	8000e46 <wifi_init+0x5e>
      LOG(("> ERROR : CANNOT get MAC address\r\n"));
 8000e30:	4808      	ldr	r0, [pc, #32]	; (8000e54 <wifi_init+0x6c>)
 8000e32:	f007 f89b 	bl	8007f6c <puts>
      return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e004      	b.n	8000e46 <wifi_init+0x5e>
  	LOG(("> ERROR : ES-WIFI Not Initialized\r\n"));
 8000e3c:	4806      	ldr	r0, [pc, #24]	; (8000e58 <wifi_init+0x70>)
 8000e3e:	f007 f895 	bl	8007f6c <puts>
    return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	080092e8 	.word	0x080092e8
 8000e54:	08009328 	.word	0x08009328
 8000e58:	0800934c 	.word	0x0800934c

08000e5c <wifi_shareAP>:


int wifi_shareAP(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af02      	add	r7, sp, #8
  uint8_t channel = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	71fb      	strb	r3, [r7, #7]
  uint8_t max_conn = 2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	71bb      	strb	r3, [r7, #6]

  if (WIFI_ConfigureAP((const uint8_t *)AP_SSID, (const uint8_t *)AP_PASSWORD, WIFI_ECN_WPA2_PSK, channel, max_conn) == WIFI_STATUS_OK)
 8000e6a:	79fa      	ldrb	r2, [r7, #7]
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	2203      	movs	r2, #3
 8000e74:	4919      	ldr	r1, [pc, #100]	; (8000edc <wifi_shareAP+0x80>)
 8000e76:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <wifi_shareAP+0x84>)
 8000e78:	f002 fab8 	bl	80033ec <WIFI_ConfigureAP>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d123      	bne.n	8000eca <wifi_shareAP+0x6e>
  {
    LOG(("Connect to this Access Point -> SSID: %s , PWD: %s\r\n", AP_SSID, AP_PASSWORD));
 8000e82:	4a16      	ldr	r2, [pc, #88]	; (8000edc <wifi_shareAP+0x80>)
 8000e84:	4916      	ldr	r1, [pc, #88]	; (8000ee0 <wifi_shareAP+0x84>)
 8000e86:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <wifi_shareAP+0x88>)
 8000e88:	f007 f80a 	bl	8007ea0 <iprintf>

    if (WIFI_GatewayIP_Address(IP_Addr, sizeof(IP_Addr)) == WIFI_STATUS_OK)
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4816      	ldr	r0, [pc, #88]	; (8000ee8 <wifi_shareAP+0x8c>)
 8000e90:	f002 fb06 	bl	80034a0 <WIFI_GatewayIP_Address>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d111      	bne.n	8000ebe <wifi_shareAP+0x62>
    {
      LOG(("Gateway IP Address : %d.%d.%d.%d\r\n",
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <wifi_shareAP+0x8c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <wifi_shareAP+0x8c>)
 8000ea2:	785b      	ldrb	r3, [r3, #1]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <wifi_shareAP+0x8c>)
 8000ea8:	789b      	ldrb	r3, [r3, #2]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <wifi_shareAP+0x8c>)
 8000eae:	78db      	ldrb	r3, [r3, #3]
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <wifi_shareAP+0x90>)
 8000eb6:	f006 fff3 	bl	8007ea0 <iprintf>
  else
  {
		 LOG(("ERROR : es-wifi module NOT connected\r\n"));
     return -1;
  }
  return 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	e00a      	b.n	8000ed4 <wifi_shareAP+0x78>
		  LOG((" ERROR : es-wifi module CANNOT get IP address\r\n"));
 8000ebe:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <wifi_shareAP+0x94>)
 8000ec0:	f007 f854 	bl	8007f6c <puts>
      return -1;
 8000ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec8:	e004      	b.n	8000ed4 <wifi_shareAP+0x78>
		 LOG(("ERROR : es-wifi module NOT connected\r\n"));
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <wifi_shareAP+0x98>)
 8000ecc:	f007 f84e 	bl	8007f6c <puts>
     return -1;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08009370 	.word	0x08009370
 8000ee0:	0800937c 	.word	0x0800937c
 8000ee4:	08009390 	.word	0x08009390
 8000ee8:	200044d8 	.word	0x200044d8
 8000eec:	080093c8 	.word	0x080093c8
 8000ef0:	080093ec 	.word	0x080093ec
 8000ef4:	0800941c 	.word	0x0800941c

08000ef8 <wifi_server>:


int wifi_server(void)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af02      	add	r7, sp, #8
  bool StopServer = false;
 8000efe:	2300      	movs	r3, #0
 8000f00:	73fb      	strb	r3, [r7, #15]

  LOG(("Running HTML Server \r\n"));
 8000f02:	483b      	ldr	r0, [pc, #236]	; (8000ff0 <wifi_server+0xf8>)
 8000f04:	f007 f832 	bl	8007f6c <puts>

  if (WIFI_StartServer(SOCKET, WIFI_TCP_PROTOCOL, 1, "", PORT) != WIFI_STATUS_OK)
 8000f08:	f44f 539d 	mov.w	r3, #5024	; 0x13a0
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4b39      	ldr	r3, [pc, #228]	; (8000ff4 <wifi_server+0xfc>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	2100      	movs	r1, #0
 8000f14:	2000      	movs	r0, #0
 8000f16:	f002 fae7 	bl	80034e8 <WIFI_StartServer>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d002      	beq.n	8000f26 <wifi_server+0x2e>
  {
    LOG(("ERROR: Cannot start server.\r\n"));
 8000f20:	4835      	ldr	r0, [pc, #212]	; (8000ff8 <wifi_server+0x100>)
 8000f22:	f007 f823 	bl	8007f6c <puts>
  }

  LOG(("Server is running and waiting for an HTTP  Client connection to %d.%d.%d.%d\r\n",IP_Addr[0],IP_Addr[1],IP_Addr[2],IP_Addr[3]));
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <wifi_server+0x104>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <wifi_server+0x104>)
 8000f2e:	785b      	ldrb	r3, [r3, #1]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <wifi_server+0x104>)
 8000f34:	789b      	ldrb	r3, [r3, #2]
 8000f36:	4618      	mov	r0, r3
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <wifi_server+0x104>)
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	4603      	mov	r3, r0
 8000f40:	482f      	ldr	r0, [pc, #188]	; (8001000 <wifi_server+0x108>)
 8000f42:	f006 ffad 	bl	8007ea0 <iprintf>
  do
  {
    uint8_t RemoteIP[4];
    uint16_t RemotePort;

    while (WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort) != WIFI_STATUS_OK)
 8000f46:	e00f      	b.n	8000f68 <wifi_server+0x70>
    {
        LOG(("Waiting connection to  %d.%d.%d.%d\r\n", IP_Addr[0], IP_Addr[1], IP_Addr[2], IP_Addr[3]));
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <wifi_server+0x104>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <wifi_server+0x104>)
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <wifi_server+0x104>)
 8000f56:	789b      	ldrb	r3, [r3, #2]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <wifi_server+0x104>)
 8000f5c:	78db      	ldrb	r3, [r3, #3]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4603      	mov	r3, r0
 8000f62:	4828      	ldr	r0, [pc, #160]	; (8001004 <wifi_server+0x10c>)
 8000f64:	f006 ff9c 	bl	8007ea0 <iprintf>
    while (WIFI_WaitServerConnection(SOCKET, 1000, RemoteIP, sizeof(RemoteIP), &RemotePort) != WIFI_STATUS_OK)
 8000f68:	f107 0208 	add.w	r2, r7, #8
 8000f6c:	1dbb      	adds	r3, r7, #6
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2304      	movs	r3, #4
 8000f72:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f76:	2000      	movs	r0, #0
 8000f78:	f002 fae6 	bl	8003548 <WIFI_WaitServerConnection>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e2      	bne.n	8000f48 <wifi_server+0x50>
    }

    LOG(("Client connected %d.%d.%d.%d:%d\r\n", RemoteIP[0], RemoteIP[1], RemoteIP[2], RemoteIP[3], RemotePort));
 8000f82:	7a3b      	ldrb	r3, [r7, #8]
 8000f84:	4619      	mov	r1, r3
 8000f86:	7a7b      	ldrb	r3, [r7, #9]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	7abb      	ldrb	r3, [r7, #10]
 8000f8c:	461c      	mov	r4, r3
 8000f8e:	7afb      	ldrb	r3, [r7, #11]
 8000f90:	88fa      	ldrh	r2, [r7, #6]
 8000f92:	9201      	str	r2, [sp, #4]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4623      	mov	r3, r4
 8000f98:	4602      	mov	r2, r0
 8000f9a:	481b      	ldr	r0, [pc, #108]	; (8001008 <wifi_server+0x110>)
 8000f9c:	f006 ff80 	bl	8007ea0 <iprintf>

    StopServer = WebServerProcess();
 8000fa0:	f000 f83a 	bl	8001018 <WebServerProcess>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]

    if(WIFI_CloseServerConnection(SOCKET) != WIFI_STATUS_OK)
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f002 fb17 	bl	80035dc <WIFI_CloseServerConnection>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <wifi_server+0xc8>
    {
      LOG(("ERROR: failed to close current Server connection\r\n"));
 8000fb4:	4815      	ldr	r0, [pc, #84]	; (800100c <wifi_server+0x114>)
 8000fb6:	f006 ffd9 	bl	8007f6c <puts>
      return -1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e012      	b.n	8000fe6 <wifi_server+0xee>
    }
  }
  while(StopServer == false);
 8000fc0:	7bfb      	ldrb	r3, [r7, #15]
 8000fc2:	f083 0301 	eor.w	r3, r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1cd      	bne.n	8000f68 <wifi_server+0x70>

  if (WIFI_StopServer(SOCKET) != WIFI_STATUS_OK)
 8000fcc:	2000      	movs	r0, #0
 8000fce:	f002 fb1d 	bl	800360c <WIFI_StopServer>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <wifi_server+0xe6>
  {
    LOG(("ERROR: Cannot stop server.\n"));
 8000fd8:	480d      	ldr	r0, [pc, #52]	; (8001010 <wifi_server+0x118>)
 8000fda:	f006 ffc7 	bl	8007f6c <puts>
  }

  LOG(("Server is stop\n"));
 8000fde:	480d      	ldr	r0, [pc, #52]	; (8001014 <wifi_server+0x11c>)
 8000fe0:	f006 ffc4 	bl	8007f6c <puts>
  return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	08009444 	.word	0x08009444
 8000ff4:	0800945c 	.word	0x0800945c
 8000ff8:	08009460 	.word	0x08009460
 8000ffc:	200044d8 	.word	0x200044d8
 8001000:	08009480 	.word	0x08009480
 8001004:	080094d0 	.word	0x080094d0
 8001008:	080094f8 	.word	0x080094f8
 800100c:	0800951c 	.word	0x0800951c
 8001010:	08009550 	.word	0x08009550
 8001014:	0800956c 	.word	0x0800956c

08001018 <WebServerProcess>:


static bool WebServerProcess(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af02      	add	r7, sp, #8
  uint8_t temp;
  uint16_t respLen;
  static uint8_t resp[1024];
  bool stopserver = false;
 800101e:	2300      	movs	r3, #0
 8001020:	71fb      	strb	r3, [r7, #7]

  if (WIFI_STATUS_OK == WIFI_ReceiveData(SOCKET, resp, 1000, &respLen, WIFI_READ_TIMEOUT))
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	f242 7210 	movw	r2, #10000	; 0x2710
 8001028:	9200      	str	r2, [sp, #0]
 800102a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800102e:	494c      	ldr	r1, [pc, #304]	; (8001160 <WebServerProcess+0x148>)
 8001030:	2000      	movs	r0, #0
 8001032:	f002 fb25 	bl	8003680 <WIFI_ReceiveData>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8088 	bne.w	800114e <WebServerProcess+0x136>
  {
   LOG(("get %d byte from server\r\n", respLen));
 800103e:	88bb      	ldrh	r3, [r7, #4]
 8001040:	4619      	mov	r1, r3
 8001042:	4848      	ldr	r0, [pc, #288]	; (8001164 <WebServerProcess+0x14c>)
 8001044:	f006 ff2c 	bl	8007ea0 <iprintf>

   if( respLen > 0)
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8082 	beq.w	8001154 <WebServerProcess+0x13c>
   {
      if(strstr((char *)resp, "GET")) /* GET: put web page */
 8001050:	4945      	ldr	r1, [pc, #276]	; (8001168 <WebServerProcess+0x150>)
 8001052:	4843      	ldr	r0, [pc, #268]	; (8001160 <WebServerProcess+0x148>)
 8001054:	f007 f969 	bl	800832a <strstr>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d014      	beq.n	8001088 <WebServerProcess+0x70>
      {
        temp = (int) 20; //BSP_TSENSOR_ReadTemp();
 800105e:	2314      	movs	r3, #20
 8001060:	71bb      	strb	r3, [r7, #6]
        if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8001062:	4b42      	ldr	r3, [pc, #264]	; (800116c <WebServerProcess+0x154>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	79ba      	ldrb	r2, [r7, #6]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f000 f899 	bl	80011a4 <SendWebPage>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <WebServerProcess+0x68>
        {
          LOG(("> ERROR : Cannot send web page\r\n"));
 8001078:	483d      	ldr	r0, [pc, #244]	; (8001170 <WebServerProcess+0x158>)
 800107a:	f006 ff77 	bl	8007f6c <puts>
 800107e:	e069      	b.n	8001154 <WebServerProcess+0x13c>
        }
        else
        {
          LOG(("Send page after  GET command\r\n"));
 8001080:	483c      	ldr	r0, [pc, #240]	; (8001174 <WebServerProcess+0x15c>)
 8001082:	f006 ff73 	bl	8007f6c <puts>
 8001086:	e065      	b.n	8001154 <WebServerProcess+0x13c>
        }
       }
       else if(strstr((char *)resp, "POST"))/* POST: received info */
 8001088:	493b      	ldr	r1, [pc, #236]	; (8001178 <WebServerProcess+0x160>)
 800108a:	4835      	ldr	r0, [pc, #212]	; (8001160 <WebServerProcess+0x148>)
 800108c:	f007 f94d 	bl	800832a <strstr>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d05e      	beq.n	8001154 <WebServerProcess+0x13c>
       {
         LOG(("Post request\n"));
 8001096:	4839      	ldr	r0, [pc, #228]	; (800117c <WebServerProcess+0x164>)
 8001098:	f006 ff68 	bl	8007f6c <puts>

         if(strstr((char *)resp, "radio"))
 800109c:	4938      	ldr	r1, [pc, #224]	; (8001180 <WebServerProcess+0x168>)
 800109e:	4830      	ldr	r0, [pc, #192]	; (8001160 <WebServerProcess+0x148>)
 80010a0:	f007 f943 	bl	800832a <strstr>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d022      	beq.n	80010f0 <WebServerProcess+0xd8>
         {
           if(strstr((char *)resp, "radio=0"))
 80010aa:	4936      	ldr	r1, [pc, #216]	; (8001184 <WebServerProcess+0x16c>)
 80010ac:	482c      	ldr	r0, [pc, #176]	; (8001160 <WebServerProcess+0x148>)
 80010ae:	f007 f93c 	bl	800832a <strstr>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d009      	beq.n	80010cc <WebServerProcess+0xb4>
           {
             LedState = 0;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <WebServerProcess+0x154>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010c4:	4830      	ldr	r0, [pc, #192]	; (8001188 <WebServerProcess+0x170>)
 80010c6:	f003 fc91 	bl	80049ec <HAL_GPIO_WritePin>
 80010ca:	e00f      	b.n	80010ec <WebServerProcess+0xd4>
             //BSP_LED_Off(LED2);
           }
           else if(strstr((char *)resp, "radio=1"))
 80010cc:	492f      	ldr	r1, [pc, #188]	; (800118c <WebServerProcess+0x174>)
 80010ce:	4824      	ldr	r0, [pc, #144]	; (8001160 <WebServerProcess+0x148>)
 80010d0:	f007 f92b 	bl	800832a <strstr>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <WebServerProcess+0xd4>
           {
             LedState = 1;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <WebServerProcess+0x154>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
             HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010e6:	4828      	ldr	r0, [pc, #160]	; (8001188 <WebServerProcess+0x170>)
 80010e8:	f003 fc80 	bl	80049ec <HAL_GPIO_WritePin>
             //BSP_LED_On(LED2);
           }
           temp = (int) 20; //BSP_TSENSOR_ReadTemp();
 80010ec:	2314      	movs	r3, #20
 80010ee:	71bb      	strb	r3, [r7, #6]
         }
         if(strstr((char *)resp, "stop_server"))
 80010f0:	4927      	ldr	r1, [pc, #156]	; (8001190 <WebServerProcess+0x178>)
 80010f2:	481b      	ldr	r0, [pc, #108]	; (8001160 <WebServerProcess+0x148>)
 80010f4:	f007 f919 	bl	800832a <strstr>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d012      	beq.n	8001124 <WebServerProcess+0x10c>
         {
           if(strstr((char *)resp, "stop_server=0"))
 80010fe:	4925      	ldr	r1, [pc, #148]	; (8001194 <WebServerProcess+0x17c>)
 8001100:	4817      	ldr	r0, [pc, #92]	; (8001160 <WebServerProcess+0x148>)
 8001102:	f007 f912 	bl	800832a <strstr>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d002      	beq.n	8001112 <WebServerProcess+0xfa>
           {
             stopserver = false;
 800110c:	2300      	movs	r3, #0
 800110e:	71fb      	strb	r3, [r7, #7]
 8001110:	e008      	b.n	8001124 <WebServerProcess+0x10c>
           }
           else if(strstr((char *)resp, "stop_server=1"))
 8001112:	4921      	ldr	r1, [pc, #132]	; (8001198 <WebServerProcess+0x180>)
 8001114:	4812      	ldr	r0, [pc, #72]	; (8001160 <WebServerProcess+0x148>)
 8001116:	f007 f908 	bl	800832a <strstr>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <WebServerProcess+0x10c>
           {
             stopserver = true;
 8001120:	2301      	movs	r3, #1
 8001122:	71fb      	strb	r3, [r7, #7]
           }
         }
         temp = (int) 20; //(int) BSP_TSENSOR_ReadTemp();
 8001124:	2314      	movs	r3, #20
 8001126:	71bb      	strb	r3, [r7, #6]
         if(SendWebPage(LedState, temp) != WIFI_STATUS_OK)
 8001128:	4b10      	ldr	r3, [pc, #64]	; (800116c <WebServerProcess+0x154>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	79ba      	ldrb	r2, [r7, #6]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f836 	bl	80011a4 <SendWebPage>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <WebServerProcess+0x12e>
         {
           LOG(("> ERROR : Cannot send web page\r\n"));
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <WebServerProcess+0x158>)
 8001140:	f006 ff14 	bl	8007f6c <puts>
 8001144:	e006      	b.n	8001154 <WebServerProcess+0x13c>
         }
         else
         {
           LOG(("Send Page after POST command\r\n"));
 8001146:	4815      	ldr	r0, [pc, #84]	; (800119c <WebServerProcess+0x184>)
 8001148:	f006 ff10 	bl	8007f6c <puts>
 800114c:	e002      	b.n	8001154 <WebServerProcess+0x13c>
       }
     }
  }
  else
  {
    LOG(("Client close connection\r\n"));
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <WebServerProcess+0x188>)
 8001150:	f006 ff0c 	bl	8007f6c <puts>
  }

  return stopserver;
 8001154:	79fb      	ldrb	r3, [r7, #7]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200044e0 	.word	0x200044e0
 8001164:	0800957c 	.word	0x0800957c
 8001168:	08009598 	.word	0x08009598
 800116c:	200044dc 	.word	0x200044dc
 8001170:	0800959c 	.word	0x0800959c
 8001174:	080095bc 	.word	0x080095bc
 8001178:	080095dc 	.word	0x080095dc
 800117c:	080095e4 	.word	0x080095e4
 8001180:	080095f4 	.word	0x080095f4
 8001184:	080095fc 	.word	0x080095fc
 8001188:	48000400 	.word	0x48000400
 800118c:	08009604 	.word	0x08009604
 8001190:	0800960c 	.word	0x0800960c
 8001194:	08009618 	.word	0x08009618
 8001198:	08009628 	.word	0x08009628
 800119c:	08009638 	.word	0x08009638
 80011a0:	08009658 	.word	0x08009658

080011a4 <SendWebPage>:
  * @brief  Send HTML page
  * @param  None
  * @retval None
  */
static WIFI_Status_t SendWebPage(uint8_t ledIsOn, uint8_t temperature)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a6:	b093      	sub	sp, #76	; 0x4c
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	71bb      	strb	r3, [r7, #6]
  uint8_t  temp[50];
  uint16_t SentDataLength;
  WIFI_Status_t ret;

  /* construct web page content */
  strcpy((char *)http, (char *)"HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nPragma: no-cache\r\n\r\n");
 80011b4:	4abc      	ldr	r2, [pc, #752]	; (80014a8 <SendWebPage+0x304>)
 80011b6:	4bbd      	ldr	r3, [pc, #756]	; (80014ac <SendWebPage+0x308>)
 80011b8:	4614      	mov	r4, r2
 80011ba:	461d      	mov	r5, r3
 80011bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011cc:	c407      	stmia	r4!, {r0, r1, r2}
 80011ce:	8023      	strh	r3, [r4, #0]
 80011d0:	3402      	adds	r4, #2
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	7023      	strb	r3, [r4, #0]
  strcat((char *)http, (char *)"<html>\r\n<body>\r\n");
 80011d6:	48b4      	ldr	r0, [pc, #720]	; (80014a8 <SendWebPage+0x304>)
 80011d8:	f7fe fffa 	bl	80001d0 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4bb1      	ldr	r3, [pc, #708]	; (80014a8 <SendWebPage+0x304>)
 80011e2:	4413      	add	r3, r2
 80011e4:	4ab2      	ldr	r2, [pc, #712]	; (80014b0 <SendWebPage+0x30c>)
 80011e6:	461d      	mov	r5, r3
 80011e8:	4614      	mov	r4, r2
 80011ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ec:	6028      	str	r0, [r5, #0]
 80011ee:	6069      	str	r1, [r5, #4]
 80011f0:	60aa      	str	r2, [r5, #8]
 80011f2:	60eb      	str	r3, [r5, #12]
 80011f4:	7823      	ldrb	r3, [r4, #0]
 80011f6:	742b      	strb	r3, [r5, #16]
  strcat((char *)http, (char *)"<title>STM32 Web Server</title>\r\n");
 80011f8:	48ab      	ldr	r0, [pc, #684]	; (80014a8 <SendWebPage+0x304>)
 80011fa:	f7fe ffe9 	bl	80001d0 <strlen>
 80011fe:	4603      	mov	r3, r0
 8001200:	461a      	mov	r2, r3
 8001202:	4ba9      	ldr	r3, [pc, #676]	; (80014a8 <SendWebPage+0x304>)
 8001204:	4413      	add	r3, r2
 8001206:	4aab      	ldr	r2, [pc, #684]	; (80014b4 <SendWebPage+0x310>)
 8001208:	4614      	mov	r4, r2
 800120a:	469c      	mov	ip, r3
 800120c:	f104 0e20 	add.w	lr, r4, #32
 8001210:	4665      	mov	r5, ip
 8001212:	4626      	mov	r6, r4
 8001214:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001216:	6028      	str	r0, [r5, #0]
 8001218:	6069      	str	r1, [r5, #4]
 800121a:	60aa      	str	r2, [r5, #8]
 800121c:	60eb      	str	r3, [r5, #12]
 800121e:	3410      	adds	r4, #16
 8001220:	f10c 0c10 	add.w	ip, ip, #16
 8001224:	4574      	cmp	r4, lr
 8001226:	d1f3      	bne.n	8001210 <SendWebPage+0x6c>
 8001228:	4662      	mov	r2, ip
 800122a:	4623      	mov	r3, r4
 800122c:	881b      	ldrh	r3, [r3, #0]
 800122e:	8013      	strh	r3, [r2, #0]
  strcat((char *)http, (char *)"<h2>InventekSys : Web Server using Es-Wifi with STM32</h2>\r\n");
 8001230:	489d      	ldr	r0, [pc, #628]	; (80014a8 <SendWebPage+0x304>)
 8001232:	f7fe ffcd 	bl	80001d0 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b9b      	ldr	r3, [pc, #620]	; (80014a8 <SendWebPage+0x304>)
 800123c:	4413      	add	r3, r2
 800123e:	4a9e      	ldr	r2, [pc, #632]	; (80014b8 <SendWebPage+0x314>)
 8001240:	4614      	mov	r4, r2
 8001242:	469c      	mov	ip, r3
 8001244:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001248:	4665      	mov	r5, ip
 800124a:	4626      	mov	r6, r4
 800124c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800124e:	6028      	str	r0, [r5, #0]
 8001250:	6069      	str	r1, [r5, #4]
 8001252:	60aa      	str	r2, [r5, #8]
 8001254:	60eb      	str	r3, [r5, #12]
 8001256:	3410      	adds	r4, #16
 8001258:	f10c 0c10 	add.w	ip, ip, #16
 800125c:	4574      	cmp	r4, lr
 800125e:	d1f3      	bne.n	8001248 <SendWebPage+0xa4>
 8001260:	4665      	mov	r5, ip
 8001262:	4623      	mov	r3, r4
 8001264:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001266:	6028      	str	r0, [r5, #0]
 8001268:	6069      	str	r1, [r5, #4]
 800126a:	60aa      	str	r2, [r5, #8]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	732b      	strb	r3, [r5, #12]
  strcat((char *)http, (char *)"<br /><hr>\r\n");
 8001270:	488d      	ldr	r0, [pc, #564]	; (80014a8 <SendWebPage+0x304>)
 8001272:	f7fe ffad 	bl	80001d0 <strlen>
 8001276:	4603      	mov	r3, r0
 8001278:	461a      	mov	r2, r3
 800127a:	4b8b      	ldr	r3, [pc, #556]	; (80014a8 <SendWebPage+0x304>)
 800127c:	4413      	add	r3, r2
 800127e:	4a8f      	ldr	r2, [pc, #572]	; (80014bc <SendWebPage+0x318>)
 8001280:	461c      	mov	r4, r3
 8001282:	4613      	mov	r3, r2
 8001284:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001286:	6020      	str	r0, [r4, #0]
 8001288:	6061      	str	r1, [r4, #4]
 800128a:	60a2      	str	r2, [r4, #8]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	7323      	strb	r3, [r4, #12]
  strcat((char *)http, (char *)"<p><form method=\"POST\"><strong>Temp: <input type=\"text\" value=\"");
 8001290:	4885      	ldr	r0, [pc, #532]	; (80014a8 <SendWebPage+0x304>)
 8001292:	f7fe ff9d 	bl	80001d0 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b83      	ldr	r3, [pc, #524]	; (80014a8 <SendWebPage+0x304>)
 800129c:	4413      	add	r3, r2
 800129e:	4a88      	ldr	r2, [pc, #544]	; (80014c0 <SendWebPage+0x31c>)
 80012a0:	4614      	mov	r4, r2
 80012a2:	469c      	mov	ip, r3
 80012a4:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80012a8:	4665      	mov	r5, ip
 80012aa:	4626      	mov	r6, r4
 80012ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012ae:	6028      	str	r0, [r5, #0]
 80012b0:	6069      	str	r1, [r5, #4]
 80012b2:	60aa      	str	r2, [r5, #8]
 80012b4:	60eb      	str	r3, [r5, #12]
 80012b6:	3410      	adds	r4, #16
 80012b8:	f10c 0c10 	add.w	ip, ip, #16
 80012bc:	4574      	cmp	r4, lr
 80012be:	d1f3      	bne.n	80012a8 <SendWebPage+0x104>
  sprintf((char *)temp, "%d", temperature);
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	f107 030c 	add.w	r3, r7, #12
 80012c6:	497f      	ldr	r1, [pc, #508]	; (80014c4 <SendWebPage+0x320>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fe8b 	bl	8007fe4 <siprintf>
  strcat((char *)http, (char *)temp);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	4874      	ldr	r0, [pc, #464]	; (80014a8 <SendWebPage+0x304>)
 80012d6:	f006 ff95 	bl	8008204 <strcat>
  strcat((char *)http, (char *)"\"> <sup>O</sup>C");
 80012da:	4873      	ldr	r0, [pc, #460]	; (80014a8 <SendWebPage+0x304>)
 80012dc:	f7fe ff78 	bl	80001d0 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b70      	ldr	r3, [pc, #448]	; (80014a8 <SendWebPage+0x304>)
 80012e6:	4413      	add	r3, r2
 80012e8:	4a77      	ldr	r2, [pc, #476]	; (80014c8 <SendWebPage+0x324>)
 80012ea:	461d      	mov	r5, r3
 80012ec:	4614      	mov	r4, r2
 80012ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f0:	6028      	str	r0, [r5, #0]
 80012f2:	6069      	str	r1, [r5, #4]
 80012f4:	60aa      	str	r2, [r5, #8]
 80012f6:	60eb      	str	r3, [r5, #12]
 80012f8:	7823      	ldrb	r3, [r4, #0]
 80012fa:	742b      	strb	r3, [r5, #16]

  if (ledIsOn)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d040      	beq.n	8001384 <SendWebPage+0x1e0>
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" >LED off");
 8001302:	4869      	ldr	r0, [pc, #420]	; (80014a8 <SendWebPage+0x304>)
 8001304:	f7fe ff64 	bl	80001d0 <strlen>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <SendWebPage+0x304>)
 800130e:	4413      	add	r3, r2
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <SendWebPage+0x328>)
 8001312:	4614      	mov	r4, r2
 8001314:	469c      	mov	ip, r3
 8001316:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800131a:	4665      	mov	r5, ip
 800131c:	4626      	mov	r6, r4
 800131e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001320:	6028      	str	r0, [r5, #0]
 8001322:	6069      	str	r1, [r5, #4]
 8001324:	60aa      	str	r2, [r5, #8]
 8001326:	60eb      	str	r3, [r5, #12]
 8001328:	3410      	adds	r4, #16
 800132a:	f10c 0c10 	add.w	ip, ip, #16
 800132e:	4574      	cmp	r4, lr
 8001330:	d1f3      	bne.n	800131a <SendWebPage+0x176>
 8001332:	4663      	mov	r3, ip
 8001334:	4622      	mov	r2, r4
 8001336:	6810      	ldr	r0, [r2, #0]
 8001338:	6018      	str	r0, [r3, #0]
 800133a:	8891      	ldrh	r1, [r2, #4]
 800133c:	7992      	ldrb	r2, [r2, #6]
 800133e:	8099      	strh	r1, [r3, #4]
 8001340:	719a      	strb	r2, [r3, #6]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" checked>LED on");
 8001342:	4859      	ldr	r0, [pc, #356]	; (80014a8 <SendWebPage+0x304>)
 8001344:	f7fe ff44 	bl	80001d0 <strlen>
 8001348:	4603      	mov	r3, r0
 800134a:	461a      	mov	r2, r3
 800134c:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <SendWebPage+0x304>)
 800134e:	4413      	add	r3, r2
 8001350:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <SendWebPage+0x32c>)
 8001352:	4614      	mov	r4, r2
 8001354:	469c      	mov	ip, r3
 8001356:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800135a:	4665      	mov	r5, ip
 800135c:	4626      	mov	r6, r4
 800135e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001360:	6028      	str	r0, [r5, #0]
 8001362:	6069      	str	r1, [r5, #4]
 8001364:	60aa      	str	r2, [r5, #8]
 8001366:	60eb      	str	r3, [r5, #12]
 8001368:	3410      	adds	r4, #16
 800136a:	f10c 0c10 	add.w	ip, ip, #16
 800136e:	4574      	cmp	r4, lr
 8001370:	d1f3      	bne.n	800135a <SendWebPage+0x1b6>
 8001372:	4665      	mov	r5, ip
 8001374:	4623      	mov	r3, r4
 8001376:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001378:	6028      	str	r0, [r5, #0]
 800137a:	6069      	str	r1, [r5, #4]
 800137c:	60aa      	str	r2, [r5, #8]
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	81ab      	strh	r3, [r5, #12]
 8001382:	e03f      	b.n	8001404 <SendWebPage+0x260>
  }
  else
  {
    strcat((char *)http, (char *)"<p><input type=\"radio\" name=\"radio\" value=\"0\" checked>LED off");
 8001384:	4848      	ldr	r0, [pc, #288]	; (80014a8 <SendWebPage+0x304>)
 8001386:	f7fe ff23 	bl	80001d0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <SendWebPage+0x304>)
 8001390:	4413      	add	r3, r2
 8001392:	4a50      	ldr	r2, [pc, #320]	; (80014d4 <SendWebPage+0x330>)
 8001394:	4614      	mov	r4, r2
 8001396:	469c      	mov	ip, r3
 8001398:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800139c:	4665      	mov	r5, ip
 800139e:	4626      	mov	r6, r4
 80013a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a2:	6028      	str	r0, [r5, #0]
 80013a4:	6069      	str	r1, [r5, #4]
 80013a6:	60aa      	str	r2, [r5, #8]
 80013a8:	60eb      	str	r3, [r5, #12]
 80013aa:	3410      	adds	r4, #16
 80013ac:	f10c 0c10 	add.w	ip, ip, #16
 80013b0:	4574      	cmp	r4, lr
 80013b2:	d1f3      	bne.n	800139c <SendWebPage+0x1f8>
 80013b4:	4665      	mov	r5, ip
 80013b6:	4623      	mov	r3, r4
 80013b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013ba:	6028      	str	r0, [r5, #0]
 80013bc:	6069      	str	r1, [r5, #4]
 80013be:	60aa      	str	r2, [r5, #8]
 80013c0:	881b      	ldrh	r3, [r3, #0]
 80013c2:	81ab      	strh	r3, [r5, #12]
    strcat((char *)http, (char *)"<br><input type=\"radio\" name=\"radio\" value=\"1\" >LED on");
 80013c4:	4838      	ldr	r0, [pc, #224]	; (80014a8 <SendWebPage+0x304>)
 80013c6:	f7fe ff03 	bl	80001d0 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b36      	ldr	r3, [pc, #216]	; (80014a8 <SendWebPage+0x304>)
 80013d0:	4413      	add	r3, r2
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <SendWebPage+0x334>)
 80013d4:	4614      	mov	r4, r2
 80013d6:	469c      	mov	ip, r3
 80013d8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013dc:	4665      	mov	r5, ip
 80013de:	4626      	mov	r6, r4
 80013e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e2:	6028      	str	r0, [r5, #0]
 80013e4:	6069      	str	r1, [r5, #4]
 80013e6:	60aa      	str	r2, [r5, #8]
 80013e8:	60eb      	str	r3, [r5, #12]
 80013ea:	3410      	adds	r4, #16
 80013ec:	f10c 0c10 	add.w	ip, ip, #16
 80013f0:	4574      	cmp	r4, lr
 80013f2:	d1f3      	bne.n	80013dc <SendWebPage+0x238>
 80013f4:	4663      	mov	r3, ip
 80013f6:	4622      	mov	r2, r4
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	6018      	str	r0, [r3, #0]
 80013fc:	8891      	ldrh	r1, [r2, #4]
 80013fe:	7992      	ldrb	r2, [r2, #6]
 8001400:	8099      	strh	r1, [r3, #4]
 8001402:	719a      	strb	r2, [r3, #6]
  }

  strcat((char *)http, (char *)"</strong><p><input type=\"submit\"></form></span>");
 8001404:	4828      	ldr	r0, [pc, #160]	; (80014a8 <SendWebPage+0x304>)
 8001406:	f7fe fee3 	bl	80001d0 <strlen>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <SendWebPage+0x304>)
 8001410:	4413      	add	r3, r2
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <SendWebPage+0x338>)
 8001414:	4614      	mov	r4, r2
 8001416:	469c      	mov	ip, r3
 8001418:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800141c:	4665      	mov	r5, ip
 800141e:	4626      	mov	r6, r4
 8001420:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001422:	6028      	str	r0, [r5, #0]
 8001424:	6069      	str	r1, [r5, #4]
 8001426:	60aa      	str	r2, [r5, #8]
 8001428:	60eb      	str	r3, [r5, #12]
 800142a:	3410      	adds	r4, #16
 800142c:	f10c 0c10 	add.w	ip, ip, #16
 8001430:	4574      	cmp	r4, lr
 8001432:	d1f3      	bne.n	800141c <SendWebPage+0x278>
  strcat((char *)http, (char *)"</body>\r\n</html>\r\n");
 8001434:	481c      	ldr	r0, [pc, #112]	; (80014a8 <SendWebPage+0x304>)
 8001436:	f7fe fecb 	bl	80001d0 <strlen>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <SendWebPage+0x304>)
 8001440:	4413      	add	r3, r2
 8001442:	4a27      	ldr	r2, [pc, #156]	; (80014e0 <SendWebPage+0x33c>)
 8001444:	461d      	mov	r5, r3
 8001446:	4614      	mov	r4, r2
 8001448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144a:	6028      	str	r0, [r5, #0]
 800144c:	6069      	str	r1, [r5, #4]
 800144e:	60aa      	str	r2, [r5, #8]
 8001450:	60eb      	str	r3, [r5, #12]
 8001452:	8823      	ldrh	r3, [r4, #0]
 8001454:	78a2      	ldrb	r2, [r4, #2]
 8001456:	822b      	strh	r3, [r5, #16]
 8001458:	4613      	mov	r3, r2
 800145a:	74ab      	strb	r3, [r5, #18]

  ret = WIFI_SendData(0, (uint8_t *)http, strlen((char *)http), &SentDataLength, WIFI_WRITE_TIMEOUT);
 800145c:	4812      	ldr	r0, [pc, #72]	; (80014a8 <SendWebPage+0x304>)
 800145e:	f7fe feb7 	bl	80001d0 <strlen>
 8001462:	4603      	mov	r3, r0
 8001464:	b29a      	uxth	r2, r3
 8001466:	f107 030a 	add.w	r3, r7, #10
 800146a:	f242 7110 	movw	r1, #10000	; 0x2710
 800146e:	9100      	str	r1, [sp, #0]
 8001470:	490d      	ldr	r1, [pc, #52]	; (80014a8 <SendWebPage+0x304>)
 8001472:	2000      	movs	r0, #0
 8001474:	f002 f8e2 	bl	800363c <WIFI_SendData>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if((ret == WIFI_STATUS_OK) && (SentDataLength != strlen((char *)http)))
 800147e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10a      	bne.n	800149c <SendWebPage+0x2f8>
 8001486:	897b      	ldrh	r3, [r7, #10]
 8001488:	461c      	mov	r4, r3
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <SendWebPage+0x304>)
 800148c:	f7fe fea0 	bl	80001d0 <strlen>
 8001490:	4603      	mov	r3, r0
 8001492:	429c      	cmp	r4, r3
 8001494:	d002      	beq.n	800149c <SendWebPage+0x2f8>
  {
    ret = WIFI_STATUS_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 800149c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3744      	adds	r7, #68	; 0x44
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	200040d8 	.word	0x200040d8
 80014ac:	08009674 	.word	0x08009674
 80014b0:	080096b4 	.word	0x080096b4
 80014b4:	080096c8 	.word	0x080096c8
 80014b8:	080096ec 	.word	0x080096ec
 80014bc:	0800972c 	.word	0x0800972c
 80014c0:	0800973c 	.word	0x0800973c
 80014c4:	0800977c 	.word	0x0800977c
 80014c8:	08009780 	.word	0x08009780
 80014cc:	08009794 	.word	0x08009794
 80014d0:	080097cc 	.word	0x080097cc
 80014d4:	0800980c 	.word	0x0800980c
 80014d8:	0800984c 	.word	0x0800984c
 80014dc:	08009884 	.word	0x08009884
 80014e0:	080098b4 	.word	0x080098b4

080014e4 <AT_ExecuteCommand>:


#include "es_wifi.h"

static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t *cmd, uint8_t *pdata)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	82fb      	strh	r3, [r7, #22]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d056      	beq.n	80015b0 <AT_ExecuteCommand+0xcc>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001508:	2b00      	cmp	r3, #0
 800150a:	d051      	beq.n	80015b0 <AT_ExecuteCommand+0xcc>

  ret = Obj->fops.IO_Send(cmd, strlen((const char *)cmd), Obj->Timeout);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8001512:	68b8      	ldr	r0, [r7, #8]
 8001514:	f7fe fe5c 	bl	80001d0 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b299      	uxth	r1, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8001522:	461a      	mov	r2, r3
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	47a0      	blx	r4
 8001528:	4603      	mov	r3, r0
 800152a:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	dd3e      	ble.n	80015b0 <AT_ExecuteCommand+0xcc>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800153e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
 8001546:	4603      	mov	r3, r0
 8001548:	82fb      	strh	r3, [r7, #22]
    if ((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800154a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800154e:	2b00      	cmp	r3, #0
 8001550:	dd27      	ble.n	80015a2 <AT_ExecuteCommand+0xbe>
 8001552:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001556:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800155a:	dc22      	bgt.n	80015a2 <AT_ExecuteCommand+0xbe>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 800155c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001560:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001564:	d105      	bne.n	8001572 <AT_ExecuteCommand+0x8e>
      {
        /* ES_WIFI_DATA_SIZE maybe too small !! */
        recv_len--;
 8001566:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800156a:	b29b      	uxth	r3, r3
 800156c:	3b01      	subs	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 8001572:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]

      if (strstr((char *)pdata, "\r\nOK\r\n> "))
 800157e:	490f      	ldr	r1, [pc, #60]	; (80015bc <AT_ExecuteCommand+0xd8>)
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f006 fed2 	bl	800832a <strstr>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <AT_ExecuteCommand+0xac>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	e010      	b.n	80015b2 <AT_ExecuteCommand+0xce>
      }
      else if (strstr((char *)pdata, "\r\nERROR"))
 8001590:	490b      	ldr	r1, [pc, #44]	; (80015c0 <AT_ExecuteCommand+0xdc>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f006 fec9 	bl	800832a <strstr>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <AT_ExecuteCommand+0xbe>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800159e:	2305      	movs	r3, #5
 80015a0:	e007      	b.n	80015b2 <AT_ExecuteCommand+0xce>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 80015a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015a6:	f113 0f04 	cmn.w	r3, #4
 80015aa:	d101      	bne.n	80015b0 <AT_ExecuteCommand+0xcc>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80015ac:	2306      	movs	r3, #6
 80015ae:	e000      	b.n	80015b2 <AT_ExecuteCommand+0xce>
    }
   }
  }
  UNLOCK_WIFI();

  return ES_WIFI_STATUS_IO_ERROR;
 80015b0:	2304      	movs	r3, #4
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd90      	pop	{r4, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	080098c8 	.word	0x080098c8
 80015c0:	080098d4 	.word	0x080098d4

080015c4 <start_wifi_cli>:

static void start_wifi_cli(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b09a      	sub	sp, #104	; 0x68
 80015c8:	af00      	add	r7, sp, #0
	/* User CLI */

	  uint8_t wifi_cmd[100] = {0};
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	2260      	movs	r2, #96	; 0x60
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f006 fe0d 	bl	80081f4 <memset>
	  uint8_t *cmd_byte = wifi_cmd;
 80015da:	463b      	mov	r3, r7
 80015dc:	667b      	str	r3, [r7, #100]	; 0x64

		while(1)
		{

			if (HAL_UART_Receive(&huart1, cmd_byte, 1, 500) == HAL_OK)
 80015de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015e2:	2201      	movs	r2, #1
 80015e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <start_wifi_cli+0x80>)
 80015e8:	f005 fd98 	bl	800711c <HAL_UART_Receive>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d124      	bne.n	800163c <start_wifi_cli+0x78>
			{
				if((*cmd_byte) == '\r')
 80015f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b0d      	cmp	r3, #13
 80015f8:	d11c      	bne.n	8001634 <start_wifi_cli+0x70>
				{
					*(++cmd_byte) = 0; 		// string terminator
 80015fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015fc:	3301      	adds	r3, #1
 80015fe:	667b      	str	r3, [r7, #100]	; 0x64
 8001600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
					cmd_byte = wifi_cmd;
 8001606:	463b      	mov	r3, r7
 8001608:	667b      	str	r3, [r7, #100]	; 0x64

					extern ES_WIFIObject_t EsWifiObj;

					if (AT_ExecuteCommand(&EsWifiObj, (uint8_t*)wifi_cmd, EsWifiObj.CmdData) == ES_WIFI_STATUS_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	4a0e      	ldr	r2, [pc, #56]	; (8001648 <start_wifi_cli+0x84>)
 800160e:	4619      	mov	r1, r3
 8001610:	480e      	ldr	r0, [pc, #56]	; (800164c <start_wifi_cli+0x88>)
 8001612:	f7ff ff67 	bl	80014e4 <AT_ExecuteCommand>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e0      	bne.n	80015de <start_wifi_cli+0x1a>
					{
						HAL_UART_Transmit(&huart1, (uint8_t *)EsWifiObj.CmdData, strlen((char*)EsWifiObj.CmdData), HAL_MAX_DELAY);
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <start_wifi_cli+0x84>)
 800161e:	f7fe fdd7 	bl	80001d0 <strlen>
 8001622:	4603      	mov	r3, r0
 8001624:	b29a      	uxth	r2, r3
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	4907      	ldr	r1, [pc, #28]	; (8001648 <start_wifi_cli+0x84>)
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <start_wifi_cli+0x80>)
 800162e:	f005 fce1 	bl	8006ff4 <HAL_UART_Transmit>
 8001632:	e7d4      	b.n	80015de <start_wifi_cli+0x1a>
					}
				}
				else
				{
				  cmd_byte++;
 8001634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001636:	3301      	adds	r3, #1
 8001638:	667b      	str	r3, [r7, #100]	; 0x64
 800163a:	e7d0      	b.n	80015de <start_wifi_cli+0x1a>
				}
			}
			else
			{
				cmd_byte = wifi_cmd;
 800163c:	463b      	mov	r3, r7
 800163e:	667b      	str	r3, [r7, #100]	; 0x64
			if (HAL_UART_Receive(&huart1, cmd_byte, 1, 500) == HAL_OK)
 8001640:	e7cd      	b.n	80015de <start_wifi_cli+0x1a>
 8001642:	bf00      	nop
 8001644:	200001d0 	.word	0x200001d0
 8001648:	20004a18 	.word	0x20004a18
 800164c:	200048f0 	.word	0x200048f0

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001692:	2005      	movs	r0, #5
 8001694:	f002 f97e 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0ac      	sub	sp, #176	; 0xb0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2288      	movs	r2, #136	; 0x88
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f006 fd95 	bl	80081f4 <memset>
  if(DFSDM1_Init == 0)
 80016ca:	4b45      	ldr	r3, [pc, #276]	; (80017e0 <HAL_DFSDM_FilterMspInit+0x13c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d14b      	bne.n	800176a <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80016d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f822 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80016ee:	f7ff ffaf 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <HAL_DFSDM_FilterMspInit+0x140>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <HAL_DFSDM_FilterMspInit+0x140>)
 80016fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016fc:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <HAL_DFSDM_FilterMspInit+0x140>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d10b      	bne.n	800171c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001704:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001708:	4a37      	ldr	r2, [pc, #220]	; (80017e8 <HAL_DFSDM_FilterMspInit+0x144>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170e:	6613      	str	r3, [r2, #96]	; 0x60
 8001710:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800171c:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <HAL_DFSDM_FilterMspInit+0x144>)
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <HAL_DFSDM_FilterMspInit+0x144>)
 8001722:	f043 0310 	orr.w	r3, r3, #16
 8001726:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <HAL_DFSDM_FilterMspInit+0x144>)
 800172a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172c:	f003 0310 	and.w	r3, r3, #16
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001734:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800174e:	2306      	movs	r3, #6
 8001750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001754:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001758:	4619      	mov	r1, r3
 800175a:	4824      	ldr	r0, [pc, #144]	; (80017ec <HAL_DFSDM_FilterMspInit+0x148>)
 800175c:	f002 fe90 	bl	8004480 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3301      	adds	r3, #1
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_DFSDM_FilterMspInit+0x13c>)
 8001768:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_DFSDM_FilterMspInit+0x14c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d130      	bne.n	80017d6 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel4;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001776:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_DFSDM_FilterMspInit+0x154>)
 8001778:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_0;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001786:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001788:	2200      	movs	r2, #0
 800178a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 8001794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001798:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 800179c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017a4:	2220      	movs	r2, #32
 80017a6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80017ae:	4811      	ldr	r0, [pc, #68]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017b0:	f002 fc6e 	bl	8004090 <HAL_DMA_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80017ba:	f7ff ff49 	bl	8001650 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0c      	ldr	r2, [pc, #48]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017ce:	629a      	str	r2, [r3, #40]	; 0x28
 80017d0:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80017d6:	bf00      	nop
 80017d8:	37b0      	adds	r7, #176	; 0xb0
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200048e4 	.word	0x200048e4
 80017e4:	200048e0 	.word	0x200048e0
 80017e8:	40021000 	.word	0x40021000
 80017ec:	48001000 	.word	0x48001000
 80017f0:	40016100 	.word	0x40016100
 80017f4:	20000124 	.word	0x20000124
 80017f8:	40020044 	.word	0x40020044

080017fc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0ac      	sub	sp, #176	; 0xb0
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2288      	movs	r2, #136	; 0x88
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f006 fce9 	bl	80081f4 <memset>
  if(DFSDM1_Init == 0)
 8001822:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d14b      	bne.n	80018c2 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800182a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800182e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001830:	2300      	movs	r3, #0
 8001832:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4618      	mov	r0, r3
 800183c:	f003 ff76 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001846:	f7ff ff03 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800184a:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001852:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001854:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d10b      	bne.n	8001874 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800185e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001860:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001866:	6613      	str	r3, [r2, #96]	; 0x60
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800186a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001874:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001878:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800187a:	f043 0310 	orr.w	r3, r3, #16
 800187e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001880:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	f003 0310 	and.w	r3, r3, #16
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800188c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018a6:	2306      	movs	r3, #6
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b0:	4619      	mov	r1, r3
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80018b4:	f002 fde4 	bl	8004480 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	4a03      	ldr	r2, [pc, #12]	; (80018cc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80018c0:	6013      	str	r3, [r2, #0]
  }

}
 80018c2:	bf00      	nop
 80018c4:	37b0      	adds	r7, #176	; 0xb0
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200048e4 	.word	0x200048e4
 80018d0:	200048e0 	.word	0x200048e0
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48001000 	.word	0x48001000

080018dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_SPI_MspInit+0x7c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d128      	bne.n	8001950 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_SPI_MspInit+0x80>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	4a16      	ldr	r2, [pc, #88]	; (800195c <HAL_SPI_MspInit+0x80>)
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_SPI_MspInit+0x80>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_SPI_MspInit+0x80>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_SPI_MspInit+0x80>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_SPI_MspInit+0x80>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800192e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001940:	2306      	movs	r3, #6
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	4619      	mov	r1, r3
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_SPI_MspInit+0x84>)
 800194c:	f002 fd98 	bl	8004480 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40003c00 	.word	0x40003c00
 800195c:	40021000 	.word	0x40021000
 8001960:	48000800 	.word	0x48000800

08001964 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_SPI_MspDeInit+0x30>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d10a      	bne.n	800198c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_SPI_MspDeInit+0x34>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <HAL_SPI_MspDeInit+0x34>)
 800197c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001980:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 8001982:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_SPI_MspDeInit+0x38>)
 8001988:	f002 ff24 	bl	80047d4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40003c00 	.word	0x40003c00
 8001998:	40021000 	.word	0x40021000
 800199c:	48000800 	.word	0x48000800

080019a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b0ac      	sub	sp, #176	; 0xb0
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
 80019b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	2288      	movs	r2, #136	; 0x88
 80019be:	2100      	movs	r1, #0
 80019c0:	4618      	mov	r0, r3
 80019c2:	f006 fc17 	bl	80081f4 <memset>
  if(huart->Instance==USART1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <HAL_UART_MspInit+0xb0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d13a      	bne.n	8001a46 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019d4:	2300      	movs	r3, #0
 80019d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4618      	mov	r0, r3
 80019de:	f003 fea5 	bl	800572c <HAL_RCCEx_PeriphCLKConfig>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e8:	f7ff fe32 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_UART_MspInit+0xb4>)
 80019ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f0:	4a18      	ldr	r2, [pc, #96]	; (8001a54 <HAL_UART_MspInit+0xb4>)
 80019f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f6:	6613      	str	r3, [r2, #96]	; 0x60
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <HAL_UART_MspInit+0xb4>)
 80019fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_UART_MspInit+0xb4>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_UART_MspInit+0xb4>)
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_UART_MspInit+0xb4>)
 8001a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001a1c:	23c0      	movs	r3, #192	; 0xc0
 8001a1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a34:	2307      	movs	r3, #7
 8001a36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <HAL_UART_MspInit+0xb8>)
 8001a42:	f002 fd1d 	bl	8004480 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	37b0      	adds	r7, #176	; 0xb0
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40013800 	.word	0x40013800
 8001a54:	40021000 	.word	0x40021000
 8001a58:	48000400 	.word	0x48000400

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f001 fe60 	bl	800376c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001ab4:	2002      	movs	r0, #2
 8001ab6:	f002 ffb1 	bl	8004a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <DMA1_Channel4_IRQHandler+0x10>)
 8001ac6:	f002 fbfb 	bl	80042c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000124 	.word	0x20000124

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001aee:	f006 fc79 	bl	80083e4 <__errno>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2216      	movs	r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
  return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_exit>:

void _exit (int status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffe7 	bl	8001ae4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b16:	e7fe      	b.n	8001b16 <_exit+0x12>

08001b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e00a      	b.n	8001b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b2a:	f3af 8000 	nop.w
 8001b2e:	4601      	mov	r1, r0
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf0      	blt.n	8001b2a <_read+0x12>
  }

  return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart1;

	if (file == 1)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d10d      	bne.n	8001b82 <_write+0x2e>
	{
		if (HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000) != HAL_OK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	4806      	ldr	r0, [pc, #24]	; (8001b8c <_write+0x38>)
 8001b72:	f005 fa3f 	bl	8006ff4 <HAL_UART_Transmit>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <_write+0x2e>
		{
			return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b80:	e000      	b.n	8001b84 <_write+0x30>
		}
	}
  return len;
 8001b82:	687b      	ldr	r3, [r7, #4]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	200001d0 	.word	0x200001d0

08001b90 <_close>:

int _close(int file)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_isatty>:

int _isatty(int file)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd0:	2301      	movs	r3, #1
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f006 fbdc 	bl	80083e4 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20018000 	.word	0x20018000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	200048e8 	.word	0x200048e8
 8001c60:	20005378 	.word	0x20005378

08001c64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <SystemInit+0x20>)
 8001c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <SystemInit+0x20>)
 8001c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c8c:	f7ff ffea 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c92:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c94:	4a0d      	ldr	r2, [pc, #52]	; (8001ccc <LoopForever+0xe>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ca8:	4c0a      	ldr	r4, [pc, #40]	; (8001cd4 <LoopForever+0x16>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f006 fb9b 	bl	80083f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cba:	f7fe fc5f 	bl	800057c <main>

08001cbe <LoopForever>:

LoopForever:
    b LoopForever
 8001cbe:	e7fe      	b.n	8001cbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cc0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ccc:	08009ee0 	.word	0x08009ee0
  ldr r2, =_sbss
 8001cd0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001cd4:	20005378 	.word	0x20005378

08001cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_2_IRQHandler>

08001cda <Hex2Num>:
  * @brief  Convert char in Hex format to integer.
  * @param  a: character to convert
  * @retval integer value.
  */
static  uint8_t Hex2Num(char a)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce8:	d906      	bls.n	8001cf8 <Hex2Num+0x1e>
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	2b39      	cmp	r3, #57	; 0x39
 8001cee:	d803      	bhi.n	8001cf8 <Hex2Num+0x1e>
        return a - '0';
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	3b30      	subs	r3, #48	; 0x30
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	e014      	b.n	8001d22 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	2b60      	cmp	r3, #96	; 0x60
 8001cfc:	d906      	bls.n	8001d0c <Hex2Num+0x32>
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	2b66      	cmp	r3, #102	; 0x66
 8001d02:	d803      	bhi.n	8001d0c <Hex2Num+0x32>
        return (a - 'a') + 10;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	3b57      	subs	r3, #87	; 0x57
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e00a      	b.n	8001d22 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d906      	bls.n	8001d20 <Hex2Num+0x46>
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b46      	cmp	r3, #70	; 0x46
 8001d16:	d803      	bhi.n	8001d20 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	3b37      	subs	r3, #55	; 0x37
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e000      	b.n	8001d22 <Hex2Num+0x48>
    }

    return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint8_t ParseHexNumber(const char *ptr, uint8_t *cnt)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    uint8_t sum = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	73bb      	strb	r3, [r7, #14]

    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001d40:	e012      	b.n	8001d68 <ParseHexNumber+0x3a>
        sum <<= 4;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	73fb      	strb	r3, [r7, #15]
        sum += Hex2Num(*ptr);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ffc4 	bl	8001cda <Hex2Num>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	4413      	add	r3, r2
 8001d5a:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	607b      	str	r3, [r7, #4]
        done_count++;
 8001d62:	7bbb      	ldrb	r3, [r7, #14]
 8001d64:	3301      	adds	r3, #1
 8001d66:	73bb      	strb	r3, [r7, #14]
    while (CHARISHEXNUM(*ptr) && (done_count < 2)) {       /* Parse number */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	2b2f      	cmp	r3, #47	; 0x2f
 8001d6e:	d903      	bls.n	8001d78 <ParseHexNumber+0x4a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b39      	cmp	r3, #57	; 0x39
 8001d76:	d90f      	bls.n	8001d98 <ParseHexNumber+0x6a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b60      	cmp	r3, #96	; 0x60
 8001d7e:	d903      	bls.n	8001d88 <ParseHexNumber+0x5a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b66      	cmp	r3, #102	; 0x66
 8001d86:	d907      	bls.n	8001d98 <ParseHexNumber+0x6a>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b40      	cmp	r3, #64	; 0x40
 8001d8e:	d906      	bls.n	8001d9e <ParseHexNumber+0x70>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b46      	cmp	r3, #70	; 0x46
 8001d96:	d802      	bhi.n	8001d9e <ParseHexNumber+0x70>
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d9d1      	bls.n	8001d42 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <ParseHexNumber+0x7c>
        *cnt = done_count;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7bba      	ldrb	r2, [r7, #14]
 8001da8:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                             /* Return number */
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(const char *ptr, uint8_t *cnt)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	73fb      	strb	r3, [r7, #15]
    uint8_t done_count = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                      /* Check for minus character */
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b2d      	cmp	r3, #45	; 0x2d
 8001dd0:	d119      	bne.n	8001e06 <ParseNumber+0x52>
        minus = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
        done_count++;
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	3301      	adds	r3, #1
 8001de0:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001de2:	e010      	b.n	8001e06 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	461a      	mov	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3b30      	subs	r3, #48	; 0x30
 8001df6:	4413      	add	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
        ptr++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
        done_count++;
 8001e00:	7bbb      	ldrb	r3, [r7, #14]
 8001e02:	3301      	adds	r3, #1
 8001e04:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                               /* Parse number */
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b2f      	cmp	r3, #47	; 0x2f
 8001e0c:	d903      	bls.n	8001e16 <ParseNumber+0x62>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b39      	cmp	r3, #57	; 0x39
 8001e14:	d9e6      	bls.n	8001de4 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                      /* Save number of characters used for number */
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <ParseNumber+0x6e>
        *cnt = done_count;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7bba      	ldrb	r2, [r7, #14]
 8001e20:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                            /* Minus detected */
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d002      	beq.n	8001e2e <ParseNumber+0x7a>
        return 0 - sum;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	425b      	negs	r3, r3
 8001e2c:	e000      	b.n	8001e30 <ParseNumber+0x7c>
    }
    return sum;                                             /* Return number */
 8001e2e:	68bb      	ldr	r3, [r7, #8]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <ParseMAC>:
  * @param  Mac: pointer to MAC-48 array
  * @param  MacSize: the size of the MAC array
  * @retval None.
  */
static void ParseMAC(const char *ptr, uint8_t Mac[], size_t MacSize)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (Mac != NULL))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d027      	beq.n	8001ea2 <ParseMAC+0x66>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d024      	beq.n	8001ea2 <ParseMAC+0x66>
  {
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001e58:	e018      	b.n	8001e8c <ParseMAC+0x50>
    uint8_t done_count = 1;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	75bb      	strb	r3, [r7, #22]
    if (*ptr != ':')
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b3a      	cmp	r3, #58	; 0x3a
 8001e64:	d00d      	beq.n	8001e82 <ParseMAC+0x46>
    {
      Mac[hex_8bits_count++] = ParseHexNumber(ptr, &done_count);
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	75fa      	strb	r2, [r7, #23]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	189c      	adds	r4, r3, r2
 8001e72:	f107 0316 	add.w	r3, r7, #22
 8001e76:	4619      	mov	r1, r3
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff ff58 	bl	8001d2e <ParseHexNumber>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	7023      	strb	r3, [r4, #0]
    }
    ptr = ptr + done_count;
 8001e82:	7dbb      	ldrb	r3, [r7, #22]
 8001e84:	461a      	mov	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < MacSize) && (hex_8bits_count < 6) && (*ptr)) {
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d906      	bls.n	8001ea2 <ParseMAC+0x66>
 8001e94:	7dfb      	ldrb	r3, [r7, #23]
 8001e96:	2b05      	cmp	r3, #5
 8001e98:	d803      	bhi.n	8001ea2 <ParseMAC+0x66>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1db      	bne.n	8001e5a <ParseMAC+0x1e>
   }
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	371c      	adds	r7, #28
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd90      	pop	{r4, r7, pc}

08001eaa <ParseIP>:
  * @param  IpAdrr: pointer to IPv4 array
  * @param  IpAdrrSize: the size of IP array
  * @retval None.
  */
static void ParseIP(const char *ptr, uint8_t IpAdrr[], size_t IpAdrrSize)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b086      	sub	sp, #24
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  uint8_t hex_8bits_count = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]

  if ((ptr != NULL) && (IpAdrr != NULL) && (4 <= IpAdrrSize))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d027      	beq.n	8001f10 <ParseIP+0x66>
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d024      	beq.n	8001f10 <ParseIP+0x66>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d921      	bls.n	8001f10 <ParseIP+0x66>
  {
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001ecc:	e019      	b.n	8001f02 <ParseIP+0x58>
    uint8_t done_count = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	75bb      	strb	r3, [r7, #22]
    if (*ptr != '.')
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8001ed8:	d00e      	beq.n	8001ef8 <ParseIP+0x4e>
    {
      IpAdrr[hex_8bits_count++] = (uint8_t)ParseNumber(ptr, &done_count);
 8001eda:	f107 0316 	add.w	r3, r7, #22
 8001ede:	4619      	mov	r1, r3
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff ff67 	bl	8001db4 <ParseNumber>
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	75fa      	strb	r2, [r7, #23]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	b2ca      	uxtb	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + done_count;
 8001ef8:	7dbb      	ldrb	r3, [r7, #22]
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	60fb      	str	r3, [r7, #12]
    while ((hex_8bits_count < 4) && (*ptr != 0)) {
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d803      	bhi.n	8001f10 <ParseIP+0x66>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1de      	bne.n	8001ece <ParseIP+0x24>
   }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  pdata: A string from the WiFi device
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj, uint8_t *pdata)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	4940      	ldr	r1, [pc, #256]	; (800202c <AT_ParseInfo+0x114>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 f99d 	bl	800826c <strtok>
 8001f32:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8001f34:	e071      	b.n	800201a <AT_ParseInfo+0x102>
    switch (num++) {
 8001f36:	7afb      	ldrb	r3, [r7, #11]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	72fa      	strb	r2, [r7, #11]
 8001f3c:	2b06      	cmp	r3, #6
 8001f3e:	d866      	bhi.n	800200e <AT_ParseInfo+0xf6>
 8001f40:	a201      	add	r2, pc, #4	; (adr r2, 8001f48 <AT_ParseInfo+0x30>)
 8001f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f46:	bf00      	nop
 8001f48:	08001f65 	.word	0x08001f65
 8001f4c:	08001f79 	.word	0x08001f79
 8001f50:	08001f91 	.word	0x08001f91
 8001f54:	08001fa9 	.word	0x08001fa9
 8001f58:	08001fc1 	.word	0x08001fc1
 8001f5c:	08001fd9 	.word	0x08001fd9
 8001f60:	08001fed 	.word	0x08001fed
    case 0:
      strncpy((char *)Obj->Product_ID, ptr, sizeof(Obj->Product_ID) - 1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	221f      	movs	r2, #31
 8001f68:	68f9      	ldr	r1, [r7, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f006 f96b 	bl	8008246 <strncpy>
      Obj->Product_ID[sizeof(Obj->Product_ID) - 1] = '\0';
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	77da      	strb	r2, [r3, #31]
      break;
 8001f76:	e04b      	b.n	8002010 <AT_ParseInfo+0xf8>

    case 1:
      strncpy((char *)Obj->FW_Rev, ptr, sizeof(Obj->FW_Rev) - 1);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3320      	adds	r3, #32
 8001f7c:	2217      	movs	r2, #23
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f006 f960 	bl	8008246 <strncpy>
      Obj->FW_Rev[sizeof(Obj->FW_Rev) - 1] = '\0';
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
      break;
 8001f8e:	e03f      	b.n	8002010 <AT_ParseInfo+0xf8>

    case 2:
      strncpy((char *)Obj->API_Rev, ptr, sizeof(Obj->API_Rev) - 1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3338      	adds	r3, #56	; 0x38
 8001f94:	220f      	movs	r2, #15
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f006 f954 	bl	8008246 <strncpy>
      Obj->API_Rev[sizeof(Obj->API_Rev) - 1] = '\0';
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8001fa6:	e033      	b.n	8002010 <AT_ParseInfo+0xf8>

    case 3:
      strncpy((char *)Obj->Stack_Rev, ptr, sizeof(Obj->Stack_Rev) - 1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3348      	adds	r3, #72	; 0x48
 8001fac:	220f      	movs	r2, #15
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f006 f948 	bl	8008246 <strncpy>
      Obj->Stack_Rev[sizeof(Obj->Stack_Rev) - 1] = '\0';
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
      break;
 8001fbe:	e027      	b.n	8002010 <AT_ParseInfo+0xf8>

    case 4:
      strncpy((char *)Obj->RTOS_Rev, ptr, sizeof(Obj->RTOS_Rev) - 1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3358      	adds	r3, #88	; 0x58
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f006 f93c 	bl	8008246 <strncpy>
      Obj->RTOS_Rev[sizeof(Obj->RTOS_Rev) - 1] = '\0';
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      break;
 8001fd6:	e01b      	b.n	8002010 <AT_ParseInfo+0xf8>

    case 5:
      Obj->CPU_Clock = (uint32_t)ParseNumber(ptr, NULL);
 8001fd8:	2100      	movs	r1, #0
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff feea 	bl	8001db4 <ParseNumber>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8001fea:	e011      	b.n	8002010 <AT_ParseInfo+0xf8>

    case 6:
      ptr = strtok(ptr, "\r");
 8001fec:	4910      	ldr	r1, [pc, #64]	; (8002030 <AT_ParseInfo+0x118>)
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f006 f93c 	bl	800826c <strtok>
 8001ff4:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name, ptr, sizeof(Obj->Product_Name) - 1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3368      	adds	r3, #104	; 0x68
 8001ffa:	221f      	movs	r2, #31
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f006 f921 	bl	8008246 <strncpy>
      Obj->Product_Name[sizeof(Obj->Product_Name) - 1] = '\0';
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
      break;
 800200c:	e000      	b.n	8002010 <AT_ParseInfo+0xf8>

    default: break;
 800200e:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002010:	4906      	ldr	r1, [pc, #24]	; (800202c <AT_ParseInfo+0x114>)
 8002012:	2000      	movs	r0, #0
 8002014:	f006 f92a 	bl	800826c <strtok>
 8002018:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d18a      	bne.n	8001f36 <AT_ParseInfo+0x1e>
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	0800990c 	.word	0x0800990c
 8002030:	08009910 	.word	0x08009910

08002034 <AT_ParseConnSettings>:
  * @param  pdata: A string from the WiFi device
  * @param  NetSettings: settings
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3302      	adds	r3, #2
 8002046:	4959      	ldr	r1, [pc, #356]	; (80021ac <AT_ParseConnSettings+0x178>)
 8002048:	4618      	mov	r0, r3
 800204a:	f006 f90f 	bl	800826c <strtok>
 800204e:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8002050:	e0a2      	b.n	8002198 <AT_ParseConnSettings+0x164>
    switch (num++) {
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	73fa      	strb	r2, [r7, #15]
 8002058:	2b0b      	cmp	r3, #11
 800205a:	f200 808c 	bhi.w	8002176 <AT_ParseConnSettings+0x142>
 800205e:	a201      	add	r2, pc, #4	; (adr r2, 8002064 <AT_ParseConnSettings+0x30>)
 8002060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002064:	08002095 	.word	0x08002095
 8002068:	080020ab 	.word	0x080020ab
 800206c:	080020c3 	.word	0x080020c3
 8002070:	080020d7 	.word	0x080020d7
 8002074:	080020eb 	.word	0x080020eb
 8002078:	080020ff 	.word	0x080020ff
 800207c:	0800210f 	.word	0x0800210f
 8002080:	0800211f 	.word	0x0800211f
 8002084:	0800212f 	.word	0x0800212f
 8002088:	0800213f 	.word	0x0800213f
 800208c:	0800214f 	.word	0x0800214f
 8002090:	08002163 	.word	0x08002163
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, sizeof(NetSettings->SSID) - 1);
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2220      	movs	r2, #32
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	4618      	mov	r0, r3
 800209c:	f006 f8d3 	bl	8008246 <strncpy>
      NetSettings->SSID[sizeof(NetSettings->SSID) - 1] = '\0';
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2020 	strb.w	r2, [r3, #32]
      break;
 80020a8:	e066      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 1:
      strncpy((char *)NetSettings->pswd, ptr, sizeof(NetSettings->pswd) - 1);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	3321      	adds	r3, #33	; 0x21
 80020ae:	2220      	movs	r2, #32
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f006 f8c7 	bl	8008246 <strncpy>
      NetSettings->pswd[sizeof(NetSettings->pswd) - 1] = '\0';
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      break;
 80020c0:	e05a      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 2:
      NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 80020c2:	2100      	movs	r1, #0
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f7ff fe75 	bl	8001db4 <ParseNumber>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 80020d4:	e050      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 3:
      NetSettings->DHCP_IsEnabled = (uint8_t)ParseNumber(ptr, NULL);
 80020d6:	2100      	movs	r1, #0
 80020d8:	68b8      	ldr	r0, [r7, #8]
 80020da:	f7ff fe6b 	bl	8001db4 <ParseNumber>
 80020de:	4603      	mov	r3, r0
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 80020e8:	e046      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 80020ea:	2100      	movs	r1, #0
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f7ff fe61 	bl	8001db4 <ParseNumber>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 80020fc:	e03c      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr, sizeof(NetSettings->IP_Addr));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3348      	adds	r3, #72	; 0x48
 8002102:	2204      	movs	r2, #4
 8002104:	4619      	mov	r1, r3
 8002106:	68b8      	ldr	r0, [r7, #8]
 8002108:	f7ff fecf 	bl	8001eaa <ParseIP>
      break;
 800210c:	e034      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask, sizeof(NetSettings->IP_Mask));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	334c      	adds	r3, #76	; 0x4c
 8002112:	2204      	movs	r2, #4
 8002114:	4619      	mov	r1, r3
 8002116:	68b8      	ldr	r0, [r7, #8]
 8002118:	f7ff fec7 	bl	8001eaa <ParseIP>
      break;
 800211c:	e02c      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr, sizeof(NetSettings->Gateway_Addr));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3350      	adds	r3, #80	; 0x50
 8002122:	2204      	movs	r2, #4
 8002124:	4619      	mov	r1, r3
 8002126:	68b8      	ldr	r0, [r7, #8]
 8002128:	f7ff febf 	bl	8001eaa <ParseIP>
      break;
 800212c:	e024      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 8:
      ParseIP(ptr, NetSettings->DNS1, sizeof(NetSettings->DNS1));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3354      	adds	r3, #84	; 0x54
 8002132:	2204      	movs	r2, #4
 8002134:	4619      	mov	r1, r3
 8002136:	68b8      	ldr	r0, [r7, #8]
 8002138:	f7ff feb7 	bl	8001eaa <ParseIP>
      break;
 800213c:	e01c      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 9:
      ParseIP(ptr, NetSettings->DNS2, sizeof(NetSettings->DNS2));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3358      	adds	r3, #88	; 0x58
 8002142:	2204      	movs	r2, #4
 8002144:	4619      	mov	r1, r3
 8002146:	68b8      	ldr	r0, [r7, #8]
 8002148:	f7ff feaf 	bl	8001eaa <ParseIP>
      break;
 800214c:	e014      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 10:
      NetSettings->JoinRetries = (uint8_t)ParseNumber(ptr, NULL);
 800214e:	2100      	movs	r1, #0
 8002150:	68b8      	ldr	r0, [r7, #8]
 8002152:	f7ff fe2f 	bl	8001db4 <ParseNumber>
 8002156:	4603      	mov	r3, r0
 8002158:	b2da      	uxtb	r2, r3
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8002160:	e00a      	b.n	8002178 <AT_ParseConnSettings+0x144>

    case 11:
      NetSettings->AutoConnect = (uint8_t)ParseNumber(ptr, NULL);
 8002162:	2100      	movs	r1, #0
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f7ff fe25 	bl	8001db4 <ParseNumber>
 800216a:	4603      	mov	r3, r0
 800216c:	b2da      	uxtb	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8002174:	e000      	b.n	8002178 <AT_ParseConnSettings+0x144>

    default:
      break;
 8002176:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8002178:	490c      	ldr	r1, [pc, #48]	; (80021ac <AT_ParseConnSettings+0x178>)
 800217a:	2000      	movs	r0, #0
 800217c:	f006 f876 	bl	800826c <strtok>
 8002180:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d007      	beq.n	8002198 <AT_ParseConnSettings+0x164>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3b01      	subs	r3, #1
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b2c      	cmp	r3, #44	; 0x2c
 8002190:	d102      	bne.n	8002198 <AT_ParseConnSettings+0x164>
    { /* Ignore empty fields */
      num++;
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	3301      	adds	r3, #1
 8002196:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f47f af59 	bne.w	8002052 <AT_ParseConnSettings+0x1e>
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	0800990c 	.word	0x0800990c

080021b0 <AT_ExecuteCommand>:
  * @param  cmd: pointer to the command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, const uint8_t* cmd, uint8_t *pdata)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80021c2:	68b8      	ldr	r0, [r7, #8]
 80021c4:	f7fe f804 	bl	80001d0 <strlen>
 80021c8:	4603      	mov	r3, r0
 80021ca:	b299      	uxth	r1, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80021d2:	461a      	mov	r2, r3
 80021d4:	68b8      	ldr	r0, [r7, #8]
 80021d6:	47a0      	blx	r4
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	dd26      	ble.n	800222c <AT_ExecuteCommand+0x7c>
  {
    int16_t n= Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80021ea:	2100      	movs	r1, #0
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
 80021f0:	4603      	mov	r3, r0
 80021f2:	82fb      	strh	r3, [r7, #22]
    if(n > 0)
 80021f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	dd17      	ble.n	800222c <AT_ExecuteCommand+0x7c>
    {
      *(pdata + n) = 0;
 80021fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8002208:	490b      	ldr	r1, [pc, #44]	; (8002238 <AT_ExecuteCommand+0x88>)
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f006 f88d 	bl	800832a <strstr>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <AT_ExecuteCommand+0x6a>
      {
        return ES_WIFI_STATUS_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e009      	b.n	800222e <AT_ExecuteCommand+0x7e>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <AT_ExecuteCommand+0x8c>)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f006 f884 	bl	800832a <strstr>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <AT_ExecuteCommand+0x7c>
      {
        return ES_WIFI_STATUS_ERROR;
 8002228:	2302      	movs	r3, #2
 800222a:	e000      	b.n	800222e <AT_ExecuteCommand+0x7e>
      }
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 800222c:	2304      	movs	r3, #4
}
 800222e:	4618      	mov	r0, r3
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}
 8002236:	bf00      	nop
 8002238:	08009924 	.word	0x08009924
 800223c:	08009930 	.word	0x08009930

08002240 <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd,
                                           const uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	827b      	strh	r3, [r7, #18]
  uint16_t n;

  LOCK_WIFI();

  cmd_len = strlen((char*)cmd);
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f7fd ffb8 	bl	80001d0 <strlen>
 8002260:	4603      	mov	r3, r0
 8002262:	827b      	strh	r3, [r7, #18]

  /* Can send only even number of byte on first send. */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8002264:	8a7b      	ldrh	r3, [r7, #18]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <AT_RequestSendData+0x32>
 800226e:	2302      	movs	r3, #2
 8002270:	e05d      	b.n	800232e <AT_RequestSendData+0xee>

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002278:	2b00      	cmp	r3, #0
 800227a:	d057      	beq.n	800232c <AT_RequestSendData+0xec>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002282:	2b00      	cmp	r3, #0
 8002284:	d052      	beq.n	800232c <AT_RequestSendData+0xec>

  n = Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8002292:	8a79      	ldrh	r1, [r7, #18]
 8002294:	68b8      	ldr	r0, [r7, #8]
 8002296:	4798      	blx	r3
 8002298:	4603      	mov	r3, r0
 800229a:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 800229c:	8a3a      	ldrh	r2, [r7, #16]
 800229e:	8a7b      	ldrh	r3, [r7, #18]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d143      	bne.n	800232c <AT_RequestSendData+0xec>
  {
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80022b0:	8879      	ldrh	r1, [r7, #2]
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 80022ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d131      	bne.n	8002328 <AT_RequestSendData+0xe8>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 80022d0:	2100      	movs	r1, #0
 80022d2:	6a38      	ldr	r0, [r7, #32]
 80022d4:	4798      	blx	r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80022da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	dd19      	ble.n	8002316 <AT_RequestSendData+0xd6>
      {
        *(pdata + recv_len) = 0;
 80022e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	4413      	add	r3, r2
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80022ee:	4912      	ldr	r1, [pc, #72]	; (8002338 <AT_RequestSendData+0xf8>)
 80022f0:	6a38      	ldr	r0, [r7, #32]
 80022f2:	f006 f81a 	bl	800832a <strstr>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <AT_RequestSendData+0xc0>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e016      	b.n	800232e <AT_RequestSendData+0xee>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8002300:	490e      	ldr	r1, [pc, #56]	; (800233c <AT_RequestSendData+0xfc>)
 8002302:	6a38      	ldr	r0, [r7, #32]
 8002304:	f006 f811 	bl	800832a <strstr>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <AT_RequestSendData+0xd2>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 800230e:	2305      	movs	r3, #5
 8002310:	e00d      	b.n	800232e <AT_RequestSendData+0xee>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 8002312:	2302      	movs	r3, #2
 8002314:	e00b      	b.n	800232e <AT_RequestSendData+0xee>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER)
 8002316:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800231a:	f113 0f04 	cmn.w	r3, #4
 800231e:	d101      	bne.n	8002324 <AT_RequestSendData+0xe4>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8002320:	2306      	movs	r3, #6
 8002322:	e004      	b.n	800232e <AT_RequestSendData+0xee>
      }
      return ES_WIFI_STATUS_ERROR;
 8002324:	2302      	movs	r3, #2
 8002326:	e002      	b.n	800232e <AT_RequestSendData+0xee>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8002328:	2302      	movs	r3, #2
 800232a:	e000      	b.n	800232e <AT_RequestSendData+0xee>
    }
  }
 }
  return ES_WIFI_STATUS_IO_ERROR;
 800232c:	2304      	movs	r3, #4
}
 800232e:	4618      	mov	r0, r3
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	08009924 	.word	0x08009924
 800233c:	08009930 	.word	0x08009930

08002340 <AT_RequestReceiveData>:
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t *cmd,
                                              char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002354:	613b      	str	r3, [r7, #16]

  LOCK_WIFI();

  if ((Obj->fops.IO_Send != NULL) && (Obj->fops.IO_Receive != NULL)) {
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 8087 	beq.w	8002470 <AT_RequestReceiveData+0x130>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8081 	beq.w	8002470 <AT_RequestReceiveData+0x130>

  if (Obj->fops.IO_Send(cmd, (uint16_t)strlen((char *)cmd), Obj->Timeout) > 0)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8002374:	68b8      	ldr	r0, [r7, #8]
 8002376:	f7fd ff2b 	bl	80001d0 <strlen>
 800237a:	4603      	mov	r3, r0
 800237c:	b299      	uxth	r1, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8002384:	461a      	mov	r2, r3
 8002386:	68b8      	ldr	r0, [r7, #8]
 8002388:	47a0      	blx	r4
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	dd6f      	ble.n	8002470 <AT_RequestReceiveData+0x130>
  {
    len = Obj->fops.IO_Receive(p, 0, Obj->Timeout);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 800239c:	2100      	movs	r1, #0
 800239e:	6938      	ldr	r0, [r7, #16]
 80023a0:	4798      	blx	r3
 80023a2:	4603      	mov	r3, r0
 80023a4:	617b      	str	r3, [r7, #20]

    /* Check if start at "\r\n". */
    if ((p[0] != '\r') || (p[1] != '\n'))
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b0d      	cmp	r3, #13
 80023ac:	d104      	bne.n	80023b8 <AT_RequestReceiveData+0x78>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	3301      	adds	r3, #1
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b0a      	cmp	r3, #10
 80023b6:	d001      	beq.n	80023bc <AT_RequestReceiveData+0x7c>
    {
      return ES_WIFI_STATUS_IO_ERROR;
 80023b8:	2304      	movs	r3, #4
 80023ba:	e05a      	b.n	8002472 <AT_RequestReceiveData+0x132>
    }
    len -= 2;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	3b02      	subs	r3, #2
 80023c0:	617b      	str	r3, [r7, #20]
    p += 2;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	3302      	adds	r3, #2
 80023c6:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b07      	cmp	r3, #7
 80023cc:	d94a      	bls.n	8002464 <AT_RequestReceiveData+0x124>
    {
     while(len && (p[len - 1] == 0x15)) len--;
 80023ce:	e002      	b.n	80023d6 <AT_RequestReceiveData+0x96>
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d006      	beq.n	80023ea <AT_RequestReceiveData+0xaa>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3b01      	subs	r3, #1
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b15      	cmp	r3, #21
 80023e8:	d0f2      	beq.n	80023d0 <AT_RequestReceiveData+0x90>
     p[len] = '\0';
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4413      	add	r3, r2
 80023f0:	2200      	movs	r2, #0
 80023f2:	701a      	strb	r2, [r3, #0]

     if (strstr((char *) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3b08      	subs	r3, #8
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	491f      	ldr	r1, [pc, #124]	; (800247c <AT_RequestReceiveData+0x13c>)
 80023fe:	4618      	mov	r0, r3
 8002400:	f005 ff93 	bl	800832a <strstr>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <AT_RequestReceiveData+0xf8>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b08      	subs	r3, #8
 8002410:	b29a      	uxth	r2, r3
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	801a      	strh	r2, [r3, #0]
       if (*ReadData > Reqlen)
 8002416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	429a      	cmp	r2, r3
 800241e:	d202      	bcs.n	8002426 <AT_RequestReceiveData+0xe6>
       {
         *ReadData = Reqlen;
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	887a      	ldrh	r2, [r7, #2]
 8002424:	801a      	strh	r2, [r3, #0]
       }

       memcpy(pdata, p, *ReadData);
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	881b      	ldrh	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	6939      	ldr	r1, [r7, #16]
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f006 f805 	bl	800843e <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e01c      	b.n	8002472 <AT_RequestReceiveData+0x132>
     }
     else if (memcmp((char *)p + len - AT_DELIMETER_LEN, AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3b04      	subs	r3, #4
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	4413      	add	r3, r2
 8002440:	2204      	movs	r2, #4
 8002442:	490f      	ldr	r1, [pc, #60]	; (8002480 <AT_RequestReceiveData+0x140>)
 8002444:	4618      	mov	r0, r3
 8002446:	f005 fec5 	bl	80081d4 <memcmp>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d104      	bne.n	800245a <AT_RequestReceiveData+0x11a>
     {
       *ReadData = 0;
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	2200      	movs	r2, #0
 8002454:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002456:	2305      	movs	r3, #5
 8002458:	e00b      	b.n	8002472 <AT_RequestReceiveData+0x132>
     }

     UNLOCK_WIFI();
     *ReadData = 0;
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	2200      	movs	r2, #0
 800245e:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8002460:	2305      	movs	r3, #5
 8002462:	e006      	b.n	8002472 <AT_RequestReceiveData+0x132>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f113 0f04 	cmn.w	r3, #4
 800246a:	d101      	bne.n	8002470 <AT_RequestReceiveData+0x130>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800246c:	2306      	movs	r3, #6
 800246e:	e000      	b.n	8002472 <AT_RequestReceiveData+0x132>
   }
  }
 }

  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8002470:	2304      	movs	r3, #4
}
 8002472:	4618      	mov	r0, r3
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}
 800247a:	bf00      	nop
 800247c:	08009924 	.word	0x08009924
 8002480:	08009938 	.word	0x08009938

08002484 <ES_WIFI_Init>:
  * @brief  Initialize the WIFI module.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800248c:	2302      	movs	r3, #2
 800248e:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f247 5230 	movw	r2, #30000	; 0x7530
 8002496:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01a      	beq.n	80024da <ES_WIFI_Init+0x56>
  {
		if (Obj->fops.IO_Init() == 0)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80024aa:	4798      	blx	r3
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d113      	bne.n	80024da <ES_WIFI_Init+0x56>
		{
				ret = AT_ExecuteCommand(Obj, (const uint8_t*)"I?\r\n", Obj->CmdData);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024b8:	461a      	mov	r2, r3
 80024ba:	490a      	ldr	r1, [pc, #40]	; (80024e4 <ES_WIFI_Init+0x60>)
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fe77 	bl	80021b0 <AT_ExecuteCommand>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]

				if(ret == ES_WIFI_STATUS_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <ES_WIFI_Init+0x56>
				{
					AT_ParseInfo(Obj, Obj->CmdData);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff fd1f 	bl	8001f18 <AT_ParseInfo>
		 }
  }

  UNLOCK_WIFI();

  return ret;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	08009940 	.word	0x08009940

080024e8 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func IO_Receive)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
  if (!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00b      	beq.n	8002514 <ES_WIFI_RegisterBusIO+0x2c>
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <ES_WIFI_RegisterBusIO+0x2c>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <ES_WIFI_RegisterBusIO+0x2c>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <ES_WIFI_RegisterBusIO+0x2c>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 8002514:	2302      	movs	r3, #2
 8002516:	e014      	b.n	8002542 <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	69fa      	ldr	r2, [r7, #28]
 8002534:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <ES_WIFI_GetNetworkSettings>:
  * @brief  Update given object module with the network settings.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char *)Obj->CmdData, "C?\r");
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800255e:	4910      	ldr	r1, [pc, #64]	; (80025a0 <ES_WIFI_GetNetworkSettings+0x50>)
 8002560:	4618      	mov	r0, r3
 8002562:	f005 fd3f 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002572:	461a      	mov	r2, r3
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff fe1b 	bl	80021b0 <AT_ExecuteCommand>
 800257a:	4603      	mov	r3, r0
 800257c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800257e:	7bfb      	ldrb	r3, [r7, #15]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	338d      	adds	r3, #141	; 0x8d
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7ff fd4f 	bl	8002034 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();

  return ret;
 8002596:	7bfb      	ldrb	r3, [r7, #15]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800997c 	.word	0x0800997c

080025a4 <ES_WIFI_ActivateAP>:
  * @param  Obj: pointer to the module handle
  * @param  ApConfig : Pointer to AP config structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ActivateAP(ES_WIFIObject_t *Obj, const ES_WIFI_APConfig_t *ApConfig)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  const size_t cmd_size = sizeof(Obj->CmdData) - 1;
 80025ae:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80025b2:	61bb      	str	r3, [r7, #24]

  LOCK_WIFI();

  snprintf((char*)Obj->CmdData, cmd_size, "AS=0, %s\r", ApConfig->SSID);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	4a64      	ldr	r2, [pc, #400]	; (8002750 <ES_WIFI_ActivateAP+0x1ac>)
 80025be:	69b9      	ldr	r1, [r7, #24]
 80025c0:	f005 fcdc 	bl	8007f7c <sniprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025d0:	461a      	mov	r2, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fdec 	bl	80021b0 <AT_ExecuteCommand>
 80025d8:	4603      	mov	r3, r0
 80025da:	77fb      	strb	r3, [r7, #31]
  if (ret == ES_WIFI_STATUS_OK)
 80025dc:	7ffb      	ldrb	r3, [r7, #31]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 80b1 	bne.w	8002746 <ES_WIFI_ActivateAP+0x1a2>
  {
    snprintf((char*)Obj->CmdData, cmd_size, "A1=%c\r", (int)ApConfig->Security + '0');
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025f0:	3330      	adds	r3, #48	; 0x30
 80025f2:	4a58      	ldr	r2, [pc, #352]	; (8002754 <ES_WIFI_ActivateAP+0x1b0>)
 80025f4:	69b9      	ldr	r1, [r7, #24]
 80025f6:	f005 fcc1 	bl	8007f7c <sniprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002606:	461a      	mov	r2, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff fdd1 	bl	80021b0 <AT_ExecuteCommand>
 800260e:	4603      	mov	r3, r0
 8002610:	77fb      	strb	r3, [r7, #31]
    if (ret == ES_WIFI_STATUS_OK)
 8002612:	7ffb      	ldrb	r3, [r7, #31]
 8002614:	2b00      	cmp	r3, #0
 8002616:	f040 8096 	bne.w	8002746 <ES_WIFI_ActivateAP+0x1a2>
    {
      snprintf((char*)Obj->CmdData, cmd_size, "A2=%s\r", ApConfig->Pass);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	3321      	adds	r3, #33	; 0x21
 8002624:	4a4c      	ldr	r2, [pc, #304]	; (8002758 <ES_WIFI_ActivateAP+0x1b4>)
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f005 fca8 	bl	8007f7c <sniprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002638:	461a      	mov	r2, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fdb8 	bl	80021b0 <AT_ExecuteCommand>
 8002640:	4603      	mov	r3, r0
 8002642:	77fb      	strb	r3, [r7, #31]
      if (ret == ES_WIFI_STATUS_OK)
 8002644:	7ffb      	ldrb	r3, [r7, #31]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d17d      	bne.n	8002746 <ES_WIFI_ActivateAP+0x1a2>
      {
        snprintf((char*)Obj->CmdData, cmd_size, "AC=%d\r", ApConfig->Channel);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002656:	4a41      	ldr	r2, [pc, #260]	; (800275c <ES_WIFI_ActivateAP+0x1b8>)
 8002658:	69b9      	ldr	r1, [r7, #24]
 800265a:	f005 fc8f 	bl	8007f7c <sniprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800266a:	461a      	mov	r2, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fd9f 	bl	80021b0 <AT_ExecuteCommand>
 8002672:	4603      	mov	r3, r0
 8002674:	77fb      	strb	r3, [r7, #31]
        if (ret == ES_WIFI_STATUS_OK)
 8002676:	7ffb      	ldrb	r3, [r7, #31]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d164      	bne.n	8002746 <ES_WIFI_ActivateAP+0x1a2>
        {
          snprintf((char*)Obj->CmdData, cmd_size, "AT=%d\r", ApConfig->MaxConnections);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002688:	4a35      	ldr	r2, [pc, #212]	; (8002760 <ES_WIFI_ActivateAP+0x1bc>)
 800268a:	69b9      	ldr	r1, [r7, #24]
 800268c:	f005 fc76 	bl	8007f7c <sniprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800269c:	461a      	mov	r2, r3
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fd86 	bl	80021b0 <AT_ExecuteCommand>
 80026a4:	4603      	mov	r3, r0
 80026a6:	77fb      	strb	r3, [r7, #31]
          if(ret == ES_WIFI_STATUS_OK)
 80026a8:	7ffb      	ldrb	r3, [r7, #31]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d14b      	bne.n	8002746 <ES_WIFI_ActivateAP+0x1a2>
          {
            snprintf((char*)Obj->CmdData, cmd_size, "AD\r");
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026b4:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <ES_WIFI_ActivateAP+0x1c0>)
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f005 fc5f 	bl	8007f7c <sniprintf>
            ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026ca:	461a      	mov	r2, r3
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7ff fd6f 	bl	80021b0 <AT_ExecuteCommand>
 80026d2:	4603      	mov	r3, r0
 80026d4:	77fb      	strb	r3, [r7, #31]
            if(ret == ES_WIFI_STATUS_OK)
 80026d6:	7ffb      	ldrb	r3, [r7, #31]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d134      	bne.n	8002746 <ES_WIFI_ActivateAP+0x1a2>
            {
              char * join_line = strstr((char *)Obj->CmdData, "[JOIN   ]");
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026e2:	4921      	ldr	r1, [pc, #132]	; (8002768 <ES_WIFI_ActivateAP+0x1c4>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f005 fe20 	bl	800832a <strstr>
 80026ea:	6178      	str	r0, [r7, #20]
              if( join_line == NULL)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <ES_WIFI_ActivateAP+0x154>
              {
                ret = ES_WIFI_STATUS_ERROR;
 80026f2:	2302      	movs	r3, #2
 80026f4:	77fb      	strb	r3, [r7, #31]
 80026f6:	e026      	b.n	8002746 <ES_WIFI_ActivateAP+0x1a2>
              }
              else
              {
                /* Example: [JOIN   ] !DIRECTCONNECT,192.168.10.1 */
                char * save_ptr = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
                char * ptr = strtok_r(&join_line[9], ",", &save_ptr);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3309      	adds	r3, #9
 8002700:	f107 020c 	add.w	r2, r7, #12
 8002704:	4919      	ldr	r1, [pc, #100]	; (800276c <ES_WIFI_ActivateAP+0x1c8>)
 8002706:	4618      	mov	r0, r3
 8002708:	f005 fe0c 	bl	8008324 <strtok_r>
 800270c:	6138      	str	r0, [r7, #16]
                strncpy((char *)Obj->NetSettings.SSID, ptr, ES_WIFI_MAX_SSID_NAME_SIZE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	338d      	adds	r3, #141	; 0x8d
 8002712:	2220      	movs	r2, #32
 8002714:	6939      	ldr	r1, [r7, #16]
 8002716:	4618      	mov	r0, r3
 8002718:	f005 fd95 	bl	8008246 <strncpy>
                ptr = strtok_r(NULL, ",", &save_ptr);
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	461a      	mov	r2, r3
 8002722:	4912      	ldr	r1, [pc, #72]	; (800276c <ES_WIFI_ActivateAP+0x1c8>)
 8002724:	2000      	movs	r0, #0
 8002726:	f005 fdfd 	bl	8008324 <strtok_r>
 800272a:	6138      	str	r0, [r7, #16]
                ParseIP((char *)ptr, Obj->NetSettings.IP_Addr, sizeof(Obj->NetSettings.IP_Addr));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	33d5      	adds	r3, #213	; 0xd5
 8002730:	2204      	movs	r2, #4
 8002732:	4619      	mov	r1, r3
 8002734:	6938      	ldr	r0, [r7, #16]
 8002736:	f7ff fbb8 	bl	8001eaa <ParseIP>
                Obj->NetSettings.IsConnected = 1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
                ret =  ES_WIFI_STATUS_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	77fb      	strb	r3, [r7, #31]
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 8002746:	7ffb      	ldrb	r3, [r7, #31]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3720      	adds	r7, #32
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	08009980 	.word	0x08009980
 8002754:	0800998c 	.word	0x0800998c
 8002758:	08009994 	.word	0x08009994
 800275c:	0800999c 	.word	0x0800999c
 8002760:	080099a4 	.word	0x080099a4
 8002764:	080099ac 	.word	0x080099ac
 8002768:	080099b0 	.word	0x080099b0
 800276c:	0800990c 	.word	0x0800990c

08002770 <ES_WIFI_GetMACAddress>:
  * @param  mac: pointer to the MAC address array.
  * @param  MacLength: length of the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac, uint8_t MacLength)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	71fb      	strb	r3, [r7, #7]
  ES_WIFI_Status_t ret;
  char *ptr;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "Z5\r");
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002784:	4913      	ldr	r1, [pc, #76]	; (80027d4 <ES_WIFI_GetMACAddress+0x64>)
 8002786:	4618      	mov	r0, r3
 8002788:	f005 fc2c 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002798:	461a      	mov	r2, r3
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff fd08 	bl	80021b0 <AT_ExecuteCommand>
 80027a0:	4603      	mov	r3, r0
 80027a2:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 80027a4:	7dfb      	ldrb	r3, [r7, #23]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10e      	bne.n	80027c8 <ES_WIFI_GetMACAddress+0x58>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80027b0:	3302      	adds	r3, #2
 80027b2:	4909      	ldr	r1, [pc, #36]	; (80027d8 <ES_WIFI_GetMACAddress+0x68>)
 80027b4:	4618      	mov	r0, r3
 80027b6:	f005 fd59 	bl	800826c <strtok>
 80027ba:	6138      	str	r0, [r7, #16]
    ParseMAC(ptr, mac, MacLength);
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	461a      	mov	r2, r3
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	6938      	ldr	r0, [r7, #16]
 80027c4:	f7ff fb3a 	bl	8001e3c <ParseMAC>
  }

  UNLOCK_WIFI();

  return ret;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	080099cc 	.word	0x080099cc
 80027d8:	080099d0 	.word	0x080099d0

080027dc <ES_WIFI_StartServerSingleConn>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartServerSingleConn(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4949      	ldr	r1, [pc, #292]	; (800291c <ES_WIFI_StartServerSingleConn+0x140>)
 80027f8:	f005 fbf4 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002808:	461a      	mov	r2, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fcd0 	bl	80021b0 <AT_ExecuteCommand>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <ES_WIFI_StartServerSingleConn+0x42>
  {
    UNLOCK_WIFI();
    return ret;
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	e079      	b.n	8002912 <ES_WIFI_StartServerSingleConn+0x136>
  }

  if ((conn->Type != ES_WIFI_UDP_CONNECTION) && (conn->Type != ES_WIFI_UDP_LITE_CONNECTION))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d016      	beq.n	8002854 <ES_WIFI_StartServerSingleConn+0x78>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d012      	beq.n	8002854 <ES_WIFI_StartServerSingleConn+0x78>
  {
    sprintf((char*)Obj->CmdData,"PK=1,3000\r");
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002834:	493a      	ldr	r1, [pc, #232]	; (8002920 <ES_WIFI_StartServerSingleConn+0x144>)
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fbd4 	bl	8007fe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002848:	461a      	mov	r2, r3
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff fcb0 	bl	80021b0 <AT_ExecuteCommand>
 8002850:	4603      	mov	r3, r0
 8002852:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d15a      	bne.n	8002910 <ES_WIFI_StartServerSingleConn+0x134>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	492f      	ldr	r1, [pc, #188]	; (8002924 <ES_WIFI_StartServerSingleConn+0x148>)
 8002868:	f005 fbbc 	bl	8007fe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002878:	461a      	mov	r2, r3
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff fc98 	bl	80021b0 <AT_ExecuteCommand>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
    if (ret == ES_WIFI_STATUS_OK)
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d142      	bne.n	8002910 <ES_WIFI_StartServerSingleConn+0x134>
    {
      sprintf((char*)Obj->CmdData,"P8=%d\r", conn->Backlog);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	7c1b      	ldrb	r3, [r3, #16]
 8002894:	461a      	mov	r2, r3
 8002896:	4924      	ldr	r1, [pc, #144]	; (8002928 <ES_WIFI_StartServerSingleConn+0x14c>)
 8002898:	f005 fba4 	bl	8007fe4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028a8:	461a      	mov	r2, r3
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fc80 	bl	80021b0 <AT_ExecuteCommand>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]
      if (ret == ES_WIFI_STATUS_OK)
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d12a      	bne.n	8002910 <ES_WIFI_StartServerSingleConn+0x134>
      {
        sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f503 7094 	add.w	r0, r3, #296	; 0x128
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	889b      	ldrh	r3, [r3, #4]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4919      	ldr	r1, [pc, #100]	; (800292c <ES_WIFI_StartServerSingleConn+0x150>)
 80028c8:	f005 fb8c 	bl	8007fe4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028d8:	461a      	mov	r2, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7ff fc68 	bl	80021b0 <AT_ExecuteCommand>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
        if (ret == ES_WIFI_STATUS_OK)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d112      	bne.n	8002910 <ES_WIFI_StartServerSingleConn+0x134>
        {
          /* multi accept mode */
          sprintf((char*)Obj->CmdData,"P5=11\r");
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028f0:	490f      	ldr	r1, [pc, #60]	; (8002930 <ES_WIFI_StartServerSingleConn+0x154>)
 80028f2:	4618      	mov	r0, r3
 80028f4:	f005 fb76 	bl	8007fe4 <siprintf>
          ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002904:	461a      	mov	r2, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fc52 	bl	80021b0 <AT_ExecuteCommand>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	08009a34 	.word	0x08009a34
 8002920:	08009a7c 	.word	0x08009a7c
 8002924:	08009a3c 	.word	0x08009a3c
 8002928:	08009a88 	.word	0x08009a88
 800292c:	08009a44 	.word	0x08009a44
 8002930:	08009a90 	.word	0x08009a90

08002934 <ES_WIFI_WaitServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_WaitServerConnection(ES_WIFIObject_t *Obj, uint32_t timeout, ES_WIFI_Conn_t *conn)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08a      	sub	sp, #40	; 0x28
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t      t;
  uint32_t      tlast;
  uint32_t      tstart;
  char          *ptr;

  tstart = HAL_GetTick();
 8002946:	f000 ff25 	bl	8003794 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24
  tlast = tstart + timeout;
 800294c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4413      	add	r3, r2
 8002952:	61fb      	str	r3, [r7, #28]
  if (tlast < tstart)
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	429a      	cmp	r2, r3
 800295a:	d201      	bcs.n	8002960 <ES_WIFI_WaitServerConnection+0x2c>
  {
    tstart=0;
 800295c:	2300      	movs	r3, #0
 800295e:	627b      	str	r3, [r7, #36]	; 0x24

  do
  {
#if (ES_WIFI_USE_UART == 0)
    /* mandatory to flush MR async messages */
    memset(Obj->CmdData,0,sizeof(Obj->CmdData));
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f005 fc41 	bl	80081f4 <memset>
    sprintf((char*)Obj->CmdData,"MR\r");
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002978:	4973      	ldr	r1, [pc, #460]	; (8002b48 <ES_WIFI_WaitServerConnection+0x214>)
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fb32 	bl	8007fe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800298c:	461a      	mov	r2, r3
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fc0e 	bl	80021b0 <AT_ExecuteCommand>
 8002994:	4603      	mov	r3, r0
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 800299a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d136      	bne.n	8002a10 <ES_WIFI_WaitServerConnection+0xdc>
    {
      if ((strstr((char *)Obj->CmdData, "[SOMA]")) && (strstr((char *)Obj->CmdData, "[EOMA]")))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029a8:	4968      	ldr	r1, [pc, #416]	; (8002b4c <ES_WIFI_WaitServerConnection+0x218>)
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 fcbd 	bl	800832a <strstr>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d03b      	beq.n	8002a2e <ES_WIFI_WaitServerConnection+0xfa>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029bc:	4964      	ldr	r1, [pc, #400]	; (8002b50 <ES_WIFI_WaitServerConnection+0x21c>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f005 fcb3 	bl	800832a <strstr>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d031      	beq.n	8002a2e <ES_WIFI_WaitServerConnection+0xfa>
      {
        if(strstr((char *)Obj->CmdData, "Accepted"))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029d0:	4960      	ldr	r1, [pc, #384]	; (8002b54 <ES_WIFI_WaitServerConnection+0x220>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f005 fca9 	bl	800832a <strstr>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d127      	bne.n	8002a2e <ES_WIFI_WaitServerConnection+0xfa>
        {
         //printf("SOMA Accepted\n");
        }
        else if(!strstr((char *)Obj->CmdData,"[SOMA][EOMA]"))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80029e4:	495c      	ldr	r1, [pc, #368]	; (8002b58 <ES_WIFI_WaitServerConnection+0x224>)
 80029e6:	4618      	mov	r0, r3
 80029e8:	f005 fc9f 	bl	800832a <strstr>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d11d      	bne.n	8002a2e <ES_WIFI_WaitServerConnection+0xfa>
        {
          DEBUG("Bad MR stntax msg %s\n", Obj->CmdData);
 80029f2:	f240 72b5 	movw	r2, #1973	; 0x7b5
 80029f6:	4959      	ldr	r1, [pc, #356]	; (8002b5c <ES_WIFI_WaitServerConnection+0x228>)
 80029f8:	4859      	ldr	r0, [pc, #356]	; (8002b60 <ES_WIFI_WaitServerConnection+0x22c>)
 80029fa:	f005 fa51 	bl	8007ea0 <iprintf>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a04:	4619      	mov	r1, r3
 8002a06:	4857      	ldr	r0, [pc, #348]	; (8002b64 <ES_WIFI_WaitServerConnection+0x230>)
 8002a08:	f005 fa4a 	bl	8007ea0 <iprintf>

          UNLOCK_WIFI();

          return ES_WIFI_STATUS_ERROR;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e096      	b.n	8002b3e <ES_WIFI_WaitServerConnection+0x20a>
        }
      }
    }
    else
    {
      DEBUG("MR command failed %s\n", Obj->CmdData);
 8002a10:	f240 72bf 	movw	r2, #1983	; 0x7bf
 8002a14:	4951      	ldr	r1, [pc, #324]	; (8002b5c <ES_WIFI_WaitServerConnection+0x228>)
 8002a16:	4852      	ldr	r0, [pc, #328]	; (8002b60 <ES_WIFI_WaitServerConnection+0x22c>)
 8002a18:	f005 fa42 	bl	8007ea0 <iprintf>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a22:	4619      	mov	r1, r3
 8002a24:	4850      	ldr	r0, [pc, #320]	; (8002b68 <ES_WIFI_WaitServerConnection+0x234>)
 8002a26:	f005 fa3b 	bl	8007ea0 <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e087      	b.n	8002b3e <ES_WIFI_WaitServerConnection+0x20a>
    }
#endif /* (ES_WIFI_USE_UART == 0) */

    memset(Obj->CmdData, 0, sizeof(Obj->CmdData));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f005 fbda 	bl	80081f4 <memset>
    sprintf((char*)Obj->CmdData, "P?\r");
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a46:	4949      	ldr	r1, [pc, #292]	; (8002b6c <ES_WIFI_WaitServerConnection+0x238>)
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f005 facb 	bl	8007fe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fba7 	bl	80021b0 <AT_ExecuteCommand>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret == ES_WIFI_STATUS_OK)
 8002a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d140      	bne.n	8002af2 <ES_WIFI_WaitServerConnection+0x1be>
    {
      if (strncmp((char *)Obj->CmdData, "\r\n0,0.0.0.0,",12) != 0)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a76:	220c      	movs	r2, #12
 8002a78:	493d      	ldr	r1, [pc, #244]	; (8002b70 <ES_WIFI_WaitServerConnection+0x23c>)
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 fbd1 	bl	8008222 <strncmp>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <ES_WIFI_WaitServerConnection+0x1dc>
      {
        ptr = strtok((char *)Obj->CmdData + 2, ",");
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a8c:	3302      	adds	r3, #2
 8002a8e:	4939      	ldr	r1, [pc, #228]	; (8002b74 <ES_WIFI_WaitServerConnection+0x240>)
 8002a90:	4618      	mov	r0, r3
 8002a92:	f005 fbeb 	bl	800826c <strtok>
 8002a96:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* client ip */
 8002a98:	4936      	ldr	r1, [pc, #216]	; (8002b74 <ES_WIFI_WaitServerConnection+0x240>)
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f005 fbe6 	bl	800826c <strtok>
 8002aa0:	6178      	str	r0, [r7, #20]
        ParseIP((char *)ptr, conn->RemoteIP, sizeof(conn->RemoteIP));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff f9fd 	bl	8001eaa <ParseIP>
        ptr = strtok(0, ","); /* local port */
 8002ab0:	4930      	ldr	r1, [pc, #192]	; (8002b74 <ES_WIFI_WaitServerConnection+0x240>)
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f005 fbda 	bl	800826c <strtok>
 8002ab8:	6178      	str	r0, [r7, #20]
        conn->LocalPort=ParseNumber(ptr,0);
 8002aba:	2100      	movs	r1, #0
 8002abc:	6978      	ldr	r0, [r7, #20]
 8002abe:	f7ff f979 	bl	8001db4 <ParseNumber>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	809a      	strh	r2, [r3, #4]
        ptr = strtok(0, ","); /* host ip */
 8002aca:	492a      	ldr	r1, [pc, #168]	; (8002b74 <ES_WIFI_WaitServerConnection+0x240>)
 8002acc:	2000      	movs	r0, #0
 8002ace:	f005 fbcd 	bl	800826c <strtok>
 8002ad2:	6178      	str	r0, [r7, #20]
        ptr = strtok(0, ","); /* remote port */
 8002ad4:	4927      	ldr	r1, [pc, #156]	; (8002b74 <ES_WIFI_WaitServerConnection+0x240>)
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f005 fbc8 	bl	800826c <strtok>
 8002adc:	6178      	str	r0, [r7, #20]
        conn->RemotePort=ParseNumber(ptr,0);
 8002ade:	2100      	movs	r1, #0
 8002ae0:	6978      	ldr	r0, [r7, #20]
 8002ae2:	f7ff f967 	bl	8001db4 <ParseNumber>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	805a      	strh	r2, [r3, #2]

        UNLOCK_WIFI();

        return ES_WIFI_STATUS_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e025      	b.n	8002b3e <ES_WIFI_WaitServerConnection+0x20a>
      }
    }
    else
    {
      DEBUG("P? command failed %s\n", Obj->CmdData);
 8002af2:	f240 72de 	movw	r2, #2014	; 0x7de
 8002af6:	4919      	ldr	r1, [pc, #100]	; (8002b5c <ES_WIFI_WaitServerConnection+0x228>)
 8002af8:	4819      	ldr	r0, [pc, #100]	; (8002b60 <ES_WIFI_WaitServerConnection+0x22c>)
 8002afa:	f005 f9d1 	bl	8007ea0 <iprintf>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b04:	4619      	mov	r1, r3
 8002b06:	481c      	ldr	r0, [pc, #112]	; (8002b78 <ES_WIFI_WaitServerConnection+0x244>)
 8002b08:	f005 f9ca 	bl	8007ea0 <iprintf>

      UNLOCK_WIFI();

      return ES_WIFI_STATUS_ERROR;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e016      	b.n	8002b3e <ES_WIFI_WaitServerConnection+0x20a>
    }

    UNLOCK_WIFI();

    Obj->fops.IO_Delay(100);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002b16:	2064      	movs	r0, #100	; 0x64
 8002b18:	4798      	blx	r3

    LOCK_WIFI();
    t = HAL_GetTick();
 8002b1a:	f000 fe3b 	bl	8003794 <HAL_GetTick>
 8002b1e:	61b8      	str	r0, [r7, #24]
  }
  while ((timeout==0) || ((t < tlast) || (t < tstart)));
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f43f af1c 	beq.w	8002960 <ES_WIFI_WaitServerConnection+0x2c>
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f4ff af17 	bcc.w	8002960 <ES_WIFI_WaitServerConnection+0x2c>
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	429a      	cmp	r2, r3
 8002b38:	f4ff af12 	bcc.w	8002960 <ES_WIFI_WaitServerConnection+0x2c>

  return ES_WIFI_STATUS_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3728      	adds	r7, #40	; 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	08009950 	.word	0x08009950
 8002b4c:	08009a98 	.word	0x08009a98
 8002b50:	08009aa0 	.word	0x08009aa0
 8002b54:	08009aa8 	.word	0x08009aa8
 8002b58:	08009ab4 	.word	0x08009ab4
 8002b5c:	08009ac4 	.word	0x08009ac4
 8002b60:	08009af0 	.word	0x08009af0
 8002b64:	08009af8 	.word	0x08009af8
 8002b68:	08009b10 	.word	0x08009b10
 8002b6c:	08009b28 	.word	0x08009b28
 8002b70:	08009b2c 	.word	0x08009b2c
 8002b74:	0800990c 	.word	0x0800990c
 8002b78:	08009b3c 	.word	0x08009b3c

08002b7c <ES_WIFI_CloseServerConnection>:
  * @param  Obj: pointer to the module handle
  * @param  socket:  server socket
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_CloseServerConnection(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData, "P0=%d\r", socket);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	4924      	ldr	r1, [pc, #144]	; (8002c24 <ES_WIFI_CloseServerConnection+0xa8>)
 8002b92:	4618      	mov	r0, r3
 8002b94:	f005 fa26 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fb02 	bl	80021b0 <AT_ExecuteCommand>
 8002bac:	4603      	mov	r3, r0
 8002bae:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <ES_WIFI_CloseServerConnection+0x58>
  {
    DEBUG(" Can not select socket %s\n", Obj->CmdData);
 8002bb6:	f640 0202 	movw	r2, #2050	; 0x802
 8002bba:	491b      	ldr	r1, [pc, #108]	; (8002c28 <ES_WIFI_CloseServerConnection+0xac>)
 8002bbc:	481b      	ldr	r0, [pc, #108]	; (8002c2c <ES_WIFI_CloseServerConnection+0xb0>)
 8002bbe:	f005 f96f 	bl	8007ea0 <iprintf>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4819      	ldr	r0, [pc, #100]	; (8002c30 <ES_WIFI_CloseServerConnection+0xb4>)
 8002bcc:	f005 f968 	bl	8007ea0 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	e023      	b.n	8002c1c <ES_WIFI_CloseServerConnection+0xa0>
  }

  sprintf((char*)Obj->CmdData, "P5=10\r");
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bda:	4916      	ldr	r1, [pc, #88]	; (8002c34 <ES_WIFI_CloseServerConnection+0xb8>)
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f005 fa01 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002bee:	461a      	mov	r2, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff fadd 	bl	80021b0 <AT_ExecuteCommand>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00c      	beq.n	8002c1a <ES_WIFI_CloseServerConnection+0x9e>
  {
    DEBUG(" Open next failed %s\n", Obj->CmdData);
 8002c00:	f640 020b 	movw	r2, #2059	; 0x80b
 8002c04:	4908      	ldr	r1, [pc, #32]	; (8002c28 <ES_WIFI_CloseServerConnection+0xac>)
 8002c06:	4809      	ldr	r0, [pc, #36]	; (8002c2c <ES_WIFI_CloseServerConnection+0xb0>)
 8002c08:	f005 f94a 	bl	8007ea0 <iprintf>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c12:	4619      	mov	r1, r3
 8002c14:	4808      	ldr	r0, [pc, #32]	; (8002c38 <ES_WIFI_CloseServerConnection+0xbc>)
 8002c16:	f005 f943 	bl	8007ea0 <iprintf>
  }

  UNLOCK_WIFI();
  return ret;
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	08009a34 	.word	0x08009a34
 8002c28:	08009ac4 	.word	0x08009ac4
 8002c2c:	08009af0 	.word	0x08009af0
 8002c30:	08009b54 	.word	0x08009b54
 8002c34:	08009b70 	.word	0x08009b70
 8002c38:	08009b78 	.word	0x08009b78

08002c3c <ES_WIFI_StopServerSingleConn>:
  * @brief  Stop a Server.
  * @param  Obj: pointer to the module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopServerSingleConn(ES_WIFIObject_t *Obj, uint8_t socket)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", socket);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	4925      	ldr	r1, [pc, #148]	; (8002ce8 <ES_WIFI_StopServerSingleConn+0xac>)
 8002c52:	4618      	mov	r0, r3
 8002c54:	f005 f9c6 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c64:	461a      	mov	r2, r3
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff faa2 	bl	80021b0 <AT_ExecuteCommand>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <ES_WIFI_StopServerSingleConn+0x58>
  {
    DEBUG("Selecting socket failed: %s\n", Obj->CmdData);
 8002c76:	f640 0222 	movw	r2, #2082	; 0x822
 8002c7a:	491c      	ldr	r1, [pc, #112]	; (8002cec <ES_WIFI_StopServerSingleConn+0xb0>)
 8002c7c:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <ES_WIFI_StopServerSingleConn+0xb4>)
 8002c7e:	f005 f90f 	bl	8007ea0 <iprintf>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c88:	4619      	mov	r1, r3
 8002c8a:	481a      	ldr	r0, [pc, #104]	; (8002cf4 <ES_WIFI_StopServerSingleConn+0xb8>)
 8002c8c:	f005 f908 	bl	8007ea0 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	e025      	b.n	8002ce0 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  sprintf((char*)Obj->CmdData,"P5=0\r");
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c9a:	4917      	ldr	r1, [pc, #92]	; (8002cf8 <ES_WIFI_StopServerSingleConn+0xbc>)
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f005 f9a1 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cae:	461a      	mov	r2, r3
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff fa7d 	bl	80021b0 <AT_ExecuteCommand>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  if (ret != ES_WIFI_STATUS_OK)
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00e      	beq.n	8002cde <ES_WIFI_StopServerSingleConn+0xa2>
  {
    DEBUG("Stopping server failed %s\n", Obj->CmdData);
 8002cc0:	f640 022b 	movw	r2, #2091	; 0x82b
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <ES_WIFI_StopServerSingleConn+0xb0>)
 8002cc6:	480a      	ldr	r0, [pc, #40]	; (8002cf0 <ES_WIFI_StopServerSingleConn+0xb4>)
 8002cc8:	f005 f8ea 	bl	8007ea0 <iprintf>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4809      	ldr	r0, [pc, #36]	; (8002cfc <ES_WIFI_StopServerSingleConn+0xc0>)
 8002cd6:	f005 f8e3 	bl	8007ea0 <iprintf>
    UNLOCK_WIFI();
    return ret;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	e000      	b.n	8002ce0 <ES_WIFI_StopServerSingleConn+0xa4>
  }

  UNLOCK_WIFI();
  return ret;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	08009a34 	.word	0x08009a34
 8002cec:	08009ac4 	.word	0x08009ac4
 8002cf0:	08009af0 	.word	0x08009af0
 8002cf4:	08009b90 	.word	0x08009b90
 8002cf8:	08009bb0 	.word	0x08009bb0
 8002cfc:	08009bb8 	.word	0x08009bb8

08002d00 <ES_WIFI_SendData>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket,
                                  const uint8_t *pdata, uint16_t Reqlen,
                                  uint16_t *SentLen, uint32_t Timeout)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af02      	add	r7, sp, #8
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607a      	str	r2, [r7, #4]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	72fb      	strb	r3, [r7, #11]
 8002d10:	4613      	mov	r3, r2
 8002d12:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002d14:	2302      	movs	r3, #2
 8002d16:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <ES_WIFI_SendData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e001      	b.n	8002d28 <ES_WIFI_SendData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen >= ES_WIFI_PAYLOAD_SIZE)
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002d2e:	d302      	bcc.n	8002d36 <ES_WIFI_SendData+0x36>
  {
    Reqlen = ES_WIFI_PAYLOAD_SIZE;
 8002d30:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002d34:	813b      	strh	r3, [r7, #8]
  }

  *SentLen = Reqlen;
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	893a      	ldrh	r2, [r7, #8]
 8002d3a:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d42:	7afa      	ldrb	r2, [r7, #11]
 8002d44:	4942      	ldr	r1, [pc, #264]	; (8002e50 <ES_WIFI_SendData+0x150>)
 8002d46:	4618      	mov	r0, r3
 8002d48:	f005 f94c 	bl	8007fe4 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fa28 	bl	80021b0 <AT_ExecuteCommand>
 8002d60:	4603      	mov	r3, r0
 8002d62:	74fb      	strb	r3, [r7, #19]
  if (ret == ES_WIFI_STATUS_OK)
 8002d64:	7cfb      	ldrb	r3, [r7, #19]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d15e      	bne.n	8002e28 <ES_WIFI_SendData+0x128>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4938      	ldr	r1, [pc, #224]	; (8002e54 <ES_WIFI_SendData+0x154>)
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 f935 	bl	8007fe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d86:	461a      	mov	r2, r3
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f7ff fa11 	bl	80021b0 <AT_ExecuteCommand>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002d92:	7cfb      	ldrb	r3, [r7, #19]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d13d      	bne.n	8002e14 <ES_WIFI_SendData+0x114>
    {
      sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d9e:	893a      	ldrh	r2, [r7, #8]
 8002da0:	492d      	ldr	r1, [pc, #180]	; (8002e58 <ES_WIFI_SendData+0x158>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f005 f91e 	bl	8007fe4 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002db4:	893a      	ldrh	r2, [r7, #8]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f7ff fa3f 	bl	8002240 <AT_RequestSendData>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

      if (ret == ES_WIFI_STATUS_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d119      	bne.n	8002e00 <ES_WIFI_SendData+0x100>
      {
        if (strstr((char *)Obj->CmdData, "-1\r\n"))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dd2:	4922      	ldr	r1, [pc, #136]	; (8002e5c <ES_WIFI_SendData+0x15c>)
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f005 faa8 	bl	800832a <strstr>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02c      	beq.n	8002e3a <ES_WIFI_SendData+0x13a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8002de0:	f640 02ec 	movw	r2, #2284	; 0x8ec
 8002de4:	491e      	ldr	r1, [pc, #120]	; (8002e60 <ES_WIFI_SendData+0x160>)
 8002de6:	481f      	ldr	r0, [pc, #124]	; (8002e64 <ES_WIFI_SendData+0x164>)
 8002de8:	f005 f85a 	bl	8007ea0 <iprintf>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002df2:	4619      	mov	r1, r3
 8002df4:	481c      	ldr	r0, [pc, #112]	; (8002e68 <ES_WIFI_SendData+0x168>)
 8002df6:	f005 f853 	bl	8007ea0 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	74fb      	strb	r3, [r7, #19]
 8002dfe:	e01c      	b.n	8002e3a <ES_WIFI_SendData+0x13a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");
 8002e00:	f640 02f2 	movw	r2, #2290	; 0x8f2
 8002e04:	4916      	ldr	r1, [pc, #88]	; (8002e60 <ES_WIFI_SendData+0x160>)
 8002e06:	4817      	ldr	r0, [pc, #92]	; (8002e64 <ES_WIFI_SendData+0x164>)
 8002e08:	f005 f84a 	bl	8007ea0 <iprintf>
 8002e0c:	4817      	ldr	r0, [pc, #92]	; (8002e6c <ES_WIFI_SendData+0x16c>)
 8002e0e:	f005 f8ad 	bl	8007f6c <puts>
 8002e12:	e012      	b.n	8002e3a <ES_WIFI_SendData+0x13a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n");
 8002e14:	f640 02f7 	movw	r2, #2295	; 0x8f7
 8002e18:	4911      	ldr	r1, [pc, #68]	; (8002e60 <ES_WIFI_SendData+0x160>)
 8002e1a:	4812      	ldr	r0, [pc, #72]	; (8002e64 <ES_WIFI_SendData+0x164>)
 8002e1c:	f005 f840 	bl	8007ea0 <iprintf>
 8002e20:	4813      	ldr	r0, [pc, #76]	; (8002e70 <ES_WIFI_SendData+0x170>)
 8002e22:	f005 f8a3 	bl	8007f6c <puts>
 8002e26:	e008      	b.n	8002e3a <ES_WIFI_SendData+0x13a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n");
 8002e28:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8002e2c:	490c      	ldr	r1, [pc, #48]	; (8002e60 <ES_WIFI_SendData+0x160>)
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <ES_WIFI_SendData+0x164>)
 8002e30:	f005 f836 	bl	8007ea0 <iprintf>
 8002e34:	480f      	ldr	r0, [pc, #60]	; (8002e74 <ES_WIFI_SendData+0x174>)
 8002e36:	f005 f899 	bl	8007f6c <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8002e3a:	7cfb      	ldrb	r3, [r7, #19]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d102      	bne.n	8002e46 <ES_WIFI_SendData+0x146>
  {
    *SentLen = 0;
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2200      	movs	r2, #0
 8002e44:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();

  return ret;
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	08009a34 	.word	0x08009a34
 8002e54:	08009bfc 	.word	0x08009bfc
 8002e58:	08009c04 	.word	0x08009c04
 8002e5c:	08009c10 	.word	0x08009c10
 8002e60:	08009ac4 	.word	0x08009ac4
 8002e64:	08009af0 	.word	0x08009af0
 8002e68:	08009c18 	.word	0x08009c18
 8002e6c:	08009c34 	.word	0x08009c34
 8002e70:	08009c50 	.word	0x08009c50
 8002e74:	08009c64 	.word	0x08009c64

08002e78 <ES_WIFI_ReceiveData>:
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen,
                                     uint16_t *Receivedlen, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	460b      	mov	r3, r1
 8002e86:	72fb      	strb	r3, [r7, #11]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	813b      	strh	r3, [r7, #8]
  uint32_t wkgTimeOut;

  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	74fb      	strb	r3, [r7, #19]

  if (Timeout == 0)
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d102      	bne.n	8002e9c <ES_WIFI_ReceiveData+0x24>
  {
    wkgTimeOut = NET_DEFAULT_NOBLOCKING_READ_TIMEOUT;
 8002e96:	2301      	movs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e001      	b.n	8002ea0 <ES_WIFI_ReceiveData+0x28>
  }
  else
  {
    wkgTimeOut = Timeout;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	617b      	str	r3, [r7, #20]
  }

  LOCK_WIFI();

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE)
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002ea6:	f200 808b 	bhi.w	8002fc0 <ES_WIFI_ReceiveData+0x148>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002eb0:	7afa      	ldrb	r2, [r7, #11]
 8002eb2:	4946      	ldr	r1, [pc, #280]	; (8002fcc <ES_WIFI_ReceiveData+0x154>)
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f005 f895 	bl	8007fe4 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff f971 	bl	80021b0 <AT_ExecuteCommand>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	74fb      	strb	r3, [r7, #19]

    if (ret == ES_WIFI_STATUS_OK)
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d165      	bne.n	8002fa4 <ES_WIFI_ReceiveData+0x12c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ede:	893a      	ldrh	r2, [r7, #8]
 8002ee0:	493b      	ldr	r1, [pc, #236]	; (8002fd0 <ES_WIFI_ReceiveData+0x158>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f005 f87e 	bl	8007fe4 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff f95a 	bl	80021b0 <AT_ExecuteCommand>
 8002efc:	4603      	mov	r3, r0
 8002efe:	74fb      	strb	r3, [r7, #19]
      if (ret == ES_WIFI_STATUS_OK)
 8002f00:	7cfb      	ldrb	r3, [r7, #19]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d141      	bne.n	8002f8a <ES_WIFI_ReceiveData+0x112>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4931      	ldr	r1, [pc, #196]	; (8002fd4 <ES_WIFI_ReceiveData+0x15c>)
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 f867 	bl	8007fe4 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f22:	461a      	mov	r2, r3
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff f943 	bl	80021b0 <AT_ExecuteCommand>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]
        if (ret == ES_WIFI_STATUS_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d120      	bne.n	8002f76 <ES_WIFI_ReceiveData+0xfe>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002f3a:	4927      	ldr	r1, [pc, #156]	; (8002fd8 <ES_WIFI_ReceiveData+0x160>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f005 f851 	bl	8007fe4 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8002f48:	893a      	ldrh	r2, [r7, #8]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f7ff f9f4 	bl	8002340 <AT_RequestReceiveData>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	74fb      	strb	r3, [r7, #19]
          if (ret != ES_WIFI_STATUS_OK)
 8002f5c:	7cfb      	ldrb	r3, [r7, #19]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d02e      	beq.n	8002fc0 <ES_WIFI_ReceiveData+0x148>
          {
            DEBUG("AT_RequestReceiveData failed\n");
 8002f62:	f640 1294 	movw	r2, #2452	; 0x994
 8002f66:	491d      	ldr	r1, [pc, #116]	; (8002fdc <ES_WIFI_ReceiveData+0x164>)
 8002f68:	481d      	ldr	r0, [pc, #116]	; (8002fe0 <ES_WIFI_ReceiveData+0x168>)
 8002f6a:	f004 ff99 	bl	8007ea0 <iprintf>
 8002f6e:	481d      	ldr	r0, [pc, #116]	; (8002fe4 <ES_WIFI_ReceiveData+0x16c>)
 8002f70:	f004 fffc 	bl	8007f6c <puts>
 8002f74:	e024      	b.n	8002fc0 <ES_WIFI_ReceiveData+0x148>
          }
        }
        else
        {
         DEBUG("Setting timeout failed\n");
 8002f76:	f640 1299 	movw	r2, #2457	; 0x999
 8002f7a:	4918      	ldr	r1, [pc, #96]	; (8002fdc <ES_WIFI_ReceiveData+0x164>)
 8002f7c:	4818      	ldr	r0, [pc, #96]	; (8002fe0 <ES_WIFI_ReceiveData+0x168>)
 8002f7e:	f004 ff8f 	bl	8007ea0 <iprintf>
 8002f82:	4819      	ldr	r0, [pc, #100]	; (8002fe8 <ES_WIFI_ReceiveData+0x170>)
 8002f84:	f004 fff2 	bl	8007f6c <puts>
 8002f88:	e01a      	b.n	8002fc0 <ES_WIFI_ReceiveData+0x148>
        }
      }
      else
      {
        DEBUG("Setting requested len failed\n");
 8002f8a:	f640 129e 	movw	r2, #2462	; 0x99e
 8002f8e:	4913      	ldr	r1, [pc, #76]	; (8002fdc <ES_WIFI_ReceiveData+0x164>)
 8002f90:	4813      	ldr	r0, [pc, #76]	; (8002fe0 <ES_WIFI_ReceiveData+0x168>)
 8002f92:	f004 ff85 	bl	8007ea0 <iprintf>
 8002f96:	4815      	ldr	r0, [pc, #84]	; (8002fec <ES_WIFI_ReceiveData+0x174>)
 8002f98:	f004 ffe8 	bl	8007f6c <puts>
        *Receivedlen = 0;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e00d      	b.n	8002fc0 <ES_WIFI_ReceiveData+0x148>
      }
    }
    else
    {
      DEBUG("Setting socket for read failed\n");
 8002fa4:	f640 12a4 	movw	r2, #2468	; 0x9a4
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <ES_WIFI_ReceiveData+0x164>)
 8002faa:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <ES_WIFI_ReceiveData+0x168>)
 8002fac:	f004 ff78 	bl	8007ea0 <iprintf>
 8002fb0:	480f      	ldr	r0, [pc, #60]	; (8002ff0 <ES_WIFI_ReceiveData+0x178>)
 8002fb2:	f004 ffdb 	bl	8007f6c <puts>
      issue15++;
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <ES_WIFI_ReceiveData+0x17c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <ES_WIFI_ReceiveData+0x17c>)
 8002fbe:	6013      	str	r3, [r2, #0]
    }
  }

  UNLOCK_WIFI();

  return ret;
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	08009a34 	.word	0x08009a34
 8002fd0:	08009c88 	.word	0x08009c88
 8002fd4:	08009c90 	.word	0x08009c90
 8002fd8:	08009c98 	.word	0x08009c98
 8002fdc:	08009ac4 	.word	0x08009ac4
 8002fe0:	08009af0 	.word	0x08009af0
 8002fe4:	08009c9c 	.word	0x08009c9c
 8002fe8:	08009cbc 	.word	0x08009cbc
 8002fec:	08009cd4 	.word	0x08009cd4
 8002ff0:	08009cf4 	.word	0x08009cf4
 8002ff4:	200048ec 	.word	0x200048ec

08002ff8 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval 0 if init success, -1 otherwise.
  */
int8_t SPI_WIFI_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
  uint32_t tickstart;
  uint8_t Prompt[6];

  if(HAL_SPI_Init( &hspi3 ) != HAL_OK)
 8002ffe:	4841      	ldr	r0, [pc, #260]	; (8003104 <SPI_WIFI_Init+0x10c>)
 8003000:	f003 f850 	bl	80060a4 <HAL_SPI_Init>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <SPI_WIFI_Init+0x18>
  {
    return -1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
 800300e:	e074      	b.n	80030fa <SPI_WIFI_Init+0x102>
  }

  WIFI_RESET_MODULE();
 8003010:	2200      	movs	r2, #0
 8003012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003016:	483c      	ldr	r0, [pc, #240]	; (8003108 <SPI_WIFI_Init+0x110>)
 8003018:	f001 fce8 	bl	80049ec <HAL_GPIO_WritePin>
 800301c:	200a      	movs	r0, #10
 800301e:	f000 fbc5 	bl	80037ac <HAL_Delay>
 8003022:	2201      	movs	r2, #1
 8003024:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003028:	4837      	ldr	r0, [pc, #220]	; (8003108 <SPI_WIFI_Init+0x110>)
 800302a:	f001 fcdf 	bl	80049ec <HAL_GPIO_WritePin>
 800302e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003032:	f000 fbbb 	bl	80037ac <HAL_Delay>

  WIFI_ENABLE_NSS();
 8003036:	2200      	movs	r2, #0
 8003038:	2101      	movs	r1, #1
 800303a:	4833      	ldr	r0, [pc, #204]	; (8003108 <SPI_WIFI_Init+0x110>)
 800303c:	f001 fcd6 	bl	80049ec <HAL_GPIO_WritePin>
 8003040:	2001      	movs	r0, #1
 8003042:	f000 fbb3 	bl	80037ac <HAL_Delay>

  tickstart = HAL_GetTick();
 8003046:	f000 fba5 	bl	8003794 <HAL_GetTick>
 800304a:	60b8      	str	r0, [r7, #8]

  for (uint8_t count = 0; count < 6; count += 2)
 800304c:	2300      	movs	r3, #0
 800304e:	73fb      	strb	r3, [r7, #15]
 8003050:	e018      	b.n	8003084 <SPI_WIFI_Init+0x8c>
  {
    if (HAL_SPI_Receive(&hspi3 , &Prompt[count], 1, 100) != HAL_OK)
 8003052:	7bfb      	ldrb	r3, [r7, #15]
 8003054:	463a      	mov	r2, r7
 8003056:	18d1      	adds	r1, r2, r3
 8003058:	2364      	movs	r3, #100	; 0x64
 800305a:	2201      	movs	r2, #1
 800305c:	4829      	ldr	r0, [pc, #164]	; (8003104 <SPI_WIFI_Init+0x10c>)
 800305e:	f003 fa5a 	bl	8006516 <HAL_SPI_Receive>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <SPI_WIFI_Init+0x86>
    {
      WIFI_DISABLE_NSS();
 8003068:	2201      	movs	r2, #1
 800306a:	2101      	movs	r1, #1
 800306c:	4826      	ldr	r0, [pc, #152]	; (8003108 <SPI_WIFI_Init+0x110>)
 800306e:	f001 fcbd 	bl	80049ec <HAL_GPIO_WritePin>
 8003072:	2001      	movs	r0, #1
 8003074:	f000 fb9a 	bl	80037ac <HAL_Delay>
      return -1;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	e03d      	b.n	80030fa <SPI_WIFI_Init+0x102>
  for (uint8_t count = 0; count < 6; count += 2)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	3302      	adds	r3, #2
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b05      	cmp	r3, #5
 8003088:	d9e3      	bls.n	8003052 <SPI_WIFI_Init+0x5a>
    }
  }

  while (WIFI_IS_CMDDATA_READY())
 800308a:	e011      	b.n	80030b0 <SPI_WIFI_Init+0xb8>
  {
    if((HAL_GetTick() - tickstart ) > 100)
 800308c:	f000 fb82 	bl	8003794 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d90a      	bls.n	80030b0 <SPI_WIFI_Init+0xb8>
    {
      WIFI_DISABLE_NSS();
 800309a:	2201      	movs	r2, #1
 800309c:	2101      	movs	r1, #1
 800309e:	481a      	ldr	r0, [pc, #104]	; (8003108 <SPI_WIFI_Init+0x110>)
 80030a0:	f001 fca4 	bl	80049ec <HAL_GPIO_WritePin>
 80030a4:	2001      	movs	r0, #1
 80030a6:	f000 fb81 	bl	80037ac <HAL_Delay>
      return -1;
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	e024      	b.n	80030fa <SPI_WIFI_Init+0x102>
  while (WIFI_IS_CMDDATA_READY())
 80030b0:	2102      	movs	r1, #2
 80030b2:	4815      	ldr	r0, [pc, #84]	; (8003108 <SPI_WIFI_Init+0x110>)
 80030b4:	f001 fc82 	bl	80049bc <HAL_GPIO_ReadPin>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d0e6      	beq.n	800308c <SPI_WIFI_Init+0x94>
    }
  }

  WIFI_DISABLE_NSS();
 80030be:	2201      	movs	r2, #1
 80030c0:	2101      	movs	r1, #1
 80030c2:	4811      	ldr	r0, [pc, #68]	; (8003108 <SPI_WIFI_Init+0x110>)
 80030c4:	f001 fc92 	bl	80049ec <HAL_GPIO_WritePin>
 80030c8:	2001      	movs	r0, #1
 80030ca:	f000 fb6f 	bl	80037ac <HAL_Delay>

  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80030ce:	783b      	ldrb	r3, [r7, #0]
 80030d0:	2b15      	cmp	r3, #21
 80030d2:	d10e      	bne.n	80030f2 <SPI_WIFI_Init+0xfa>
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	2b15      	cmp	r3, #21
 80030d8:	d10b      	bne.n	80030f2 <SPI_WIFI_Init+0xfa>
 80030da:	78bb      	ldrb	r3, [r7, #2]
 80030dc:	2b0d      	cmp	r3, #13
 80030de:	d108      	bne.n	80030f2 <SPI_WIFI_Init+0xfa>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80030e0:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80030e2:	2b0a      	cmp	r3, #10
 80030e4:	d105      	bne.n	80030f2 <SPI_WIFI_Init+0xfa>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80030e6:	793b      	ldrb	r3, [r7, #4]
 80030e8:	2b3e      	cmp	r3, #62	; 0x3e
 80030ea:	d102      	bne.n	80030f2 <SPI_WIFI_Init+0xfa>
 80030ec:	797b      	ldrb	r3, [r7, #5]
 80030ee:	2b20      	cmp	r3, #32
 80030f0:	d002      	beq.n	80030f8 <SPI_WIFI_Init+0x100>
  {
    return -1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295
 80030f6:	e000      	b.n	80030fa <SPI_WIFI_Init+0x102>
  }

  return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000016c 	.word	0x2000016c
 8003108:	48001000 	.word	0x48001000

0800310c <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi3 );
 8003110:	4802      	ldr	r0, [pc, #8]	; (800311c <SPI_WIFI_DeInit+0x10>)
 8003112:	f003 f86a 	bl	80061ea <HAL_SPI_DeInit>
  return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	2000016c 	.word	0x2000016c

08003120 <SPI_WIFI_ReceiveData>:
  * @param  len : Data length. if == 0 => receive all available data
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */
int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	460b      	mov	r3, r1
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800312e:	f000 fb31 	bl	8003794 <HAL_GetTick>
 8003132:	61b8      	str	r0, [r7, #24]
  int16_t length = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	83fb      	strh	r3, [r7, #30]
  uint8_t tmp[2];

  HAL_SPIEx_FlushRxFifo(&hspi3);
 8003138:	4845      	ldr	r0, [pc, #276]	; (8003250 <SPI_WIFI_ReceiveData+0x130>)
 800313a:	f003 feeb 	bl	8006f14 <HAL_SPIEx_FlushRxFifo>

  WIFI_DISABLE_NSS();
 800313e:	2201      	movs	r2, #1
 8003140:	2101      	movs	r1, #1
 8003142:	4844      	ldr	r0, [pc, #272]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 8003144:	f001 fc52 	bl	80049ec <HAL_GPIO_WritePin>
 8003148:	2001      	movs	r0, #1
 800314a:	f000 fb2f 	bl	80037ac <HAL_Delay>

  while (!WIFI_IS_CMDDATA_READY())
 800314e:	e00a      	b.n	8003166 <SPI_WIFI_ReceiveData+0x46>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8003150:	f000 fb20 	bl	8003794 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	d202      	bcs.n	8003166 <SPI_WIFI_ReceiveData+0x46>
    {
      return -1;
 8003160:	f04f 33ff 	mov.w	r3, #4294967295
 8003164:	e06f      	b.n	8003246 <SPI_WIFI_ReceiveData+0x126>
  while (!WIFI_IS_CMDDATA_READY())
 8003166:	2102      	movs	r1, #2
 8003168:	483a      	ldr	r0, [pc, #232]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 800316a:	f001 fc27 	bl	80049bc <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d1ed      	bne.n	8003150 <SPI_WIFI_ReceiveData+0x30>
    }
  }

  WIFI_ENABLE_NSS();
 8003174:	2200      	movs	r2, #0
 8003176:	2101      	movs	r1, #1
 8003178:	4836      	ldr	r0, [pc, #216]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 800317a:	f001 fc37 	bl	80049ec <HAL_GPIO_WritePin>
 800317e:	2001      	movs	r0, #1
 8003180:	f000 fb14 	bl	80037ac <HAL_Delay>

  while (WIFI_IS_CMDDATA_READY())
 8003184:	e04c      	b.n	8003220 <SPI_WIFI_ReceiveData+0x100>
  {
    if((length < len) || (!len))
 8003186:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800318a:	897b      	ldrh	r3, [r7, #10]
 800318c:	429a      	cmp	r2, r3
 800318e:	db02      	blt.n	8003196 <SPI_WIFI_ReceiveData+0x76>
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d14d      	bne.n	8003232 <SPI_WIFI_ReceiveData+0x112>
    {
      HAL_SPI_Receive(&hspi3, tmp, 1, timeout) ;
 8003196:	f107 0114 	add.w	r1, r7, #20
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	482c      	ldr	r0, [pc, #176]	; (8003250 <SPI_WIFI_ReceiveData+0x130>)
 80031a0:	f003 f9b9 	bl	8006516 <HAL_SPI_Receive>
      /* let some time to hardware to change CMDDATA signal */
      if(tmp[1] == 0x15)
 80031a4:	7d7b      	ldrb	r3, [r7, #21]
 80031a6:	2b15      	cmp	r3, #21
 80031a8:	d102      	bne.n	80031b0 <SPI_WIFI_ReceiveData+0x90>
      {
       SPI_WIFI_Delay(1);
 80031aa:	2001      	movs	r0, #1
 80031ac:	f000 f8c6 	bl	800333c <SPI_WIFI_Delay>
      }
      /*This the last data */
      if(!WIFI_IS_CMDDATA_READY())
 80031b0:	2102      	movs	r1, #2
 80031b2:	4828      	ldr	r0, [pc, #160]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 80031b4:	f001 fc02 	bl	80049bc <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d00f      	beq.n	80031de <SPI_WIFI_ReceiveData+0xbe>
      {
        if(tmp[1] == 0x15)
 80031be:	7d7b      	ldrb	r3, [r7, #21]
 80031c0:	2b15      	cmp	r3, #21
 80031c2:	d10c      	bne.n	80031de <SPI_WIFI_ReceiveData+0xbe>
        {
          // Only 1 byte of data, the other one is padding
          if((tmp[0] != 0x15))
 80031c4:	7d3b      	ldrb	r3, [r7, #20]
 80031c6:	2b15      	cmp	r3, #21
 80031c8:	d032      	beq.n	8003230 <SPI_WIFI_ReceiveData+0x110>
          {
            pData[0] = tmp[0];
 80031ca:	7d3a      	ldrb	r2, [r7, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]
            length++;
 80031d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	83fb      	strh	r3, [r7, #30]
          }
          break;
 80031dc:	e028      	b.n	8003230 <SPI_WIFI_ReceiveData+0x110>
        }
      }

      pData[0] = tmp[0];
 80031de:	7d3a      	ldrb	r2, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	7d7a      	ldrb	r2, [r7, #21]
 80031ea:	701a      	strb	r2, [r3, #0]
      length += 2;
 80031ec:	8bfb      	ldrh	r3, [r7, #30]
 80031ee:	3302      	adds	r3, #2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	83fb      	strh	r3, [r7, #30]
      pData  += 2;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	3302      	adds	r3, #2
 80031f8:	60fb      	str	r3, [r7, #12]

      if((HAL_GetTick() - tickstart ) > timeout)
 80031fa:	f000 facb 	bl	8003794 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	429a      	cmp	r2, r3
 8003208:	d20a      	bcs.n	8003220 <SPI_WIFI_ReceiveData+0x100>
      {
        WIFI_DISABLE_NSS();
 800320a:	2201      	movs	r2, #1
 800320c:	2101      	movs	r1, #1
 800320e:	4811      	ldr	r0, [pc, #68]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 8003210:	f001 fbec 	bl	80049ec <HAL_GPIO_WritePin>
 8003214:	2001      	movs	r0, #1
 8003216:	f000 fac9 	bl	80037ac <HAL_Delay>
        return -1;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295
 800321e:	e012      	b.n	8003246 <SPI_WIFI_ReceiveData+0x126>
  while (WIFI_IS_CMDDATA_READY())
 8003220:	2102      	movs	r1, #2
 8003222:	480c      	ldr	r0, [pc, #48]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 8003224:	f001 fbca 	bl	80049bc <HAL_GPIO_ReadPin>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	d0ab      	beq.n	8003186 <SPI_WIFI_ReceiveData+0x66>
 800322e:	e000      	b.n	8003232 <SPI_WIFI_ReceiveData+0x112>
          break;
 8003230:	bf00      	nop
    {
      break;
    }
  }

  WIFI_DISABLE_NSS();
 8003232:	2201      	movs	r2, #1
 8003234:	2101      	movs	r1, #1
 8003236:	4807      	ldr	r0, [pc, #28]	; (8003254 <SPI_WIFI_ReceiveData+0x134>)
 8003238:	f001 fbd8 	bl	80049ec <HAL_GPIO_WritePin>
 800323c:	2001      	movs	r0, #1
 800323e:	f000 fab5 	bl	80037ac <HAL_Delay>
  return length;
 8003242:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8003246:	4618      	mov	r0, r3
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000016c 	.word	0x2000016c
 8003254:	48001000 	.word	0x48001000

08003258 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData(const uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	460b      	mov	r3, r1
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8003266:	f000 fa95 	bl	8003794 <HAL_GetTick>
 800326a:	6178      	str	r0, [r7, #20]
  uint8_t Padding[2];

  while (!WIFI_IS_CMDDATA_READY())
 800326c:	e012      	b.n	8003294 <SPI_WIFI_SendData+0x3c>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800326e:	f000 fa91 	bl	8003794 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	d20a      	bcs.n	8003294 <SPI_WIFI_SendData+0x3c>
    {
      WIFI_DISABLE_NSS();
 800327e:	2201      	movs	r2, #1
 8003280:	2101      	movs	r1, #1
 8003282:	482c      	ldr	r0, [pc, #176]	; (8003334 <SPI_WIFI_SendData+0xdc>)
 8003284:	f001 fbb2 	bl	80049ec <HAL_GPIO_WritePin>
 8003288:	2001      	movs	r0, #1
 800328a:	f000 fa8f 	bl	80037ac <HAL_Delay>
      return -1;
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	e04b      	b.n	800332c <SPI_WIFI_SendData+0xd4>
  while (!WIFI_IS_CMDDATA_READY())
 8003294:	2102      	movs	r1, #2
 8003296:	4827      	ldr	r0, [pc, #156]	; (8003334 <SPI_WIFI_SendData+0xdc>)
 8003298:	f001 fb90 	bl	80049bc <HAL_GPIO_ReadPin>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d1e5      	bne.n	800326e <SPI_WIFI_SendData+0x16>
    }
  }

  WIFI_ENABLE_NSS();
 80032a2:	2200      	movs	r2, #0
 80032a4:	2101      	movs	r1, #1
 80032a6:	4823      	ldr	r0, [pc, #140]	; (8003334 <SPI_WIFI_SendData+0xdc>)
 80032a8:	f001 fba0 	bl	80049ec <HAL_GPIO_WritePin>
 80032ac:	2001      	movs	r0, #1
 80032ae:	f000 fa7d 	bl	80037ac <HAL_Delay>
  if (len > 1)
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d915      	bls.n	80032e4 <SPI_WIFI_SendData+0x8c>
  {
   if( HAL_SPI_Transmit(&hspi3, (uint8_t *)pdata , len/2, timeout) != HAL_OK)
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	481d      	ldr	r0, [pc, #116]	; (8003338 <SPI_WIFI_SendData+0xe0>)
 80032c4:	f002 ffb9 	bl	800623a <HAL_SPI_Transmit>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <SPI_WIFI_SendData+0x8c>
   {
     WIFI_DISABLE_NSS();
 80032ce:	2201      	movs	r2, #1
 80032d0:	2101      	movs	r1, #1
 80032d2:	4818      	ldr	r0, [pc, #96]	; (8003334 <SPI_WIFI_SendData+0xdc>)
 80032d4:	f001 fb8a 	bl	80049ec <HAL_GPIO_WritePin>
 80032d8:	2001      	movs	r0, #1
 80032da:	f000 fa67 	bl	80037ac <HAL_Delay>
     return -1;
 80032de:	f04f 33ff 	mov.w	r3, #4294967295
 80032e2:	e023      	b.n	800332c <SPI_WIFI_SendData+0xd4>
   }
  }

  if ( len & 1)
 80032e4:	897b      	ldrh	r3, [r7, #10]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01c      	beq.n	8003328 <SPI_WIFI_SendData+0xd0>
  {
    Padding[0] = pdata[len-1];
 80032ee:	897b      	ldrh	r3, [r7, #10]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4413      	add	r3, r2
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	743b      	strb	r3, [r7, #16]
    Padding[1] = '\n';
 80032fa:	230a      	movs	r3, #10
 80032fc:	747b      	strb	r3, [r7, #17]

    if( HAL_SPI_Transmit(&hspi3, Padding, 1, timeout) != HAL_OK)
 80032fe:	f107 0110 	add.w	r1, r7, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	480c      	ldr	r0, [pc, #48]	; (8003338 <SPI_WIFI_SendData+0xe0>)
 8003308:	f002 ff97 	bl	800623a <HAL_SPI_Transmit>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <SPI_WIFI_SendData+0xd0>
    {
      WIFI_DISABLE_NSS();
 8003312:	2201      	movs	r2, #1
 8003314:	2101      	movs	r1, #1
 8003316:	4807      	ldr	r0, [pc, #28]	; (8003334 <SPI_WIFI_SendData+0xdc>)
 8003318:	f001 fb68 	bl	80049ec <HAL_GPIO_WritePin>
 800331c:	2001      	movs	r0, #1
 800331e:	f000 fa45 	bl	80037ac <HAL_Delay>
      return -1;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	e001      	b.n	800332c <SPI_WIFI_SendData+0xd4>
    }
  }

  return len;
 8003328:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	48001000 	.word	0x48001000
 8003338:	2000016c 	.word	0x2000016c

0800333c <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fa31 	bl	80037ac <HAL_Delay>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	71fb      	strb	r3, [r7, #7]

  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <WIFI_Init+0x40>)
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	4b0d      	ldr	r3, [pc, #52]	; (8003398 <WIFI_Init+0x44>)
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4b0d      	ldr	r3, [pc, #52]	; (800339c <WIFI_Init+0x48>)
 8003368:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <WIFI_Init+0x4c>)
 800336a:	490e      	ldr	r1, [pc, #56]	; (80033a4 <WIFI_Init+0x50>)
 800336c:	480e      	ldr	r0, [pc, #56]	; (80033a8 <WIFI_Init+0x54>)
 800336e:	f7ff f8bb 	bl	80024e8 <ES_WIFI_RegisterBusIO>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <WIFI_Init+0x34>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8003378:	480b      	ldr	r0, [pc, #44]	; (80033a8 <WIFI_Init+0x54>)
 800337a:	f7ff f883 	bl	8002484 <ES_WIFI_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 8003384:	2300      	movs	r3, #0
 8003386:	71fb      	strb	r3, [r7, #7]
    }
  }

  return ret;
 8003388:	79fb      	ldrb	r3, [r7, #7]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	08003121 	.word	0x08003121
 8003398:	08003259 	.word	0x08003259
 800339c:	0800333d 	.word	0x0800333d
 80033a0:	0800310d 	.word	0x0800310d
 80033a4:	08002ff9 	.word	0x08002ff9
 80033a8:	200048f0 	.word	0x200048f0

080033ac <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t *mac, uint8_t MacLength)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]

  if ((mac != NULL) && (0 < MacLength))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00d      	beq.n	80033de <WIFI_GetMAC_Address+0x32>
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <WIFI_GetMAC_Address+0x32>
  {
    if(ES_WIFI_GetMACAddress(&EsWifiObj, mac, MacLength) == ES_WIFI_STATUS_OK)
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	461a      	mov	r2, r3
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4806      	ldr	r0, [pc, #24]	; (80033e8 <WIFI_GetMAC_Address+0x3c>)
 80033d0:	f7ff f9ce 	bl	8002770 <ES_WIFI_GetMACAddress>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <WIFI_GetMAC_Address+0x32>
    {
      ret = WIFI_STATUS_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200048f0 	.word	0x200048f0

080033ec <WIFI_ConfigureAP>:
  * @param  max_conn : Max allowed connections
  * @retval Operation status
  */
WIFI_Status_t WIFI_ConfigureAP(const uint8_t *ssid, const uint8_t *pass, WIFI_Ecn_t ecn, uint8_t channel,
                               uint8_t max_conn)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b098      	sub	sp, #96	; 0x60
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	4611      	mov	r1, r2
 80033f8:	461a      	mov	r2, r3
 80033fa:	460b      	mov	r3, r1
 80033fc:	71fb      	strb	r3, [r7, #7]
 80033fe:	4613      	mov	r3, r2
 8003400:	71bb      	strb	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  ES_WIFI_Status_t ret_es_wifi = ES_WIFI_STATUS_ERROR;
 8003408:	2302      	movs	r3, #2
 800340a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  ES_WIFI_APConfig_t ApConfig;
  uint32_t saved_timeout;

  strncpy((char *)ApConfig.SSID, (char *)ssid, sizeof(ApConfig.SSID) - 1);
 800340e:	f107 0310 	add.w	r3, r7, #16
 8003412:	2220      	movs	r2, #32
 8003414:	68f9      	ldr	r1, [r7, #12]
 8003416:	4618      	mov	r0, r3
 8003418:	f004 ff15 	bl	8008246 <strncpy>
  ApConfig.SSID[sizeof(ApConfig.SSID) - 1] = '\0';
 800341c:	2300      	movs	r3, #0
 800341e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

  strncpy((char *)ApConfig.Pass, (char *)pass, sizeof(ApConfig.Pass) - 1);
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	3321      	adds	r3, #33	; 0x21
 8003428:	2220      	movs	r2, #32
 800342a:	68b9      	ldr	r1, [r7, #8]
 800342c:	4618      	mov	r0, r3
 800342e:	f004 ff0a 	bl	8008246 <strncpy>
  ApConfig.Pass[sizeof(ApConfig.Pass) - 1] = '\0';
 8003432:	2300      	movs	r3, #0
 8003434:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51

  ApConfig.Channel = channel;
 8003438:	79bb      	ldrb	r3, [r7, #6]
 800343a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  ApConfig.MaxConnections = WIFI_MAX_CONNECTED_STATIONS;
 800343e:	2302      	movs	r3, #2
 8003440:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  ApConfig.Security = (ES_WIFI_SecurityType_t)ecn;
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

  saved_timeout = EsWifiObj.Timeout;
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <WIFI_ConfigureAP+0xb0>)
 800344c:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003450:	65bb      	str	r3, [r7, #88]	; 0x58

  EsWifiObj.Timeout = 0xC0000;
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <WIFI_ConfigureAP+0xb0>)
 8003454:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003458:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  ret_es_wifi = ES_WIFI_ActivateAP(&EsWifiObj, &ApConfig);
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4619      	mov	r1, r3
 8003462:	480e      	ldr	r0, [pc, #56]	; (800349c <WIFI_ConfigureAP+0xb0>)
 8003464:	f7ff f89e 	bl	80025a4 <ES_WIFI_ActivateAP>
 8003468:	4603      	mov	r3, r0
 800346a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

  EsWifiObj.Timeout = saved_timeout;
 800346e:	4a0b      	ldr	r2, [pc, #44]	; (800349c <WIFI_ConfigureAP+0xb0>)
 8003470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003472:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8

  if (ret_es_wifi == ES_WIFI_STATUS_OK)
 8003476:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <WIFI_ConfigureAP+0xa4>
  {
    if (ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800347e:	4807      	ldr	r0, [pc, #28]	; (800349c <WIFI_ConfigureAP+0xb0>)
 8003480:	f7ff f866 	bl	8002550 <ES_WIFI_GetNetworkSettings>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <WIFI_ConfigureAP+0xa4>
    {
      ret = WIFI_STATUS_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
  }
  return ret;
 8003490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8003494:	4618      	mov	r0, r3
 8003496:	3760      	adds	r7, #96	; 0x60
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	200048f0 	.word	0x200048f0

080034a0 <WIFI_GatewayIP_Address>:
  * @brief  This function retrieves the WiFi Gateway IP address.
  * @retval Operation Status.
  */

WIFI_Status_t WIFI_GatewayIP_Address(uint8_t *ipaddr, uint8_t IpAddrLength)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]

  if ((ipaddr != NULL) && (IpAddrLength >= 4))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00f      	beq.n	80034d6 <WIFI_GatewayIP_Address+0x36>
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d90c      	bls.n	80034d6 <WIFI_GatewayIP_Address+0x36>
  {
  	if(EsWifiObj.NetSettings.IsConnected == 1)
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <WIFI_GatewayIP_Address+0x44>)
 80034be:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d107      	bne.n	80034d6 <WIFI_GatewayIP_Address+0x36>
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <WIFI_GatewayIP_Address+0x44>)
 80034c8:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 80034cc:	461a      	mov	r2, r3
  	{
      memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
      ret = WIFI_STATUS_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	73fb      	strb	r3, [r7, #15]
  	}
  }
  return ret;
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	200048f0 	.word	0x200048f0

080034e8 <WIFI_StartServer>:
  * @param  port : Remote port
  * @retval Operation status
  */
WIFI_Status_t WIFI_StartServer(uint32_t socket, WIFI_Protocol_t protocol, uint16_t backlog ,const char *name,
                               uint16_t port)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	72fb      	strb	r3, [r7, #11]
 80034f6:	4613      	mov	r3, r2
 80034f8:	813b      	strh	r3, [r7, #8]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;

  conn.Number = (uint8_t)socket;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	747b      	strb	r3, [r7, #17]
  conn.LocalPort = port;
 8003506:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003508:	82bb      	strh	r3, [r7, #20]
  conn.Type = (protocol == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800350a:	7afb      	ldrb	r3, [r7, #11]
 800350c:	2b00      	cmp	r3, #0
 800350e:	bf14      	ite	ne
 8003510:	2301      	movne	r3, #1
 8003512:	2300      	moveq	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	743b      	strb	r3, [r7, #16]
  conn.Backlog = backlog;
 8003518:	893b      	ldrh	r3, [r7, #8]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f887 3020 	strb.w	r3, [r7, #32]

  if(ES_WIFI_StartServerSingleConn(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8003520:	f107 0310 	add.w	r3, r7, #16
 8003524:	4619      	mov	r1, r3
 8003526:	4807      	ldr	r0, [pc, #28]	; (8003544 <WIFI_StartServer+0x5c>)
 8003528:	f7ff f958 	bl	80027dc <ES_WIFI_StartServerSingleConn>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d102      	bne.n	8003538 <WIFI_StartServer+0x50>
  {
    ret = WIFI_STATUS_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8003538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800353c:	4618      	mov	r0, r3
 800353e:	3728      	adds	r7, #40	; 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200048f0 	.word	0x200048f0

08003548 <WIFI_WaitServerConnection>:
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_WaitServerConnection(uint32_t socket, uint32_t Timeout,
                                        uint8_t *RemoteIp, uint8_t RemoteIpAddrLength, uint16_t *RemotePort)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Conn_t conn;
  ES_WIFI_Status_t ret;

  conn.Number = (uint8_t)socket;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	747b      	strb	r3, [r7, #17]

  ret = ES_WIFI_WaitServerConnection(&EsWifiObj, Timeout, &conn);
 800355c:	f107 0310 	add.w	r3, r7, #16
 8003560:	461a      	mov	r2, r3
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	481c      	ldr	r0, [pc, #112]	; (80035d8 <WIFI_WaitServerConnection+0x90>)
 8003566:	f7ff f9e5 	bl	8002934 <ES_WIFI_WaitServerConnection>
 800356a:	4603      	mov	r3, r0
 800356c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ES_WIFI_STATUS_OK == ret)
 8003570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003574:	2b00      	cmp	r3, #0
 8003576:	d112      	bne.n	800359e <WIFI_WaitServerConnection+0x56>
  {
    if (RemotePort)
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <WIFI_WaitServerConnection+0x3c>
    {
      *RemotePort = conn.RemotePort;
 800357e:	8a7a      	ldrh	r2, [r7, #18]
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <WIFI_WaitServerConnection+0x52>
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d904      	bls.n	800359a <WIFI_WaitServerConnection+0x52>
 8003590:	f8d7 3016 	ldr.w	r3, [r7, #22]
 8003594:	461a      	mov	r2, r3
    {
      memcpy(RemoteIp, conn.RemoteIP, 4);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	601a      	str	r2, [r3, #0]
    }
    return  WIFI_STATUS_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e017      	b.n	80035ce <WIFI_WaitServerConnection+0x86>
  }

  if (ES_WIFI_STATUS_TIMEOUT == ret)
 800359e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d112      	bne.n	80035cc <WIFI_WaitServerConnection+0x84>
  {
    if (RemotePort)
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <WIFI_WaitServerConnection+0x6a>
    {
      *RemotePort = 0;
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2200      	movs	r2, #0
 80035b0:	801a      	strh	r2, [r3, #0]
    }
    if ((RemoteIp != NULL) && (4 <= RemoteIpAddrLength))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <WIFI_WaitServerConnection+0x80>
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d904      	bls.n	80035c8 <WIFI_WaitServerConnection+0x80>
    {
      memset(RemoteIp, 0, 4);
 80035be:	2204      	movs	r2, #4
 80035c0:	2100      	movs	r1, #0
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f004 fe16 	bl	80081f4 <memset>
    }
    return  WIFI_STATUS_TIMEOUT;
 80035c8:	2305      	movs	r3, #5
 80035ca:	e000      	b.n	80035ce <WIFI_WaitServerConnection+0x86>
  }

  return WIFI_STATUS_ERROR;
 80035cc:	2301      	movs	r3, #1
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3728      	adds	r7, #40	; 0x28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200048f0 	.word	0x200048f0

080035dc <WIFI_CloseServerConnection>:
  * @brief  Close current connection from a client  to the server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseServerConnection(uint32_t socket)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]

  if (ES_WIFI_STATUS_OK == ES_WIFI_CloseServerConnection(&EsWifiObj, (uint8_t)socket))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4619      	mov	r1, r3
 80035ee:	4806      	ldr	r0, [pc, #24]	; (8003608 <WIFI_CloseServerConnection+0x2c>)
 80035f0:	f7ff fac4 	bl	8002b7c <ES_WIFI_CloseServerConnection>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <WIFI_CloseServerConnection+0x22>
  {
    ret = WIFI_STATUS_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200048f0 	.word	0x200048f0

0800360c <WIFI_StopServer>:
  * @brief  Stop a server
  * @param  socket : socket
  * @retval Operation status
  */
WIFI_Status_t WIFI_StopServer(uint32_t socket)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]

  if(ES_WIFI_StopServerSingleConn(&EsWifiObj, (uint8_t)socket)== ES_WIFI_STATUS_OK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	4619      	mov	r1, r3
 800361e:	4806      	ldr	r0, [pc, #24]	; (8003638 <WIFI_StopServer+0x2c>)
 8003620:	f7ff fb0c 	bl	8002c3c <ES_WIFI_StopServerSingleConn>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <WIFI_StopServer+0x22>
  {
    ret = WIFI_STATUS_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	200048f0 	.word	0x200048f0

0800363c <WIFI_SendData>:
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint32_t socket, const uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen,
                            uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]

    if (ES_WIFI_SendData(&EsWifiObj, (uint8_t)socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	b2d9      	uxtb	r1, r3
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	4613      	mov	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	4806      	ldr	r0, [pc, #24]	; (800367c <WIFI_SendData+0x40>)
 8003664:	f7ff fb4c 	bl	8002d00 <ES_WIFI_SendData>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200048f0 	.word	0x200048f0

08003680 <WIFI_ReceiveData>:
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint32_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen,
                               uint32_t Timeout)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b088      	sub	sp, #32
 8003684:	af02      	add	r7, sp, #8
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	4613      	mov	r3, r2
 800368e:	80fb      	strh	r3, [r7, #6]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	b2d9      	uxtb	r1, r3
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	4806      	ldr	r0, [pc, #24]	; (80036c0 <WIFI_ReceiveData+0x40>)
 80036a8:	f7ff fbe6 	bl	8002e78 <ES_WIFI_ReceiveData>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200048f0 	.word	0x200048f0

080036c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036ca:	2300      	movs	r3, #0
 80036cc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ce:	2003      	movs	r0, #3
 80036d0:	f000 f960 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036d4:	2000      	movs	r0, #0
 80036d6:	f000 f80d 	bl	80036f4 <HAL_InitTick>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	71fb      	strb	r3, [r7, #7]
 80036e4:	e001      	b.n	80036ea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036e6:	f7fd ffb9 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ea:	79fb      	ldrb	r3, [r7, #7]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_InitTick+0x6c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_InitTick+0x70>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_InitTick+0x6c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f96d 	bl	80039fe <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d809      	bhi.n	8003744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003730:	2200      	movs	r2, #0
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f000 f937 	bl	80039aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_InitTick+0x74>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e007      	b.n	8003754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e004      	b.n	8003754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e001      	b.n	8003754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000008 	.word	0x20000008
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x20>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_IncTick+0x24>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4413      	add	r3, r2
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HAL_IncTick+0x24>)
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20000008 	.word	0x20000008
 8003790:	200051f0 	.word	0x200051f0

08003794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return uwTick;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_GetTick+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	200051f0 	.word	0x200051f0

080037ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff ffee 	bl	8003794 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d005      	beq.n	80037d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_Delay+0x44>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d2:	bf00      	nop
 80037d4:	f7ff ffde 	bl	8003794 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d8f7      	bhi.n	80037d4 <HAL_Delay+0x28>
  {
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000008 	.word	0x20000008

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003960:	d301      	bcc.n	8003966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003962:	2301      	movs	r3, #1
 8003964:	e00f      	b.n	8003986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <SysTick_Config+0x40>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396e:	210f      	movs	r1, #15
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f7ff ff8e 	bl	8003894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <SysTick_Config+0x40>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <SysTick_Config+0x40>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010

08003994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff29 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039bc:	f7ff ff3e 	bl	800383c <__NVIC_GetPriorityGrouping>
 80039c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff8e 	bl	80038e8 <NVIC_EncodePriority>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff5d 	bl	8003894 <__NVIC_SetPriority>
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff31 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ffa2 	bl	8003950 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0ac      	b.n	8003b84 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 fa8c 	bl	8003f4c <DFSDM_GetChannelFromInstance>
 8003a34:	4603      	mov	r3, r0
 8003a36:	4a55      	ldr	r2, [pc, #340]	; (8003b8c <HAL_DFSDM_ChannelInit+0x174>)
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e09f      	b.n	8003b84 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7fd fed9 	bl	80017fc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003a4a:	4b51      	ldr	r3, [pc, #324]	; (8003b90 <HAL_DFSDM_ChannelInit+0x178>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	4a4f      	ldr	r2, [pc, #316]	; (8003b90 <HAL_DFSDM_ChannelInit+0x178>)
 8003a52:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003a54:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <HAL_DFSDM_ChannelInit+0x178>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d125      	bne.n	8003aa8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003a5c:	4b4d      	ldr	r3, [pc, #308]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a4c      	ldr	r2, [pc, #304]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a66:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003a68:	4b4a      	ldr	r3, [pc, #296]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	4948      	ldr	r1, [pc, #288]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003a76:	4b47      	ldr	r3, [pc, #284]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a46      	ldr	r2, [pc, #280]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a7c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003a80:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	791b      	ldrb	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d108      	bne.n	8003a9c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003a8a:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	041b      	lsls	r3, r3, #16
 8003a96:	493f      	ldr	r1, [pc, #252]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003a9c:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a3c      	ldr	r2, [pc, #240]	; (8003b94 <HAL_DFSDM_ChannelInit+0x17c>)
 8003aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003aa6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ab6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6819      	ldr	r1, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ac6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003acc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 020f 	bic.w	r2, r2, #15
 8003ae4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6819      	ldr	r1, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b0c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6899      	ldr	r1, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f002 0207 	and.w	r2, r2, #7
 8003b38:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b64:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f9ea 	bl	8003f4c <DFSDM_GetChannelFromInstance>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	4904      	ldr	r1, [pc, #16]	; (8003b8c <HAL_DFSDM_ChannelInit+0x174>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200051f8 	.word	0x200051f8
 8003b90:	200051f4 	.word	0x200051f4
 8003b94:	40016000 	.word	0x40016000

08003b98 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0ca      	b.n	8003d40 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a66      	ldr	r2, [pc, #408]	; (8003d48 <HAL_DFSDM_FilterInit+0x1b0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d109      	bne.n	8003bc8 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d003      	beq.n	8003bc4 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0bb      	b.n	8003d40 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fd fd5f 	bl	80016a4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003bf4:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	7a1b      	ldrb	r3, [r3, #8]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d108      	bne.n	8003c10 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e007      	b.n	8003c20 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003c1e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7a5b      	ldrb	r3, [r3, #9]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d108      	bne.n	8003c3a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e007      	b.n	8003c4a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003c48:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	f423 43ce 	bic.w	r3, r3, #26368	; 0x6700
 8003c58:	f023 0308 	bic.w	r3, r3, #8
 8003c5c:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d108      	bne.n	8003c78 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7c1b      	ldrb	r3, [r3, #16]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d108      	bne.n	8003c92 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0210 	orr.w	r2, r2, #16
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	e007      	b.n	8003ca2 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0210 	bic.w	r2, r2, #16
 8003ca0:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7c5b      	ldrb	r3, [r3, #17]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d108      	bne.n	8003cbc <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0220 	orr.w	r2, r2, #32
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e007      	b.n	8003ccc <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0220 	bic.w	r2, r2, #32
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8003cda:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003cde:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6959      	ldr	r1, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003cf2:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8003cfa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7c1a      	ldrb	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40016100 	.word	0x40016100

08003d4c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02e      	beq.n	8003dc4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8003d6c:	2bff      	cmp	r3, #255	; 0xff
 8003d6e:	d029      	beq.n	8003dc4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d82:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10d      	bne.n	8003da6 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e00a      	b.n	8003dbc <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6819      	ldr	r1, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003dc2:	e001      	b.n	8003dc8 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d102      	bne.n	8003dfa <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
 8003df8:	e064      	b.n	8003ec4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e08:	d002      	beq.n	8003e10 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
 8003e0e:	e059      	b.n	8003ec4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10e      	bne.n	8003e36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10a      	bne.n	8003e36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d105      	bne.n	8003e36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d002      	beq.n	8003e36 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	75fb      	strb	r3, [r7, #23]
 8003e34:	e046      	b.n	8003ec4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10b      	bne.n	8003e56 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d107      	bne.n	8003e56 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d102      	bne.n	8003e56 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	75fb      	strb	r3, [r7, #23]
 8003e54:	e036      	b.n	8003ec4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d004      	beq.n	8003e6a <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d12a      	bne.n	8003ec0 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6e:	4a18      	ldr	r2, [pc, #96]	; (8003ed0 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8003e70:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	4a17      	ldr	r2, [pc, #92]	; (8003ed4 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003e78:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003e80:	2b20      	cmp	r3, #32
 8003e82:	d101      	bne.n	8003e88 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8003e84:	4a14      	ldr	r2, [pc, #80]	; (8003ed8 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8003e86:	e000      	b.n	8003e8a <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8003e88:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	331c      	adds	r3, #28
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f000 f9ae 	bl	8004200 <HAL_DMA_Start_IT>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	22ff      	movs	r2, #255	; 0xff
 8003eae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003eb6:	e005      	b.n	8003ec4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f893 	bl	8003fe4 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003ebe:	e001      	b.n	8003ec4 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f29 	.word	0x08003f29
 8003ed8:	08003ef1 	.word	0x08003ef1

08003edc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7fc ff4a 	bl	8000d98 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7fc ff50 	bl	8000dc0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff ffcd 	bl	8003edc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d102      	bne.n	8003f62 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e02b      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <DFSDM_GetChannelFromInstance+0x80>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d102      	bne.n	8003f70 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
 8003f6e:	e024      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <DFSDM_GetChannelFromInstance+0x84>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d102      	bne.n	8003f7e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e01d      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <DFSDM_GetChannelFromInstance+0x88>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d102      	bne.n	8003f8c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003f86:	2304      	movs	r3, #4
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	e016      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a12      	ldr	r2, [pc, #72]	; (8003fd8 <DFSDM_GetChannelFromInstance+0x8c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003f94:	2305      	movs	r3, #5
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e00f      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a0f      	ldr	r2, [pc, #60]	; (8003fdc <DFSDM_GetChannelFromInstance+0x90>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d102      	bne.n	8003fa8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003fa2:	2306      	movs	r3, #6
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	e008      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <DFSDM_GetChannelFromInstance+0x94>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d102      	bne.n	8003fb6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003fb0:	2307      	movs	r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e001      	b.n	8003fba <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003fba:	68fb      	ldr	r3, [r7, #12]
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40016000 	.word	0x40016000
 8003fcc:	40016020 	.word	0x40016020
 8003fd0:	40016040 	.word	0x40016040
 8003fd4:	40016080 	.word	0x40016080
 8003fd8:	400160a0 	.word	0x400160a0
 8003fdc:	400160c0 	.word	0x400160c0
 8003fe0:	400160e0 	.word	0x400160e0

08003fe4 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004002:	601a      	str	r2, [r3, #0]
 8004004:	e033      	b.n	800406e <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004024:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800403c:	2b03      	cmp	r3, #3
 800403e:	d116      	bne.n	800406e <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	2b00      	cmp	r3, #0
 8004046:	d107      	bne.n	8004058 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0202 	orr.w	r2, r2, #2
 8004056:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 800405e:	2b01      	cmp	r3, #1
 8004060:	d102      	bne.n	8004068 <DFSDM_RegConvStart+0x84>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004066:	e000      	b.n	800406a <DFSDM_RegConvStart+0x86>
 8004068:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <DFSDM_RegConvStart+0x98>
 8004078:	2202      	movs	r2, #2
 800407a:	e000      	b.n	800407e <DFSDM_RegConvStart+0x9a>
 800407c:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e098      	b.n	80041d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_DMA_Init+0x150>)
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d80f      	bhi.n	80040ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b4b      	ldr	r3, [pc, #300]	; (80041e4 <HAL_DMA_Init+0x154>)
 80040b6:	4413      	add	r3, r2
 80040b8:	4a4b      	ldr	r2, [pc, #300]	; (80041e8 <HAL_DMA_Init+0x158>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	091b      	lsrs	r3, r3, #4
 80040c0:	009a      	lsls	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a48      	ldr	r2, [pc, #288]	; (80041ec <HAL_DMA_Init+0x15c>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
 80040cc:	e00e      	b.n	80040ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_DMA_Init+0x160>)
 80040d6:	4413      	add	r3, r2
 80040d8:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <HAL_DMA_Init+0x158>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	009a      	lsls	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <HAL_DMA_Init+0x164>)
 80040ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800411c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004146:	d039      	beq.n	80041bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a27      	ldr	r2, [pc, #156]	; (80041ec <HAL_DMA_Init+0x15c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d11a      	bne.n	8004188 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <HAL_DMA_Init+0x168>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f003 031c 	and.w	r3, r3, #28
 800415e:	210f      	movs	r1, #15
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	43db      	mvns	r3, r3
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <HAL_DMA_Init+0x168>)
 8004168:	4013      	ands	r3, r2
 800416a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800416c:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_DMA_Init+0x168>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	f003 031c 	and.w	r3, r3, #28
 800417c:	fa01 f303 	lsl.w	r3, r1, r3
 8004180:	491d      	ldr	r1, [pc, #116]	; (80041f8 <HAL_DMA_Init+0x168>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
 8004186:	e019      	b.n	80041bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004188:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_DMA_Init+0x16c>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004190:	f003 031c 	and.w	r3, r3, #28
 8004194:	210f      	movs	r1, #15
 8004196:	fa01 f303 	lsl.w	r3, r1, r3
 800419a:	43db      	mvns	r3, r3
 800419c:	4917      	ldr	r1, [pc, #92]	; (80041fc <HAL_DMA_Init+0x16c>)
 800419e:	4013      	ands	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_DMA_Init+0x16c>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f003 031c 	and.w	r3, r3, #28
 80041b2:	fa01 f303 	lsl.w	r3, r1, r3
 80041b6:	4911      	ldr	r1, [pc, #68]	; (80041fc <HAL_DMA_Init+0x16c>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40020407 	.word	0x40020407
 80041e4:	bffdfff8 	.word	0xbffdfff8
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	40020000 	.word	0x40020000
 80041f0:	bffdfbf8 	.word	0xbffdfbf8
 80041f4:	40020400 	.word	0x40020400
 80041f8:	400200a8 	.word	0x400200a8
 80041fc:	400204a8 	.word	0x400204a8

08004200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_DMA_Start_IT+0x20>
 800421c:	2302      	movs	r3, #2
 800421e:	e04b      	b.n	80042b8 <HAL_DMA_Start_IT+0xb8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b01      	cmp	r3, #1
 8004232:	d13a      	bne.n	80042aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2200      	movs	r2, #0
 8004240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f8e0 	bl	800441e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 020e 	orr.w	r2, r2, #14
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e00f      	b.n	8004298 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 020a 	orr.w	r2, r2, #10
 8004296:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e005      	b.n	80042b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80042b2:	2302      	movs	r3, #2
 80042b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042dc:	f003 031c 	and.w	r3, r3, #28
 80042e0:	2204      	movs	r2, #4
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d026      	beq.n	800433a <HAL_DMA_IRQHandler+0x7a>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d021      	beq.n	800433a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f003 021c 	and.w	r2, r3, #28
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	2104      	movs	r1, #4
 8004322:	fa01 f202 	lsl.w	r2, r1, r2
 8004326:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432c:	2b00      	cmp	r3, #0
 800432e:	d071      	beq.n	8004414 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004338:	e06c      	b.n	8004414 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f003 031c 	and.w	r3, r3, #28
 8004342:	2202      	movs	r2, #2
 8004344:	409a      	lsls	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02e      	beq.n	80043ac <HAL_DMA_IRQHandler+0xec>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d029      	beq.n	80043ac <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 020a 	bic.w	r2, r2, #10
 8004374:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004382:	f003 021c 	and.w	r2, r3, #28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	2102      	movs	r1, #2
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d038      	beq.n	8004414 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043aa:	e033      	b.n	8004414 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f003 031c 	and.w	r3, r3, #28
 80043b4:	2208      	movs	r2, #8
 80043b6:	409a      	lsls	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d02a      	beq.n	8004416 <HAL_DMA_IRQHandler+0x156>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d025      	beq.n	8004416 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 020e 	bic.w	r2, r2, #14
 80043d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f003 021c 	and.w	r2, r3, #28
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004408:	2b00      	cmp	r3, #0
 800440a:	d004      	beq.n	8004416 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004414:	bf00      	nop
 8004416:	bf00      	nop
}
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	f003 021c 	and.w	r2, r3, #28
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	2101      	movs	r1, #1
 800443a:	fa01 f202 	lsl.w	r2, r1, r2
 800443e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b10      	cmp	r3, #16
 800444e:	d108      	bne.n	8004462 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004460:	e007      	b.n	8004472 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	60da      	str	r2, [r3, #12]
}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800448e:	e17f      	b.n	8004790 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	fa01 f303 	lsl.w	r3, r1, r3
 800449c:	4013      	ands	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f000 8171 	beq.w	800478a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d005      	beq.n	80044c0 <HAL_GPIO_Init+0x40>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d130      	bne.n	8004522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4013      	ands	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f6:	2201      	movs	r2, #1
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4013      	ands	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0201 	and.w	r2, r3, #1
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	2b03      	cmp	r3, #3
 800452c:	d118      	bne.n	8004560 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004534:	2201      	movs	r2, #1
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4013      	ands	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f003 0201 	and.w	r2, r3, #1
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b03      	cmp	r3, #3
 800456a:	d017      	beq.n	800459c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	2203      	movs	r2, #3
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 0303 	and.w	r3, r3, #3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d123      	bne.n	80045f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	08da      	lsrs	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3208      	adds	r2, #8
 80045b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	220f      	movs	r2, #15
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	08da      	lsrs	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3208      	adds	r2, #8
 80045ea:	6939      	ldr	r1, [r7, #16]
 80045ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2203      	movs	r2, #3
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	4313      	orrs	r3, r2
 800461c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80ac 	beq.w	800478a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <HAL_GPIO_Init+0x330>)
 8004634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004636:	4a5e      	ldr	r2, [pc, #376]	; (80047b0 <HAL_GPIO_Init+0x330>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6613      	str	r3, [r2, #96]	; 0x60
 800463e:	4b5c      	ldr	r3, [pc, #368]	; (80047b0 <HAL_GPIO_Init+0x330>)
 8004640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800464a:	4a5a      	ldr	r2, [pc, #360]	; (80047b4 <HAL_GPIO_Init+0x334>)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	089b      	lsrs	r3, r3, #2
 8004650:	3302      	adds	r3, #2
 8004652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004656:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	220f      	movs	r2, #15
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004674:	d025      	beq.n	80046c2 <HAL_GPIO_Init+0x242>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a4f      	ldr	r2, [pc, #316]	; (80047b8 <HAL_GPIO_Init+0x338>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01f      	beq.n	80046be <HAL_GPIO_Init+0x23e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a4e      	ldr	r2, [pc, #312]	; (80047bc <HAL_GPIO_Init+0x33c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d019      	beq.n	80046ba <HAL_GPIO_Init+0x23a>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a4d      	ldr	r2, [pc, #308]	; (80047c0 <HAL_GPIO_Init+0x340>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_GPIO_Init+0x236>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4c      	ldr	r2, [pc, #304]	; (80047c4 <HAL_GPIO_Init+0x344>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00d      	beq.n	80046b2 <HAL_GPIO_Init+0x232>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4b      	ldr	r2, [pc, #300]	; (80047c8 <HAL_GPIO_Init+0x348>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <HAL_GPIO_Init+0x22e>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4a      	ldr	r2, [pc, #296]	; (80047cc <HAL_GPIO_Init+0x34c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_GPIO_Init+0x22a>
 80046a6:	2306      	movs	r3, #6
 80046a8:	e00c      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046aa:	2307      	movs	r3, #7
 80046ac:	e00a      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046ae:	2305      	movs	r3, #5
 80046b0:	e008      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046b2:	2304      	movs	r3, #4
 80046b4:	e006      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046b6:	2303      	movs	r3, #3
 80046b8:	e004      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e002      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_GPIO_Init+0x244>
 80046c2:	2300      	movs	r3, #0
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	f002 0203 	and.w	r2, r2, #3
 80046ca:	0092      	lsls	r2, r2, #2
 80046cc:	4093      	lsls	r3, r2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046d4:	4937      	ldr	r1, [pc, #220]	; (80047b4 <HAL_GPIO_Init+0x334>)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	3302      	adds	r3, #2
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046e2:	4b3b      	ldr	r3, [pc, #236]	; (80047d0 <HAL_GPIO_Init+0x350>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	43db      	mvns	r3, r3
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	4013      	ands	r3, r2
 80046f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004706:	4a32      	ldr	r2, [pc, #200]	; (80047d0 <HAL_GPIO_Init+0x350>)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_GPIO_Init+0x350>)
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004730:	4a27      	ldr	r2, [pc, #156]	; (80047d0 <HAL_GPIO_Init+0x350>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_GPIO_Init+0x350>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_GPIO_Init+0x350>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_GPIO_Init+0x350>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	43db      	mvns	r3, r3
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004784:	4a12      	ldr	r2, [pc, #72]	; (80047d0 <HAL_GPIO_Init+0x350>)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3301      	adds	r3, #1
 800478e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	f47f ae78 	bne.w	8004490 <HAL_GPIO_Init+0x10>
  }
}
 80047a0:	bf00      	nop
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	40010000 	.word	0x40010000
 80047b8:	48000400 	.word	0x48000400
 80047bc:	48000800 	.word	0x48000800
 80047c0:	48000c00 	.word	0x48000c00
 80047c4:	48001000 	.word	0x48001000
 80047c8:	48001400 	.word	0x48001400
 80047cc:	48001800 	.word	0x48001800
 80047d0:	40010400 	.word	0x40010400

080047d4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80047e2:	e0cd      	b.n	8004980 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80047e4:	2201      	movs	r2, #1
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	4013      	ands	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80c0 	beq.w	800497a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80047fa:	4a68      	ldr	r2, [pc, #416]	; (800499c <HAL_GPIO_DeInit+0x1c8>)
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	089b      	lsrs	r3, r3, #2
 8004800:	3302      	adds	r3, #2
 8004802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004806:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	220f      	movs	r2, #15
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4013      	ands	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004822:	d025      	beq.n	8004870 <HAL_GPIO_DeInit+0x9c>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a5e      	ldr	r2, [pc, #376]	; (80049a0 <HAL_GPIO_DeInit+0x1cc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d01f      	beq.n	800486c <HAL_GPIO_DeInit+0x98>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a5d      	ldr	r2, [pc, #372]	; (80049a4 <HAL_GPIO_DeInit+0x1d0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d019      	beq.n	8004868 <HAL_GPIO_DeInit+0x94>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a5c      	ldr	r2, [pc, #368]	; (80049a8 <HAL_GPIO_DeInit+0x1d4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_GPIO_DeInit+0x90>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a5b      	ldr	r2, [pc, #364]	; (80049ac <HAL_GPIO_DeInit+0x1d8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00d      	beq.n	8004860 <HAL_GPIO_DeInit+0x8c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a5a      	ldr	r2, [pc, #360]	; (80049b0 <HAL_GPIO_DeInit+0x1dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <HAL_GPIO_DeInit+0x88>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a59      	ldr	r2, [pc, #356]	; (80049b4 <HAL_GPIO_DeInit+0x1e0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d101      	bne.n	8004858 <HAL_GPIO_DeInit+0x84>
 8004854:	2306      	movs	r3, #6
 8004856:	e00c      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 8004858:	2307      	movs	r3, #7
 800485a:	e00a      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 800485c:	2305      	movs	r3, #5
 800485e:	e008      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 8004860:	2304      	movs	r3, #4
 8004862:	e006      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 8004864:	2303      	movs	r3, #3
 8004866:	e004      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 8004868:	2302      	movs	r3, #2
 800486a:	e002      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 800486c:	2301      	movs	r3, #1
 800486e:	e000      	b.n	8004872 <HAL_GPIO_DeInit+0x9e>
 8004870:	2300      	movs	r3, #0
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	f002 0203 	and.w	r2, r2, #3
 8004878:	0092      	lsls	r2, r2, #2
 800487a:	4093      	lsls	r3, r2
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	429a      	cmp	r2, r3
 8004880:	d132      	bne.n	80048e8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004882:	4b4d      	ldr	r3, [pc, #308]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	494b      	ldr	r1, [pc, #300]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 800488c:	4013      	ands	r3, r2
 800488e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004890:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	4947      	ldr	r1, [pc, #284]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 800489a:	4013      	ands	r3, r2
 800489c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800489e:	4b46      	ldr	r3, [pc, #280]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	43db      	mvns	r3, r3
 80048a6:	4944      	ldr	r1, [pc, #272]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80048ac:	4b42      	ldr	r3, [pc, #264]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 80048ae:	689a      	ldr	r2, [r3, #8]
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	43db      	mvns	r3, r3
 80048b4:	4940      	ldr	r1, [pc, #256]	; (80049b8 <HAL_GPIO_DeInit+0x1e4>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f003 0303 	and.w	r3, r3, #3
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	220f      	movs	r2, #15
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80048ca:	4a34      	ldr	r2, [pc, #208]	; (800499c <HAL_GPIO_DeInit+0x1c8>)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	43da      	mvns	r2, r3
 80048da:	4830      	ldr	r0, [pc, #192]	; (800499c <HAL_GPIO_DeInit+0x1c8>)
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	400a      	ands	r2, r1
 80048e2:	3302      	adds	r3, #2
 80048e4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	2103      	movs	r1, #3
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	08da      	lsrs	r2, r3, #3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3208      	adds	r2, #8
 8004904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	220f      	movs	r2, #15
 8004912:	fa02 f303 	lsl.w	r3, r2, r3
 8004916:	43db      	mvns	r3, r3
 8004918:	697a      	ldr	r2, [r7, #20]
 800491a:	08d2      	lsrs	r2, r2, #3
 800491c:	4019      	ands	r1, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	3208      	adds	r2, #8
 8004922:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2103      	movs	r1, #3
 8004930:	fa01 f303 	lsl.w	r3, r1, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	401a      	ands	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	2101      	movs	r1, #1
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2103      	movs	r1, #3
 800495a:	fa01 f303 	lsl.w	r3, r1, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	401a      	ands	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496a:	2101      	movs	r1, #1
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fa01 f303 	lsl.w	r3, r1, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	401a      	ands	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3301      	adds	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa22 f303 	lsr.w	r3, r2, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	f47f af2b 	bne.w	80047e4 <HAL_GPIO_DeInit+0x10>
  }
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	40010000 	.word	0x40010000
 80049a0:	48000400 	.word	0x48000400
 80049a4:	48000800 	.word	0x48000800
 80049a8:	48000c00 	.word	0x48000c00
 80049ac:	48001000 	.word	0x48001000
 80049b0:	48001400 	.word	0x48001400
 80049b4:	48001800 	.word	0x48001800
 80049b8:	40010400 	.word	0x40010400

080049bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691a      	ldr	r2, [r3, #16]
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	4013      	ands	r3, r2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049d4:	2301      	movs	r3, #1
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e001      	b.n	80049de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	460b      	mov	r3, r1
 80049f6:	807b      	strh	r3, [r7, #2]
 80049f8:	4613      	mov	r3, r2
 80049fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049fc:	787b      	ldrb	r3, [r7, #1]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a02:	887a      	ldrh	r2, [r7, #2]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a08:	e002      	b.n	8004a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a0a:	887a      	ldrh	r2, [r7, #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	4603      	mov	r3, r0
 8004a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a26:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a28:	695a      	ldr	r2, [r3, #20]
 8004a2a:	88fb      	ldrh	r3, [r7, #6]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d006      	beq.n	8004a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a32:	4a05      	ldr	r2, [pc, #20]	; (8004a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f806 	bl	8004a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40010400 	.word	0x40010400

08004a4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	4603      	mov	r3, r0
 8004a54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a68:	4b04      	ldr	r3, [pc, #16]	; (8004a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40007000 	.word	0x40007000

08004a80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8e:	d130      	bne.n	8004af2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a90:	4b23      	ldr	r3, [pc, #140]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a9c:	d038      	beq.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a9e:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aae:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2232      	movs	r2, #50	; 0x32
 8004ab4:	fb02 f303 	mul.w	r3, r2, r3
 8004ab8:	4a1b      	ldr	r2, [pc, #108]	; (8004b28 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004aba:	fba2 2303 	umull	r2, r3, r2, r3
 8004abe:	0c9b      	lsrs	r3, r3, #18
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac4:	e002      	b.n	8004acc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad8:	d102      	bne.n	8004ae0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f2      	bne.n	8004ac6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aec:	d110      	bne.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004af2:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afe:	d007      	beq.n	8004b10 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b00:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b08:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b0e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40007000 	.word	0x40007000
 8004b24:	20000000 	.word	0x20000000
 8004b28:	431bde83 	.word	0x431bde83

08004b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e3ca      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b3e:	4b97      	ldr	r3, [pc, #604]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 030c 	and.w	r3, r3, #12
 8004b46:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b48:	4b94      	ldr	r3, [pc, #592]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80e4 	beq.w	8004d28 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4a>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	f040 808b 	bne.w	8004c84 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	f040 8087 	bne.w	8004c84 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b76:	4b89      	ldr	r3, [pc, #548]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d005      	beq.n	8004b8e <HAL_RCC_OscConfig+0x62>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e3a2      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1a      	ldr	r2, [r3, #32]
 8004b92:	4b82      	ldr	r3, [pc, #520]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x7c>
 8004b9e:	4b7f      	ldr	r3, [pc, #508]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ba6:	e005      	b.n	8004bb4 <HAL_RCC_OscConfig+0x88>
 8004ba8:	4b7c      	ldr	r3, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d223      	bcs.n	8004c00 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1b      	ldr	r3, [r3, #32]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fd55 	bl	800566c <RCC_SetFlashLatencyFromMSIRange>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e383      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bcc:	4b73      	ldr	r3, [pc, #460]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a72      	ldr	r2, [pc, #456]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bd2:	f043 0308 	orr.w	r3, r3, #8
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b70      	ldr	r3, [pc, #448]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	496d      	ldr	r1, [pc, #436]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bea:	4b6c      	ldr	r3, [pc, #432]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	4968      	ldr	r1, [pc, #416]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	604b      	str	r3, [r1, #4]
 8004bfe:	e025      	b.n	8004c4c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c00:	4b66      	ldr	r3, [pc, #408]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c06:	f043 0308 	orr.w	r3, r3, #8
 8004c0a:	6013      	str	r3, [r2, #0]
 8004c0c:	4b63      	ldr	r3, [pc, #396]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a1b      	ldr	r3, [r3, #32]
 8004c18:	4960      	ldr	r1, [pc, #384]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	495b      	ldr	r1, [pc, #364]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d109      	bne.n	8004c4c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fd15 	bl	800566c <RCC_SetFlashLatencyFromMSIRange>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e343      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c4c:	f000 fc4a 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b52      	ldr	r3, [pc, #328]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	4950      	ldr	r1, [pc, #320]	; (8004da0 <HAL_RCC_OscConfig+0x274>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	4a4e      	ldr	r2, [pc, #312]	; (8004da4 <HAL_RCC_OscConfig+0x278>)
 8004c6a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c6c:	4b4e      	ldr	r3, [pc, #312]	; (8004da8 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7fe fd3f 	bl	80036f4 <HAL_InitTick>
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d052      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	e327      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d032      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c8c:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a42      	ldr	r2, [pc, #264]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004c92:	f043 0301 	orr.w	r3, r3, #1
 8004c96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c98:	f7fe fd7c 	bl	8003794 <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ca0:	f7fe fd78 	bl	8003794 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e310      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0f0      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cbe:	4b37      	ldr	r3, [pc, #220]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a36      	ldr	r2, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cc4:	f043 0308 	orr.w	r3, r3, #8
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	4931      	ldr	r1, [pc, #196]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	492c      	ldr	r1, [pc, #176]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	604b      	str	r3, [r1, #4]
 8004cf0:	e01a      	b.n	8004d28 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cfe:	f7fe fd49 	bl	8003794 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d06:	f7fe fd45 	bl	8003794 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e2dd      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d18:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1f0      	bne.n	8004d06 <HAL_RCC_OscConfig+0x1da>
 8004d24:	e000      	b.n	8004d28 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d26:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d074      	beq.n	8004e1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d005      	beq.n	8004d46 <HAL_RCC_OscConfig+0x21a>
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	2b0c      	cmp	r3, #12
 8004d3e:	d10e      	bne.n	8004d5e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d10b      	bne.n	8004d5e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d064      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2f0>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d160      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e2ba      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x24a>
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	e026      	b.n	8004dc4 <HAL_RCC_OscConfig+0x298>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d7e:	d115      	bne.n	8004dac <HAL_RCC_OscConfig+0x280>
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d8a:	6013      	str	r3, [r2, #0]
 8004d8c:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a02      	ldr	r2, [pc, #8]	; (8004d9c <HAL_RCC_OscConfig+0x270>)
 8004d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	e014      	b.n	8004dc4 <HAL_RCC_OscConfig+0x298>
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	08009da8 	.word	0x08009da8
 8004da4:	20000000 	.word	0x20000000
 8004da8:	20000004 	.word	0x20000004
 8004dac:	4ba0      	ldr	r3, [pc, #640]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a9f      	ldr	r2, [pc, #636]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a9c      	ldr	r2, [pc, #624]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d013      	beq.n	8004df4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fe fce2 	bl	8003794 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dd4:	f7fe fcde 	bl	8003794 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b64      	cmp	r3, #100	; 0x64
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e276      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de6:	4b92      	ldr	r3, [pc, #584]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2a8>
 8004df2:	e014      	b.n	8004e1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fe fcce 	bl	8003794 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fe fcca 	bl	8003794 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e262      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e0e:	4b88      	ldr	r3, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1f0      	bne.n	8004dfc <HAL_RCC_OscConfig+0x2d0>
 8004e1a:	e000      	b.n	8004e1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d060      	beq.n	8004eec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_OscConfig+0x310>
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d116      	bne.n	8004e6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3c:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d005      	beq.n	8004e54 <HAL_RCC_OscConfig+0x328>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e23f      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	4b76      	ldr	r3, [pc, #472]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	061b      	lsls	r3, r3, #24
 8004e62:	4973      	ldr	r1, [pc, #460]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e68:	e040      	b.n	8004eec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d023      	beq.n	8004eba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e72:	4b6f      	ldr	r3, [pc, #444]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6e      	ldr	r2, [pc, #440]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7fe fc89 	bl	8003794 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e86:	f7fe fc85 	bl	8003794 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e21d      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e98:	4b65      	ldr	r3, [pc, #404]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0f0      	beq.n	8004e86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea4:	4b62      	ldr	r3, [pc, #392]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	495f      	ldr	r1, [pc, #380]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e018      	b.n	8004eec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004eba:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a5c      	ldr	r2, [pc, #368]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fe fc65 	bl	8003794 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fe fc61 	bl	8003794 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e1f9      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee0:	4b53      	ldr	r3, [pc, #332]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d03c      	beq.n	8004f72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f06:	4a4a      	ldr	r2, [pc, #296]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f08:	f043 0301 	orr.w	r3, r3, #1
 8004f0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f10:	f7fe fc40 	bl	8003794 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f18:	f7fe fc3c 	bl	8003794 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e1d4      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f2a:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ef      	beq.n	8004f18 <HAL_RCC_OscConfig+0x3ec>
 8004f38:	e01b      	b.n	8004f72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f40:	4a3b      	ldr	r2, [pc, #236]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f42:	f023 0301 	bic.w	r3, r3, #1
 8004f46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f4a:	f7fe fc23 	bl	8003794 <HAL_GetTick>
 8004f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f52:	f7fe fc1f 	bl	8003794 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1b7      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1ef      	bne.n	8004f52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80a6 	beq.w	80050cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f80:	2300      	movs	r3, #0
 8004f82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f84:	4b2a      	ldr	r3, [pc, #168]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	4a26      	ldr	r2, [pc, #152]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d118      	bne.n	8004fea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc4:	f7fe fbe6 	bl	8003794 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fcc:	f7fe fbe2 	bl	8003794 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e17a      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_RCC_OscConfig+0x508>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d108      	bne.n	8005004 <HAL_RCC_OscConfig+0x4d8>
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005002:	e029      	b.n	8005058 <HAL_RCC_OscConfig+0x52c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b05      	cmp	r3, #5
 800500a:	d115      	bne.n	8005038 <HAL_RCC_OscConfig+0x50c>
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 800500e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005012:	4a07      	ldr	r2, [pc, #28]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005022:	4a03      	ldr	r2, [pc, #12]	; (8005030 <HAL_RCC_OscConfig+0x504>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502c:	e014      	b.n	8005058 <HAL_RCC_OscConfig+0x52c>
 800502e:	bf00      	nop
 8005030:	40021000 	.word	0x40021000
 8005034:	40007000 	.word	0x40007000
 8005038:	4b9c      	ldr	r3, [pc, #624]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	4a9b      	ldr	r2, [pc, #620]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005048:	4b98      	ldr	r3, [pc, #608]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	4a97      	ldr	r2, [pc, #604]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005050:	f023 0304 	bic.w	r3, r3, #4
 8005054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d016      	beq.n	800508e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005060:	f7fe fb98 	bl	8003794 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	e00a      	b.n	800507e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005068:	f7fe fb94 	bl	8003794 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	f241 3288 	movw	r2, #5000	; 0x1388
 8005076:	4293      	cmp	r3, r2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e12a      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507e:	4b8b      	ldr	r3, [pc, #556]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ed      	beq.n	8005068 <HAL_RCC_OscConfig+0x53c>
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508e:	f7fe fb81 	bl	8003794 <HAL_GetTick>
 8005092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005094:	e00a      	b.n	80050ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fe fb7d 	bl	8003794 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d901      	bls.n	80050ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e113      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050ac:	4b7f      	ldr	r3, [pc, #508]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ed      	bne.n	8005096 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ba:	7ffb      	ldrb	r3, [r7, #31]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d105      	bne.n	80050cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050c0:	4b7a      	ldr	r3, [pc, #488]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	4a79      	ldr	r2, [pc, #484]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80050c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80fe 	beq.w	80052d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	2b02      	cmp	r3, #2
 80050dc:	f040 80d0 	bne.w	8005280 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050e0:	4b72      	ldr	r3, [pc, #456]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 0203 	and.w	r2, r3, #3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d130      	bne.n	8005156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fe:	3b01      	subs	r3, #1
 8005100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005102:	429a      	cmp	r2, r3
 8005104:	d127      	bne.n	8005156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d11f      	bne.n	8005156 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005120:	2a07      	cmp	r2, #7
 8005122:	bf14      	ite	ne
 8005124:	2201      	movne	r2, #1
 8005126:	2200      	moveq	r2, #0
 8005128:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800512a:	4293      	cmp	r3, r2
 800512c:	d113      	bne.n	8005156 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	3b01      	subs	r3, #1
 800513c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800513e:	429a      	cmp	r2, r3
 8005140:	d109      	bne.n	8005156 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	085b      	lsrs	r3, r3, #1
 800514e:	3b01      	subs	r3, #1
 8005150:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005152:	429a      	cmp	r2, r3
 8005154:	d06e      	beq.n	8005234 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b0c      	cmp	r3, #12
 800515a:	d069      	beq.n	8005230 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800515c:	4b53      	ldr	r3, [pc, #332]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d105      	bne.n	8005174 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e0ad      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005178:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a4b      	ldr	r2, [pc, #300]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800517e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005182:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005184:	f7fe fb06 	bl	8003794 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518c:	f7fe fb02 	bl	8003794 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e09a      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800519e:	4b43      	ldr	r3, [pc, #268]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1f0      	bne.n	800518c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051aa:	4b40      	ldr	r3, [pc, #256]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	4b40      	ldr	r3, [pc, #256]	; (80052b0 <HAL_RCC_OscConfig+0x784>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051ba:	3a01      	subs	r2, #1
 80051bc:	0112      	lsls	r2, r2, #4
 80051be:	4311      	orrs	r1, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c4:	0212      	lsls	r2, r2, #8
 80051c6:	4311      	orrs	r1, r2
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051cc:	0852      	lsrs	r2, r2, #1
 80051ce:	3a01      	subs	r2, #1
 80051d0:	0552      	lsls	r2, r2, #21
 80051d2:	4311      	orrs	r1, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051d8:	0852      	lsrs	r2, r2, #1
 80051da:	3a01      	subs	r2, #1
 80051dc:	0652      	lsls	r2, r2, #25
 80051de:	4311      	orrs	r1, r2
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e4:	0912      	lsrs	r2, r2, #4
 80051e6:	0452      	lsls	r2, r2, #17
 80051e8:	430a      	orrs	r2, r1
 80051ea:	4930      	ldr	r1, [pc, #192]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051f0:	4b2e      	ldr	r3, [pc, #184]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a2d      	ldr	r2, [pc, #180]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80051f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051fc:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4a2a      	ldr	r2, [pc, #168]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005208:	f7fe fac4 	bl	8003794 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7fe fac0 	bl	8003794 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e058      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	4b22      	ldr	r3, [pc, #136]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800522e:	e050      	b.n	80052d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e04f      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d148      	bne.n	80052d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005240:	4b1a      	ldr	r3, [pc, #104]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a19      	ldr	r2, [pc, #100]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800524c:	4b17      	ldr	r3, [pc, #92]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a16      	ldr	r2, [pc, #88]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005258:	f7fe fa9c 	bl	8003794 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fe fa98 	bl	8003794 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e030      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005272:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x734>
 800527e:	e028      	b.n	80052d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d023      	beq.n	80052ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <HAL_RCC_OscConfig+0x780>)
 800528c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005290:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005292:	f7fe fa7f 	bl	8003794 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005298:	e00c      	b.n	80052b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529a:	f7fe fa7b 	bl	8003794 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d905      	bls.n	80052b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e013      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
 80052ac:	40021000 	.word	0x40021000
 80052b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <HAL_RCC_OscConfig+0x7b0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ec      	bne.n	800529a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_RCC_OscConfig+0x7b0>)
 80052c2:	68da      	ldr	r2, [r3, #12]
 80052c4:	4905      	ldr	r1, [pc, #20]	; (80052dc <HAL_RCC_OscConfig+0x7b0>)
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x7b4>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	60cb      	str	r3, [r1, #12]
 80052cc:	e001      	b.n	80052d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40021000 	.word	0x40021000
 80052e0:	feeefffc 	.word	0xfeeefffc

080052e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0e7      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f8:	4b75      	ldr	r3, [pc, #468]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d910      	bls.n	8005328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b72      	ldr	r3, [pc, #456]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 0207 	bic.w	r2, r3, #7
 800530e:	4970      	ldr	r1, [pc, #448]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b6e      	ldr	r3, [pc, #440]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0cf      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d010      	beq.n	8005356 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	4b66      	ldr	r3, [pc, #408]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005340:	429a      	cmp	r2, r3
 8005342:	d908      	bls.n	8005356 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005344:	4b63      	ldr	r3, [pc, #396]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4960      	ldr	r1, [pc, #384]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005352:	4313      	orrs	r3, r2
 8005354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d04c      	beq.n	80053fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b03      	cmp	r3, #3
 8005368:	d107      	bne.n	800537a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	4b5a      	ldr	r3, [pc, #360]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d121      	bne.n	80053ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e0a6      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d107      	bne.n	8005392 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005382:	4b54      	ldr	r3, [pc, #336]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d115      	bne.n	80053ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e09a      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d107      	bne.n	80053aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800539a:	4b4e      	ldr	r3, [pc, #312]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e08e      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053aa:	4b4a      	ldr	r3, [pc, #296]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e086      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053ba:	4b46      	ldr	r3, [pc, #280]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f023 0203 	bic.w	r2, r3, #3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	4943      	ldr	r1, [pc, #268]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053cc:	f7fe f9e2 	bl	8003794 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d2:	e00a      	b.n	80053ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d4:	f7fe f9de 	bl	8003794 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e06e      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ea:	4b3a      	ldr	r3, [pc, #232]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 020c 	and.w	r2, r3, #12
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d1eb      	bne.n	80053d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005414:	429a      	cmp	r2, r3
 8005416:	d208      	bcs.n	800542a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005418:	4b2e      	ldr	r3, [pc, #184]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	492b      	ldr	r1, [pc, #172]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005426:	4313      	orrs	r3, r2
 8005428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800542a:	4b29      	ldr	r3, [pc, #164]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d210      	bcs.n	800545a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f023 0207 	bic.w	r2, r3, #7
 8005440:	4923      	ldr	r1, [pc, #140]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	4313      	orrs	r3, r2
 8005446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005448:	4b21      	ldr	r3, [pc, #132]	; (80054d0 <HAL_RCC_ClockConfig+0x1ec>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d001      	beq.n	800545a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e036      	b.n	80054c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b00      	cmp	r3, #0
 8005464:	d008      	beq.n	8005478 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005466:	4b1b      	ldr	r3, [pc, #108]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	4918      	ldr	r1, [pc, #96]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0308 	and.w	r3, r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005484:	4b13      	ldr	r3, [pc, #76]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4910      	ldr	r1, [pc, #64]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 8005494:	4313      	orrs	r3, r2
 8005496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005498:	f000 f824 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <HAL_RCC_ClockConfig+0x1f0>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	490b      	ldr	r1, [pc, #44]	; (80054d8 <HAL_RCC_ClockConfig+0x1f4>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	fa22 f303 	lsr.w	r3, r2, r3
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <HAL_RCC_ClockConfig+0x1f8>)
 80054b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_ClockConfig+0x1fc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe f919 	bl	80036f4 <HAL_InitTick>
 80054c2:	4603      	mov	r3, r0
 80054c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80054c6:	7afb      	ldrb	r3, [r7, #11]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40022000 	.word	0x40022000
 80054d4:	40021000 	.word	0x40021000
 80054d8:	08009da8 	.word	0x08009da8
 80054dc:	20000000 	.word	0x20000000
 80054e0:	20000004 	.word	0x20000004

080054e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b089      	sub	sp, #36	; 0x24
 80054e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054f2:	4b3e      	ldr	r3, [pc, #248]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054fc:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d005      	beq.n	8005518 <HAL_RCC_GetSysClockFreq+0x34>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	d121      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d11e      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005518:	4b34      	ldr	r3, [pc, #208]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005524:	4b31      	ldr	r3, [pc, #196]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552a:	0a1b      	lsrs	r3, r3, #8
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e005      	b.n	8005540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005534:	4b2d      	ldr	r3, [pc, #180]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005540:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10d      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005554:	e00a      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	2b04      	cmp	r3, #4
 800555a:	d102      	bne.n	8005562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e004      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d101      	bne.n	800556c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005568:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800556a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d134      	bne.n	80055dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005572:	4b1e      	ldr	r3, [pc, #120]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d003      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0xa6>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d003      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0xac>
 8005588:	e005      	b.n	8005596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800558a:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800558c:	617b      	str	r3, [r7, #20]
      break;
 800558e:	e005      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005592:	617b      	str	r3, [r7, #20]
      break;
 8005594:	e002      	b.n	800559c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	617b      	str	r3, [r7, #20]
      break;
 800559a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800559c:	4b13      	ldr	r3, [pc, #76]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	091b      	lsrs	r3, r3, #4
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	3301      	adds	r3, #1
 80055a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	fb03 f202 	mul.w	r2, r3, r2
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055c2:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <HAL_RCC_GetSysClockFreq+0x108>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	0e5b      	lsrs	r3, r3, #25
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	3301      	adds	r3, #1
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055dc:	69bb      	ldr	r3, [r7, #24]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3724      	adds	r7, #36	; 0x24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40021000 	.word	0x40021000
 80055f0:	08009dc0 	.word	0x08009dc0
 80055f4:	00f42400 	.word	0x00f42400
 80055f8:	007a1200 	.word	0x007a1200

080055fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005600:	4b03      	ldr	r3, [pc, #12]	; (8005610 <HAL_RCC_GetHCLKFreq+0x14>)
 8005602:	681b      	ldr	r3, [r3, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	20000000 	.word	0x20000000

08005614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005618:	f7ff fff0 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 800561c:	4602      	mov	r2, r0
 800561e:	4b06      	ldr	r3, [pc, #24]	; (8005638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	0a1b      	lsrs	r3, r3, #8
 8005624:	f003 0307 	and.w	r3, r3, #7
 8005628:	4904      	ldr	r1, [pc, #16]	; (800563c <HAL_RCC_GetPCLK1Freq+0x28>)
 800562a:	5ccb      	ldrb	r3, [r1, r3]
 800562c:	f003 031f 	and.w	r3, r3, #31
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005634:	4618      	mov	r0, r3
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40021000 	.word	0x40021000
 800563c:	08009db8 	.word	0x08009db8

08005640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005644:	f7ff ffda 	bl	80055fc <HAL_RCC_GetHCLKFreq>
 8005648:	4602      	mov	r2, r0
 800564a:	4b06      	ldr	r3, [pc, #24]	; (8005664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	0adb      	lsrs	r3, r3, #11
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	4904      	ldr	r1, [pc, #16]	; (8005668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005656:	5ccb      	ldrb	r3, [r1, r3]
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005660:	4618      	mov	r0, r3
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000
 8005668:	08009db8 	.word	0x08009db8

0800566c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005678:	4b2a      	ldr	r3, [pc, #168]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800567a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005684:	f7ff f9ee 	bl	8004a64 <HAL_PWREx_GetVoltageRange>
 8005688:	6178      	str	r0, [r7, #20]
 800568a:	e014      	b.n	80056b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	4a24      	ldr	r2, [pc, #144]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6593      	str	r3, [r2, #88]	; 0x58
 8005698:	4b22      	ldr	r3, [pc, #136]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056a4:	f7ff f9de 	bl	8004a64 <HAL_PWREx_GetVoltageRange>
 80056a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056aa:	4b1e      	ldr	r3, [pc, #120]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ae:	4a1d      	ldr	r2, [pc, #116]	; (8005724 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056bc:	d10b      	bne.n	80056d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d919      	bls.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2ba0      	cmp	r3, #160	; 0xa0
 80056c8:	d902      	bls.n	80056d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056ca:	2302      	movs	r3, #2
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	e013      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056d0:	2301      	movs	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	e010      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	d902      	bls.n	80056e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056dc:	2303      	movs	r3, #3
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	e00a      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b80      	cmp	r3, #128	; 0x80
 80056e6:	d102      	bne.n	80056ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e8:	2302      	movs	r3, #2
 80056ea:	613b      	str	r3, [r7, #16]
 80056ec:	e004      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b70      	cmp	r3, #112	; 0x70
 80056f2:	d101      	bne.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056f4:	2301      	movs	r3, #1
 80056f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f023 0207 	bic.w	r2, r3, #7
 8005700:	4909      	ldr	r1, [pc, #36]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	429a      	cmp	r2, r3
 8005714:	d001      	beq.n	800571a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e000      	b.n	800571c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40021000 	.word	0x40021000
 8005728:	40022000 	.word	0x40022000

0800572c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005734:	2300      	movs	r3, #0
 8005736:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005738:	2300      	movs	r3, #0
 800573a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005744:	2b00      	cmp	r3, #0
 8005746:	d041      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800574c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005750:	d02a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005752:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005756:	d824      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005758:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800575c:	d008      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800575e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005762:	d81e      	bhi.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00a      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800576c:	d010      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800576e:	e018      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005770:	4b86      	ldr	r3, [pc, #536]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a85      	ldr	r2, [pc, #532]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800577a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800577c:	e015      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	2100      	movs	r1, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fabb 	bl	8005d00 <RCCEx_PLLSAI1_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800578e:	e00c      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3320      	adds	r3, #32
 8005794:	2100      	movs	r1, #0
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fba6 	bl	8005ee8 <RCCEx_PLLSAI2_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057a0:	e003      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	74fb      	strb	r3, [r7, #19]
      break;
 80057a6:	e000      	b.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057aa:	7cfb      	ldrb	r3, [r7, #19]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057b0:	4b76      	ldr	r3, [pc, #472]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057be:	4973      	ldr	r1, [pc, #460]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057c0:	4313      	orrs	r3, r2
 80057c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057c6:	e001      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c8:	7cfb      	ldrb	r3, [r7, #19]
 80057ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d041      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057e0:	d02a      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057e6:	d824      	bhi.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057ec:	d008      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057f2:	d81e      	bhi.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80057f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057fc:	d010      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80057fe:	e018      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005800:	4b62      	ldr	r3, [pc, #392]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a61      	ldr	r2, [pc, #388]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800580c:	e015      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	2100      	movs	r1, #0
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fa73 	bl	8005d00 <RCCEx_PLLSAI1_Config>
 800581a:	4603      	mov	r3, r0
 800581c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800581e:	e00c      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3320      	adds	r3, #32
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fb5e 	bl	8005ee8 <RCCEx_PLLSAI2_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005830:	e003      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	74fb      	strb	r3, [r7, #19]
      break;
 8005836:	e000      	b.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800583a:	7cfb      	ldrb	r3, [r7, #19]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10b      	bne.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005840:	4b52      	ldr	r3, [pc, #328]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800584e:	494f      	ldr	r1, [pc, #316]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005856:	e001      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80a0 	beq.w	80059aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586a:	2300      	movs	r3, #0
 800586c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800586e:	4b47      	ldr	r3, [pc, #284]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00d      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005884:	4b41      	ldr	r3, [pc, #260]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	4a40      	ldr	r2, [pc, #256]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588e:	6593      	str	r3, [r2, #88]	; 0x58
 8005890:	4b3e      	ldr	r3, [pc, #248]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800589c:	2301      	movs	r3, #1
 800589e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058a0:	4b3b      	ldr	r3, [pc, #236]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a3a      	ldr	r2, [pc, #232]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058ac:	f7fd ff72 	bl	8003794 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058b2:	e009      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b4:	f7fd ff6e 	bl	8003794 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d902      	bls.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	74fb      	strb	r3, [r7, #19]
        break;
 80058c6:	e005      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058c8:	4b31      	ldr	r3, [pc, #196]	; (8005990 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0ef      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058d4:	7cfb      	ldrb	r3, [r7, #19]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d15c      	bne.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058da:	4b2c      	ldr	r3, [pc, #176]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01f      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d019      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058f8:	4b24      	ldr	r3, [pc, #144]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005902:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005904:	4b21      	ldr	r3, [pc, #132]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	4a20      	ldr	r2, [pc, #128]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800590c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005914:	4b1d      	ldr	r3, [pc, #116]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	4a1c      	ldr	r2, [pc, #112]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800591c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fd ff2d 	bl	8003794 <HAL_GetTick>
 800593a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593c:	e00b      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fd ff29 	bl	8003794 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d902      	bls.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	74fb      	strb	r3, [r7, #19]
            break;
 8005954:	e006      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005956:	4b0d      	ldr	r3, [pc, #52]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0ec      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005964:	7cfb      	ldrb	r3, [r7, #19]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10c      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800596a:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800597a:	4904      	ldr	r1, [pc, #16]	; (800598c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005982:	e009      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	74bb      	strb	r3, [r7, #18]
 8005988:	e006      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800598a:	bf00      	nop
 800598c:	40021000 	.word	0x40021000
 8005990:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005994:	7cfb      	ldrb	r3, [r7, #19]
 8005996:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005998:	7c7b      	ldrb	r3, [r7, #17]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599e:	4b9e      	ldr	r3, [pc, #632]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	4a9d      	ldr	r2, [pc, #628]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059b6:	4b98      	ldr	r3, [pc, #608]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f023 0203 	bic.w	r2, r3, #3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	4994      	ldr	r1, [pc, #592]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00a      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059d8:	4b8f      	ldr	r3, [pc, #572]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059de:	f023 020c 	bic.w	r2, r3, #12
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	498c      	ldr	r1, [pc, #560]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00a      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059fa:	4b87      	ldr	r3, [pc, #540]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	4983      	ldr	r1, [pc, #524]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a1c:	4b7e      	ldr	r3, [pc, #504]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	497b      	ldr	r1, [pc, #492]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0310 	and.w	r3, r3, #16
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a3e:	4b76      	ldr	r3, [pc, #472]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a4c:	4972      	ldr	r1, [pc, #456]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00a      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a60:	4b6d      	ldr	r3, [pc, #436]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	496a      	ldr	r1, [pc, #424]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a82:	4b65      	ldr	r3, [pc, #404]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a90:	4961      	ldr	r1, [pc, #388]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00a      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005aa4:	4b5c      	ldr	r3, [pc, #368]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab2:	4959      	ldr	r1, [pc, #356]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ac6:	4b54      	ldr	r3, [pc, #336]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	4950      	ldr	r1, [pc, #320]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ae8:	4b4b      	ldr	r3, [pc, #300]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	4948      	ldr	r1, [pc, #288]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b0a:	4b43      	ldr	r3, [pc, #268]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b18:	493f      	ldr	r1, [pc, #252]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d028      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b2c:	4b3a      	ldr	r3, [pc, #232]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3a:	4937      	ldr	r1, [pc, #220]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b4a:	d106      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b4c:	4b32      	ldr	r3, [pc, #200]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	4a31      	ldr	r2, [pc, #196]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b56:	60d3      	str	r3, [r2, #12]
 8005b58:	e011      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b62:	d10c      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	2101      	movs	r1, #1
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f8c8 	bl	8005d00 <RCCEx_PLLSAI1_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d028      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b8a:	4b23      	ldr	r3, [pc, #140]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	491f      	ldr	r1, [pc, #124]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005baa:	4b1b      	ldr	r3, [pc, #108]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb4:	60d3      	str	r3, [r2, #12]
 8005bb6:	e011      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f000 f899 	bl	8005d00 <RCCEx_PLLSAI1_Config>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bd2:	7cfb      	ldrb	r3, [r7, #19]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bd8:	7cfb      	ldrb	r3, [r7, #19]
 8005bda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d02b      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005be8:	4b0b      	ldr	r3, [pc, #44]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf6:	4908      	ldr	r1, [pc, #32]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c06:	d109      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4a02      	ldr	r2, [pc, #8]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c12:	60d3      	str	r3, [r2, #12]
 8005c14:	e014      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c24:	d10c      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 f867 	bl	8005d00 <RCCEx_PLLSAI1_Config>
 8005c32:	4603      	mov	r3, r0
 8005c34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c36:	7cfb      	ldrb	r3, [r7, #19]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c3c:	7cfb      	ldrb	r3, [r7, #19]
 8005c3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d02f      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c4c:	4b2b      	ldr	r3, [pc, #172]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c5a:	4928      	ldr	r1, [pc, #160]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c6a:	d10d      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f844 	bl	8005d00 <RCCEx_PLLSAI1_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c7c:	7cfb      	ldrb	r3, [r7, #19]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d014      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c82:	7cfb      	ldrb	r3, [r7, #19]
 8005c84:	74bb      	strb	r3, [r7, #18]
 8005c86:	e011      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c90:	d10c      	bne.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3320      	adds	r3, #32
 8005c96:	2102      	movs	r1, #2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 f925 	bl	8005ee8 <RCCEx_PLLSAI2_Config>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ca2:	7cfb      	ldrb	r3, [r7, #19]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc6:	490d      	ldr	r1, [pc, #52]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00b      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cda:	4b08      	ldr	r3, [pc, #32]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cea:	4904      	ldr	r1, [pc, #16]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cf2:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40021000 	.word	0x40021000

08005d00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d0e:	4b75      	ldr	r3, [pc, #468]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d018      	beq.n	8005d4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d1a:	4b72      	ldr	r3, [pc, #456]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f003 0203 	and.w	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d10d      	bne.n	8005d46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d32:	4b6c      	ldr	r3, [pc, #432]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
       ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d047      	beq.n	8005dd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
 8005d4a:	e044      	b.n	8005dd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d018      	beq.n	8005d86 <RCCEx_PLLSAI1_Config+0x86>
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d825      	bhi.n	8005da4 <RCCEx_PLLSAI1_Config+0xa4>
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d002      	beq.n	8005d62 <RCCEx_PLLSAI1_Config+0x62>
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d009      	beq.n	8005d74 <RCCEx_PLLSAI1_Config+0x74>
 8005d60:	e020      	b.n	8005da4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d62:	4b60      	ldr	r3, [pc, #384]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11d      	bne.n	8005daa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d72:	e01a      	b.n	8005daa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d74:	4b5b      	ldr	r3, [pc, #364]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d116      	bne.n	8005dae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d84:	e013      	b.n	8005dae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d86:	4b57      	ldr	r3, [pc, #348]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10f      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d92:	4b54      	ldr	r3, [pc, #336]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005da2:	e006      	b.n	8005db2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
      break;
 8005da8:	e004      	b.n	8005db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005daa:	bf00      	nop
 8005dac:	e002      	b.n	8005db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005db2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10d      	bne.n	8005dd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dba:	4b4a      	ldr	r3, [pc, #296]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6819      	ldr	r1, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	4944      	ldr	r1, [pc, #272]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d17d      	bne.n	8005ed8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ddc:	4b41      	ldr	r3, [pc, #260]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a40      	ldr	r2, [pc, #256]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005de6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de8:	f7fd fcd4 	bl	8003794 <HAL_GetTick>
 8005dec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005dee:	e009      	b.n	8005e04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df0:	f7fd fcd0 	bl	8003794 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d902      	bls.n	8005e04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	73fb      	strb	r3, [r7, #15]
        break;
 8005e02:	e005      	b.n	8005e10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e04:	4b37      	ldr	r3, [pc, #220]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1ef      	bne.n	8005df0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e10:	7bfb      	ldrb	r3, [r7, #15]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d160      	bne.n	8005ed8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d111      	bne.n	8005e40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e1c:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6892      	ldr	r2, [r2, #8]
 8005e2c:	0211      	lsls	r1, r2, #8
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68d2      	ldr	r2, [r2, #12]
 8005e32:	0912      	lsrs	r2, r2, #4
 8005e34:	0452      	lsls	r2, r2, #17
 8005e36:	430a      	orrs	r2, r1
 8005e38:	492a      	ldr	r1, [pc, #168]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	610b      	str	r3, [r1, #16]
 8005e3e:	e027      	b.n	8005e90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d112      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e46:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	6892      	ldr	r2, [r2, #8]
 8005e56:	0211      	lsls	r1, r2, #8
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6912      	ldr	r2, [r2, #16]
 8005e5c:	0852      	lsrs	r2, r2, #1
 8005e5e:	3a01      	subs	r2, #1
 8005e60:	0552      	lsls	r2, r2, #21
 8005e62:	430a      	orrs	r2, r1
 8005e64:	491f      	ldr	r1, [pc, #124]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	610b      	str	r3, [r1, #16]
 8005e6a:	e011      	b.n	8005e90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6892      	ldr	r2, [r2, #8]
 8005e7c:	0211      	lsls	r1, r2, #8
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6952      	ldr	r2, [r2, #20]
 8005e82:	0852      	lsrs	r2, r2, #1
 8005e84:	3a01      	subs	r2, #1
 8005e86:	0652      	lsls	r2, r2, #25
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	4916      	ldr	r1, [pc, #88]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e90:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9c:	f7fd fc7a 	bl	8003794 <HAL_GetTick>
 8005ea0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ea2:	e009      	b.n	8005eb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ea4:	f7fd fc76 	bl	8003794 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d902      	bls.n	8005eb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	73fb      	strb	r3, [r7, #15]
          break;
 8005eb6:	e005      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ef      	beq.n	8005ea4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d106      	bne.n	8005ed8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005eca:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ecc:	691a      	ldr	r2, [r3, #16]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	4904      	ldr	r1, [pc, #16]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000

08005ee8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ef6:	4b6a      	ldr	r3, [pc, #424]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f003 0303 	and.w	r3, r3, #3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f02:	4b67      	ldr	r3, [pc, #412]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0203 	and.w	r2, r3, #3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d10d      	bne.n	8005f2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
       ||
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f1a:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	091b      	lsrs	r3, r3, #4
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	1c5a      	adds	r2, r3, #1
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
       ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d047      	beq.n	8005fbe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	73fb      	strb	r3, [r7, #15]
 8005f32:	e044      	b.n	8005fbe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d018      	beq.n	8005f6e <RCCEx_PLLSAI2_Config+0x86>
 8005f3c:	2b03      	cmp	r3, #3
 8005f3e:	d825      	bhi.n	8005f8c <RCCEx_PLLSAI2_Config+0xa4>
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d002      	beq.n	8005f4a <RCCEx_PLLSAI2_Config+0x62>
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d009      	beq.n	8005f5c <RCCEx_PLLSAI2_Config+0x74>
 8005f48:	e020      	b.n	8005f8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f4a:	4b55      	ldr	r3, [pc, #340]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11d      	bne.n	8005f92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f5a:	e01a      	b.n	8005f92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f5c:	4b50      	ldr	r3, [pc, #320]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d116      	bne.n	8005f96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f6c:	e013      	b.n	8005f96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f6e:	4b4c      	ldr	r3, [pc, #304]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10f      	bne.n	8005f9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f7a:	4b49      	ldr	r3, [pc, #292]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f8a:	e006      	b.n	8005f9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f90:	e004      	b.n	8005f9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f92:	bf00      	nop
 8005f94:	e002      	b.n	8005f9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f96:	bf00      	nop
 8005f98:	e000      	b.n	8005f9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005f9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10d      	bne.n	8005fbe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6819      	ldr	r1, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	430b      	orrs	r3, r1
 8005fb8:	4939      	ldr	r1, [pc, #228]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d167      	bne.n	8006094 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fc4:	4b36      	ldr	r3, [pc, #216]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a35      	ldr	r2, [pc, #212]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd0:	f7fd fbe0 	bl	8003794 <HAL_GetTick>
 8005fd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fd6:	e009      	b.n	8005fec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fd8:	f7fd fbdc 	bl	8003794 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d902      	bls.n	8005fec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fea:	e005      	b.n	8005ff8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005fec:	4b2c      	ldr	r3, [pc, #176]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1ef      	bne.n	8005fd8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d14a      	bne.n	8006094 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d111      	bne.n	8006028 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006004:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800600c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6892      	ldr	r2, [r2, #8]
 8006014:	0211      	lsls	r1, r2, #8
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	68d2      	ldr	r2, [r2, #12]
 800601a:	0912      	lsrs	r2, r2, #4
 800601c:	0452      	lsls	r2, r2, #17
 800601e:	430a      	orrs	r2, r1
 8006020:	491f      	ldr	r1, [pc, #124]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	4313      	orrs	r3, r2
 8006024:	614b      	str	r3, [r1, #20]
 8006026:	e011      	b.n	800604c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006028:	4b1d      	ldr	r3, [pc, #116]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006030:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	6892      	ldr	r2, [r2, #8]
 8006038:	0211      	lsls	r1, r2, #8
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6912      	ldr	r2, [r2, #16]
 800603e:	0852      	lsrs	r2, r2, #1
 8006040:	3a01      	subs	r2, #1
 8006042:	0652      	lsls	r2, r2, #25
 8006044:	430a      	orrs	r2, r1
 8006046:	4916      	ldr	r1, [pc, #88]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006048:	4313      	orrs	r3, r2
 800604a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800604c:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a13      	ldr	r2, [pc, #76]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006058:	f7fd fb9c 	bl	8003794 <HAL_GetTick>
 800605c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800605e:	e009      	b.n	8006074 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006060:	f7fd fb98 	bl	8003794 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b02      	cmp	r3, #2
 800606c:	d902      	bls.n	8006074 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	73fb      	strb	r3, [r7, #15]
          break;
 8006072:	e005      	b.n	8006080 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006074:	4b0a      	ldr	r3, [pc, #40]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0ef      	beq.n	8006060 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006086:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006088:	695a      	ldr	r2, [r3, #20]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4904      	ldr	r1, [pc, #16]	; (80060a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006090:	4313      	orrs	r3, r2
 8006092:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40021000 	.word	0x40021000

080060a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e095      	b.n	80061e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d108      	bne.n	80060d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c6:	d009      	beq.n	80060dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	61da      	str	r2, [r3, #28]
 80060ce:	e005      	b.n	80060dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fb fbf0 	bl	80018dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006112:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800611c:	d902      	bls.n	8006124 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	e002      	b.n	800612a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006128:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006132:	d007      	beq.n	8006144 <HAL_SPI_Init+0xa0>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	431a      	orrs	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006172:	431a      	orrs	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006186:	ea42 0103 	orr.w	r1, r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	0c1b      	lsrs	r3, r3, #16
 80061a0:	f003 0204 	and.w	r2, r3, #4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061c0:	ea42 0103 	orr.w	r1, r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e01a      	b.n	8006232 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006212:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fb fba5 	bl	8001964 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b088      	sub	sp, #32
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006254:	2b01      	cmp	r3, #1
 8006256:	d101      	bne.n	800625c <HAL_SPI_Transmit+0x22>
 8006258:	2302      	movs	r3, #2
 800625a:	e158      	b.n	800650e <HAL_SPI_Transmit+0x2d4>
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006264:	f7fd fa96 	bl	8003794 <HAL_GetTick>
 8006268:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d002      	beq.n	8006280 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800627a:	2302      	movs	r3, #2
 800627c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800627e:	e13d      	b.n	80064fc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <HAL_SPI_Transmit+0x52>
 8006286:	88fb      	ldrh	r3, [r7, #6]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d102      	bne.n	8006292 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006290:	e134      	b.n	80064fc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2203      	movs	r2, #3
 8006296:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	88fa      	ldrh	r2, [r7, #6]
 80062aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	88fa      	ldrh	r2, [r7, #6]
 80062b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062dc:	d10f      	bne.n	80062fe <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d007      	beq.n	800631c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800631a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006324:	d94b      	bls.n	80063be <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_Transmit+0xfa>
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d13e      	bne.n	80063b2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006358:	e02b      	b.n	80063b2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d112      	bne.n	800638e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	881a      	ldrh	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800638c:	e011      	b.n	80063b2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800638e:	f7fd fa01 	bl	8003794 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d803      	bhi.n	80063a6 <HAL_SPI_Transmit+0x16c>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d102      	bne.n	80063ac <HAL_SPI_Transmit+0x172>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d102      	bne.n	80063b2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063b0:	e0a4      	b.n	80064fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d1ce      	bne.n	800635a <HAL_SPI_Transmit+0x120>
 80063bc:	e07c      	b.n	80064b8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_SPI_Transmit+0x192>
 80063c6:	8afb      	ldrh	r3, [r7, #22]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d170      	bne.n	80064ae <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d912      	bls.n	80063fc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	881a      	ldrh	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e6:	1c9a      	adds	r2, r3, #2
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b02      	subs	r3, #2
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063fa:	e058      	b.n	80064ae <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006422:	e044      	b.n	80064ae <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d12b      	bne.n	800648a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006436:	b29b      	uxth	r3, r3
 8006438:	2b01      	cmp	r3, #1
 800643a:	d912      	bls.n	8006462 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	881a      	ldrh	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	1c9a      	adds	r2, r3, #2
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b02      	subs	r3, #2
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006460:	e025      	b.n	80064ae <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	7812      	ldrb	r2, [r2, #0]
 800646e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006488:	e011      	b.n	80064ae <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800648a:	f7fd f983 	bl	8003794 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	683a      	ldr	r2, [r7, #0]
 8006496:	429a      	cmp	r2, r3
 8006498:	d803      	bhi.n	80064a2 <HAL_SPI_Transmit+0x268>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_Transmit+0x26e>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80064ac:	e026      	b.n	80064fc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1b5      	bne.n	8006424 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 fce3 	bl	8006e88 <SPI_EndRxTxTransaction>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2220      	movs	r2, #32
 80064cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064d6:	2300      	movs	r3, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	613b      	str	r3, [r7, #16]
 80064ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d002      	beq.n	80064fa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e000      	b.n	80064fc <HAL_SPI_Transmit+0x2c2>
  }

error:
 80064fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800650c:	7ffb      	ldrb	r3, [r7, #31]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b088      	sub	sp, #32
 800651a:	af02      	add	r7, sp, #8
 800651c:	60f8      	str	r0, [r7, #12]
 800651e:	60b9      	str	r1, [r7, #8]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	4613      	mov	r3, r2
 8006524:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006532:	d112      	bne.n	800655a <HAL_SPI_Receive+0x44>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10e      	bne.n	800655a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2204      	movs	r2, #4
 8006540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006544:	88fa      	ldrh	r2, [r7, #6]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	4613      	mov	r3, r2
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 f910 	bl	8006776 <HAL_SPI_TransmitReceive>
 8006556:	4603      	mov	r3, r0
 8006558:	e109      	b.n	800676e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_SPI_Receive+0x52>
 8006564:	2302      	movs	r3, #2
 8006566:	e102      	b.n	800676e <HAL_SPI_Receive+0x258>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006570:	f7fd f910 	bl	8003794 <HAL_GetTick>
 8006574:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b01      	cmp	r3, #1
 8006580:	d002      	beq.n	8006588 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006582:	2302      	movs	r3, #2
 8006584:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006586:	e0e9      	b.n	800675c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d002      	beq.n	8006594 <HAL_SPI_Receive+0x7e>
 800658e:	88fb      	ldrh	r3, [r7, #6]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006598:	e0e0      	b.n	800675c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2204      	movs	r2, #4
 800659e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	88fa      	ldrh	r2, [r7, #6]
 80065b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065e4:	d908      	bls.n	80065f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	e007      	b.n	8006608 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006610:	d10f      	bne.n	8006632 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006620:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006630:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d007      	beq.n	8006650 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006658:	d867      	bhi.n	800672a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800665a:	e030      	b.n	80066be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 0301 	and.w	r3, r3, #1
 8006666:	2b01      	cmp	r3, #1
 8006668:	d117      	bne.n	800669a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f103 020c 	add.w	r2, r3, #12
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	7812      	ldrb	r2, [r2, #0]
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006698:	e011      	b.n	80066be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669a:	f7fd f87b 	bl	8003794 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d803      	bhi.n	80066b2 <HAL_SPI_Receive+0x19c>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d102      	bne.n	80066b8 <HAL_SPI_Receive+0x1a2>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80066bc:	e04e      	b.n	800675c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1c8      	bne.n	800665c <HAL_SPI_Receive+0x146>
 80066ca:	e034      	b.n	8006736 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d115      	bne.n	8006706 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68da      	ldr	r2, [r3, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	b292      	uxth	r2, r2
 80066e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b29a      	uxth	r2, r3
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006704:	e011      	b.n	800672a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006706:	f7fd f845 	bl	8003794 <HAL_GetTick>
 800670a:	4602      	mov	r2, r0
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	1ad3      	subs	r3, r2, r3
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d803      	bhi.n	800671e <HAL_SPI_Receive+0x208>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671c:	d102      	bne.n	8006724 <HAL_SPI_Receive+0x20e>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d102      	bne.n	800672a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006728:	e018      	b.n	800675c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1ca      	bne.n	80066cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 fb4c 	bl	8006dd8 <SPI_EndRxTransaction>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	75fb      	strb	r3, [r7, #23]
 8006758:	e000      	b.n	800675c <HAL_SPI_Receive+0x246>
  }

error :
 800675a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3718      	adds	r7, #24
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b08a      	sub	sp, #40	; 0x28
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006784:	2301      	movs	r3, #1
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_SPI_TransmitReceive+0x26>
 8006798:	2302      	movs	r3, #2
 800679a:	e1fb      	b.n	8006b94 <HAL_SPI_TransmitReceive+0x41e>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067a4:	f7fc fff6 	bl	8003794 <HAL_GetTick>
 80067a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067b8:	887b      	ldrh	r3, [r7, #2]
 80067ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067bc:	887b      	ldrh	r3, [r7, #2]
 80067be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067c0:	7efb      	ldrb	r3, [r7, #27]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d00e      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x6e>
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d102      	bne.n	80067dc <HAL_SPI_TransmitReceive+0x66>
 80067d6:	7efb      	ldrb	r3, [r7, #27]
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d003      	beq.n	80067e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067e2:	e1cd      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x80>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_SPI_TransmitReceive+0x80>
 80067f0:	887b      	ldrh	r3, [r7, #2]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d103      	bne.n	80067fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067fc:	e1c0      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b04      	cmp	r3, #4
 8006808:	d003      	beq.n	8006812 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2205      	movs	r2, #5
 800680e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	887a      	ldrh	r2, [r7, #2]
 8006822:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	887a      	ldrh	r2, [r7, #2]
 800682a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	887a      	ldrh	r2, [r7, #2]
 8006838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	887a      	ldrh	r2, [r7, #2]
 800683e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2200      	movs	r2, #0
 8006844:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006854:	d802      	bhi.n	800685c <HAL_SPI_TransmitReceive+0xe6>
 8006856:	8a3b      	ldrh	r3, [r7, #16]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d908      	bls.n	800686e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	e007      	b.n	800687e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800687c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d007      	beq.n	800689c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800689a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068a4:	d97c      	bls.n	80069a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_SPI_TransmitReceive+0x13e>
 80068ae:	8a7b      	ldrh	r3, [r7, #18]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d169      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	881a      	ldrh	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068d8:	e056      	b.n	8006988 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d11b      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1aa>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d016      	beq.n	8006920 <HAL_SPI_TransmitReceive+0x1aa>
 80068f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d113      	bne.n	8006920 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	3b01      	subs	r3, #1
 8006916:	b29a      	uxth	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b01      	cmp	r3, #1
 800692c:	d11c      	bne.n	8006968 <HAL_SPI_TransmitReceive+0x1f2>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d016      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006944:	b292      	uxth	r2, r2
 8006946:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	1c9a      	adds	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006958:	b29b      	uxth	r3, r3
 800695a:	3b01      	subs	r3, #1
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006964:	2301      	movs	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006968:	f7fc ff14 	bl	8003794 <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006974:	429a      	cmp	r2, r3
 8006976:	d807      	bhi.n	8006988 <HAL_SPI_TransmitReceive+0x212>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d003      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006986:	e0fb      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1a3      	bne.n	80068da <HAL_SPI_TransmitReceive+0x164>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d19d      	bne.n	80068da <HAL_SPI_TransmitReceive+0x164>
 800699e:	e0df      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <HAL_SPI_TransmitReceive+0x23a>
 80069a8:	8a7b      	ldrh	r3, [r7, #18]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	f040 80cb 	bne.w	8006b46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d912      	bls.n	80069e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	881a      	ldrh	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	1c9a      	adds	r2, r3, #2
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3b02      	subs	r3, #2
 80069d8:	b29a      	uxth	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069de:	e0b2      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	7812      	ldrb	r2, [r2, #0]
 80069ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a06:	e09e      	b.n	8006b46 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d134      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x30a>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02f      	beq.n	8006a80 <HAL_SPI_TransmitReceive+0x30a>
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d12c      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d912      	bls.n	8006a56 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b02      	subs	r3, #2
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a54:	e012      	b.n	8006a7c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	7812      	ldrb	r2, [r2, #0]
 8006a62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d148      	bne.n	8006b20 <HAL_SPI_TransmitReceive+0x3aa>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d042      	beq.n	8006b20 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d923      	bls.n	8006aee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	3b02      	subs	r3, #2
 8006ac8:	b29a      	uxth	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d81f      	bhi.n	8006b1c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aea:	605a      	str	r2, [r3, #4]
 8006aec:	e016      	b.n	8006b1c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f103 020c 	add.w	r2, r3, #12
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b20:	f7fc fe38 	bl	8003794 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d803      	bhi.n	8006b38 <HAL_SPI_TransmitReceive+0x3c2>
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b36:	d102      	bne.n	8006b3e <HAL_SPI_TransmitReceive+0x3c8>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b44:	e01c      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f47f af5b 	bne.w	8006a08 <HAL_SPI_TransmitReceive+0x292>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f47f af54 	bne.w	8006a08 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 f98f 	bl	8006e88 <SPI_EndRxTxTransaction>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d006      	beq.n	8006b7e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	661a      	str	r2, [r3, #96]	; 0x60
 8006b7c:	e000      	b.n	8006b80 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006b7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3728      	adds	r7, #40	; 0x28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bac:	f7fc fdf2 	bl	8003794 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	1a9b      	subs	r3, r3, r2
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	4413      	add	r3, r2
 8006bba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bbc:	f7fc fdea 	bl	8003794 <HAL_GetTick>
 8006bc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bc2:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	015b      	lsls	r3, r3, #5
 8006bc8:	0d1b      	lsrs	r3, r3, #20
 8006bca:	69fa      	ldr	r2, [r7, #28]
 8006bcc:	fb02 f303 	mul.w	r3, r2, r3
 8006bd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd2:	e054      	b.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d050      	beq.n	8006c7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bdc:	f7fc fdda 	bl	8003794 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d902      	bls.n	8006bf2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d13d      	bne.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0a:	d111      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c14:	d004      	beq.n	8006c20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c1e:	d107      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d10f      	bne.n	8006c5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e017      	b.n	8006c9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4013      	ands	r3, r2
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	bf0c      	ite	eq
 8006c8e:	2301      	moveq	r3, #1
 8006c90:	2300      	movne	r3, #0
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	461a      	mov	r2, r3
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d19b      	bne.n	8006bd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3720      	adds	r7, #32
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000000 	.word	0x20000000

08006cac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cbe:	f7fc fd69 	bl	8003794 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	4413      	add	r3, r2
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cce:	f7fc fd61 	bl	8003794 <HAL_GetTick>
 8006cd2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006cdc:	4b3d      	ldr	r3, [pc, #244]	; (8006dd4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	00da      	lsls	r2, r3, #3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	0d1b      	lsrs	r3, r3, #20
 8006cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cee:	fb02 f303 	mul.w	r3, r2, r3
 8006cf2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006cf4:	e060      	b.n	8006db8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cfc:	d107      	bne.n	8006d0e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d050      	beq.n	8006db8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d16:	f7fc fd3d 	bl	8003794 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d902      	bls.n	8006d2c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d13d      	bne.n	8006da8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d44:	d111      	bne.n	8006d6a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d4e:	d004      	beq.n	8006d5a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d58:	d107      	bne.n	8006d6a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d72:	d10f      	bne.n	8006d94 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e010      	b.n	8006dca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d196      	bne.n	8006cf6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3728      	adds	r7, #40	; 0x28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000000 	.word	0x20000000

08006dd8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dec:	d111      	bne.n	8006e12 <SPI_EndRxTransaction+0x3a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df6:	d004      	beq.n	8006e02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e00:	d107      	bne.n	8006e12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	2180      	movs	r1, #128	; 0x80
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f7ff febd 	bl	8006b9c <SPI_WaitFlagStateUntilTimeout>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e023      	b.n	8006e80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e40:	d11d      	bne.n	8006e7e <SPI_EndRxTransaction+0xa6>
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	d004      	beq.n	8006e56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e54:	d113      	bne.n	8006e7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f7ff ff22 	bl	8006cac <SPI_WaitFifoStateUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e72:	f043 0220 	orr.w	r2, r3, #32
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e000      	b.n	8006e80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7ff ff03 	bl	8006cac <SPI_WaitFifoStateUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb0:	f043 0220 	orr.w	r2, r3, #32
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e027      	b.n	8006f0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2180      	movs	r1, #128	; 0x80
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f7ff fe68 	bl	8006b9c <SPI_WaitFlagStateUntilTimeout>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d007      	beq.n	8006ee2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed6:	f043 0220 	orr.w	r2, r3, #32
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e014      	b.n	8006f0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fedc 	bl	8006cac <SPI_WaitFifoStateUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efe:	f043 0220 	orr.w	r2, r3, #32
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e000      	b.n	8006f0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8006f20:	e00c      	b.n	8006f3c <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	3301      	adds	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 8006f30:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d101      	bne.n	8006f3c <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e007      	b.n	8006f4c <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1eb      	bne.n	8006f22 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e040      	b.n	8006fec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7fa fd10 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2224      	movs	r2, #36	; 0x24
 8006f84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f992 	bl	80072c0 <UART_SetConfig>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e022      	b.n	8006fec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 fc3e 	bl	8007830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fcc5 	bl	8007974 <UART_CheckIdleState>
 8006fea:	4603      	mov	r3, r0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08a      	sub	sp, #40	; 0x28
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	603b      	str	r3, [r7, #0]
 8007000:	4613      	mov	r3, r2
 8007002:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007008:	2b20      	cmp	r3, #32
 800700a:	f040 8082 	bne.w	8007112 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d002      	beq.n	800701a <HAL_UART_Transmit+0x26>
 8007014:	88fb      	ldrh	r3, [r7, #6]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e07a      	b.n	8007114 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_UART_Transmit+0x38>
 8007028:	2302      	movs	r3, #2
 800702a:	e073      	b.n	8007114 <HAL_UART_Transmit+0x120>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2221      	movs	r2, #33	; 0x21
 8007040:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007042:	f7fc fba7 	bl	8003794 <HAL_GetTick>
 8007046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007060:	d108      	bne.n	8007074 <HAL_UART_Transmit+0x80>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e003      	b.n	800707c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007084:	e02d      	b.n	80070e2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2200      	movs	r2, #0
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fcb8 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e039      	b.n	8007114 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	881a      	ldrh	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b2:	b292      	uxth	r2, r2
 80070b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	3302      	adds	r3, #2
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e008      	b.n	80070d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	b292      	uxth	r2, r2
 80070c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3301      	adds	r3, #1
 80070ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29a      	uxth	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1cb      	bne.n	8007086 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	2200      	movs	r2, #0
 80070f6:	2140      	movs	r1, #64	; 0x40
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fc84 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e005      	b.n	8007114 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2220      	movs	r2, #32
 800710c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	e000      	b.n	8007114 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007112:	2302      	movs	r3, #2
  }
}
 8007114:	4618      	mov	r0, r3
 8007116:	3720      	adds	r7, #32
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	4613      	mov	r3, r2
 800712a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007130:	2b20      	cmp	r3, #32
 8007132:	f040 80bf 	bne.w	80072b4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_UART_Receive+0x26>
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e0b7      	b.n	80072b6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_UART_Receive+0x38>
 8007150:	2302      	movs	r3, #2
 8007152:	e0b0      	b.n	80072b6 <HAL_UART_Receive+0x19a>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2222      	movs	r2, #34	; 0x22
 8007168:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007170:	f7fc fb10 	bl	8003794 <HAL_GetTick>
 8007174:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	88fa      	ldrh	r2, [r7, #6]
 800717a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	88fa      	ldrh	r2, [r7, #6]
 8007182:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800718e:	d10e      	bne.n	80071ae <HAL_UART_Receive+0x92>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <HAL_UART_Receive+0x88>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800719e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071a2:	e02d      	b.n	8007200 <HAL_UART_Receive+0xe4>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	22ff      	movs	r2, #255	; 0xff
 80071a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ac:	e028      	b.n	8007200 <HAL_UART_Receive+0xe4>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10d      	bne.n	80071d2 <HAL_UART_Receive+0xb6>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_UART_Receive+0xac>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	22ff      	movs	r2, #255	; 0xff
 80071c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c6:	e01b      	b.n	8007200 <HAL_UART_Receive+0xe4>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	227f      	movs	r2, #127	; 0x7f
 80071cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071d0:	e016      	b.n	8007200 <HAL_UART_Receive+0xe4>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071da:	d10d      	bne.n	80071f8 <HAL_UART_Receive+0xdc>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <HAL_UART_Receive+0xd2>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	227f      	movs	r2, #127	; 0x7f
 80071e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071ec:	e008      	b.n	8007200 <HAL_UART_Receive+0xe4>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	223f      	movs	r2, #63	; 0x3f
 80071f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071f6:	e003      	b.n	8007200 <HAL_UART_Receive+0xe4>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007206:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007210:	d108      	bne.n	8007224 <HAL_UART_Receive+0x108>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d104      	bne.n	8007224 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	61bb      	str	r3, [r7, #24]
 8007222:	e003      	b.n	800722c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007234:	e033      	b.n	800729e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2200      	movs	r2, #0
 800723e:	2120      	movs	r1, #32
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 fbe0 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e032      	b.n	80072b6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800725c:	b29a      	uxth	r2, r3
 800725e:	8a7b      	ldrh	r3, [r7, #18]
 8007260:	4013      	ands	r3, r2
 8007262:	b29a      	uxth	r2, r3
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3302      	adds	r3, #2
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	e00d      	b.n	800728c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007276:	b29b      	uxth	r3, r3
 8007278:	b2da      	uxtb	r2, r3
 800727a:	8a7b      	ldrh	r3, [r7, #18]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	4013      	ands	r3, r2
 8007280:	b2da      	uxtb	r2, r3
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3301      	adds	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007292:	b29b      	uxth	r3, r3
 8007294:	3b01      	subs	r3, #1
 8007296:	b29a      	uxth	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1c5      	bne.n	8007236 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e000      	b.n	80072b6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
  }
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3720      	adds	r7, #32
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072c4:	b08a      	sub	sp, #40	; 0x28
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	431a      	orrs	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	431a      	orrs	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4ba4      	ldr	r3, [pc, #656]	; (8007580 <UART_SetConfig+0x2c0>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072f8:	430b      	orrs	r3, r1
 80072fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a99      	ldr	r2, [pc, #612]	; (8007584 <UART_SetConfig+0x2c4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d004      	beq.n	800732c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007328:	4313      	orrs	r3, r2
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800733c:	430a      	orrs	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a90      	ldr	r2, [pc, #576]	; (8007588 <UART_SetConfig+0x2c8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d126      	bne.n	8007398 <UART_SetConfig+0xd8>
 800734a:	4b90      	ldr	r3, [pc, #576]	; (800758c <UART_SetConfig+0x2cc>)
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007350:	f003 0303 	and.w	r3, r3, #3
 8007354:	2b03      	cmp	r3, #3
 8007356:	d81b      	bhi.n	8007390 <UART_SetConfig+0xd0>
 8007358:	a201      	add	r2, pc, #4	; (adr r2, 8007360 <UART_SetConfig+0xa0>)
 800735a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735e:	bf00      	nop
 8007360:	08007371 	.word	0x08007371
 8007364:	08007381 	.word	0x08007381
 8007368:	08007379 	.word	0x08007379
 800736c:	08007389 	.word	0x08007389
 8007370:	2301      	movs	r3, #1
 8007372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007376:	e116      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007378:	2302      	movs	r3, #2
 800737a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737e:	e112      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007380:	2304      	movs	r3, #4
 8007382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007386:	e10e      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007388:	2308      	movs	r3, #8
 800738a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738e:	e10a      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007390:	2310      	movs	r3, #16
 8007392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007396:	e106      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a7c      	ldr	r2, [pc, #496]	; (8007590 <UART_SetConfig+0x2d0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d138      	bne.n	8007414 <UART_SetConfig+0x154>
 80073a2:	4b7a      	ldr	r3, [pc, #488]	; (800758c <UART_SetConfig+0x2cc>)
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a8:	f003 030c 	and.w	r3, r3, #12
 80073ac:	2b0c      	cmp	r3, #12
 80073ae:	d82d      	bhi.n	800740c <UART_SetConfig+0x14c>
 80073b0:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <UART_SetConfig+0xf8>)
 80073b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b6:	bf00      	nop
 80073b8:	080073ed 	.word	0x080073ed
 80073bc:	0800740d 	.word	0x0800740d
 80073c0:	0800740d 	.word	0x0800740d
 80073c4:	0800740d 	.word	0x0800740d
 80073c8:	080073fd 	.word	0x080073fd
 80073cc:	0800740d 	.word	0x0800740d
 80073d0:	0800740d 	.word	0x0800740d
 80073d4:	0800740d 	.word	0x0800740d
 80073d8:	080073f5 	.word	0x080073f5
 80073dc:	0800740d 	.word	0x0800740d
 80073e0:	0800740d 	.word	0x0800740d
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	08007405 	.word	0x08007405
 80073ec:	2300      	movs	r3, #0
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f2:	e0d8      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80073f4:	2302      	movs	r3, #2
 80073f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073fa:	e0d4      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80073fc:	2304      	movs	r3, #4
 80073fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007402:	e0d0      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007404:	2308      	movs	r3, #8
 8007406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800740a:	e0cc      	b.n	80075a6 <UART_SetConfig+0x2e6>
 800740c:	2310      	movs	r3, #16
 800740e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007412:	e0c8      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a5e      	ldr	r2, [pc, #376]	; (8007594 <UART_SetConfig+0x2d4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d125      	bne.n	800746a <UART_SetConfig+0x1aa>
 800741e:	4b5b      	ldr	r3, [pc, #364]	; (800758c <UART_SetConfig+0x2cc>)
 8007420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007424:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007428:	2b30      	cmp	r3, #48	; 0x30
 800742a:	d016      	beq.n	800745a <UART_SetConfig+0x19a>
 800742c:	2b30      	cmp	r3, #48	; 0x30
 800742e:	d818      	bhi.n	8007462 <UART_SetConfig+0x1a2>
 8007430:	2b20      	cmp	r3, #32
 8007432:	d00a      	beq.n	800744a <UART_SetConfig+0x18a>
 8007434:	2b20      	cmp	r3, #32
 8007436:	d814      	bhi.n	8007462 <UART_SetConfig+0x1a2>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <UART_SetConfig+0x182>
 800743c:	2b10      	cmp	r3, #16
 800743e:	d008      	beq.n	8007452 <UART_SetConfig+0x192>
 8007440:	e00f      	b.n	8007462 <UART_SetConfig+0x1a2>
 8007442:	2300      	movs	r3, #0
 8007444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007448:	e0ad      	b.n	80075a6 <UART_SetConfig+0x2e6>
 800744a:	2302      	movs	r3, #2
 800744c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007450:	e0a9      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007452:	2304      	movs	r3, #4
 8007454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007458:	e0a5      	b.n	80075a6 <UART_SetConfig+0x2e6>
 800745a:	2308      	movs	r3, #8
 800745c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007460:	e0a1      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007462:	2310      	movs	r3, #16
 8007464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007468:	e09d      	b.n	80075a6 <UART_SetConfig+0x2e6>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a4a      	ldr	r2, [pc, #296]	; (8007598 <UART_SetConfig+0x2d8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d125      	bne.n	80074c0 <UART_SetConfig+0x200>
 8007474:	4b45      	ldr	r3, [pc, #276]	; (800758c <UART_SetConfig+0x2cc>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800747e:	2bc0      	cmp	r3, #192	; 0xc0
 8007480:	d016      	beq.n	80074b0 <UART_SetConfig+0x1f0>
 8007482:	2bc0      	cmp	r3, #192	; 0xc0
 8007484:	d818      	bhi.n	80074b8 <UART_SetConfig+0x1f8>
 8007486:	2b80      	cmp	r3, #128	; 0x80
 8007488:	d00a      	beq.n	80074a0 <UART_SetConfig+0x1e0>
 800748a:	2b80      	cmp	r3, #128	; 0x80
 800748c:	d814      	bhi.n	80074b8 <UART_SetConfig+0x1f8>
 800748e:	2b00      	cmp	r3, #0
 8007490:	d002      	beq.n	8007498 <UART_SetConfig+0x1d8>
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d008      	beq.n	80074a8 <UART_SetConfig+0x1e8>
 8007496:	e00f      	b.n	80074b8 <UART_SetConfig+0x1f8>
 8007498:	2300      	movs	r3, #0
 800749a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749e:	e082      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80074a0:	2302      	movs	r3, #2
 80074a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a6:	e07e      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80074a8:	2304      	movs	r3, #4
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ae:	e07a      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80074b0:	2308      	movs	r3, #8
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b6:	e076      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80074b8:	2310      	movs	r3, #16
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074be:	e072      	b.n	80075a6 <UART_SetConfig+0x2e6>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a35      	ldr	r2, [pc, #212]	; (800759c <UART_SetConfig+0x2dc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d12a      	bne.n	8007520 <UART_SetConfig+0x260>
 80074ca:	4b30      	ldr	r3, [pc, #192]	; (800758c <UART_SetConfig+0x2cc>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d8:	d01a      	beq.n	8007510 <UART_SetConfig+0x250>
 80074da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074de:	d81b      	bhi.n	8007518 <UART_SetConfig+0x258>
 80074e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074e4:	d00c      	beq.n	8007500 <UART_SetConfig+0x240>
 80074e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ea:	d815      	bhi.n	8007518 <UART_SetConfig+0x258>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d003      	beq.n	80074f8 <UART_SetConfig+0x238>
 80074f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074f4:	d008      	beq.n	8007508 <UART_SetConfig+0x248>
 80074f6:	e00f      	b.n	8007518 <UART_SetConfig+0x258>
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074fe:	e052      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007500:	2302      	movs	r3, #2
 8007502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007506:	e04e      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007508:	2304      	movs	r3, #4
 800750a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750e:	e04a      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007510:	2308      	movs	r3, #8
 8007512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007516:	e046      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007518:	2310      	movs	r3, #16
 800751a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751e:	e042      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <UART_SetConfig+0x2c4>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d13a      	bne.n	80075a0 <UART_SetConfig+0x2e0>
 800752a:	4b18      	ldr	r3, [pc, #96]	; (800758c <UART_SetConfig+0x2cc>)
 800752c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007538:	d01a      	beq.n	8007570 <UART_SetConfig+0x2b0>
 800753a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800753e:	d81b      	bhi.n	8007578 <UART_SetConfig+0x2b8>
 8007540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007544:	d00c      	beq.n	8007560 <UART_SetConfig+0x2a0>
 8007546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800754a:	d815      	bhi.n	8007578 <UART_SetConfig+0x2b8>
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <UART_SetConfig+0x298>
 8007550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007554:	d008      	beq.n	8007568 <UART_SetConfig+0x2a8>
 8007556:	e00f      	b.n	8007578 <UART_SetConfig+0x2b8>
 8007558:	2300      	movs	r3, #0
 800755a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755e:	e022      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007560:	2302      	movs	r3, #2
 8007562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007566:	e01e      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007568:	2304      	movs	r3, #4
 800756a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756e:	e01a      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007570:	2308      	movs	r3, #8
 8007572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007576:	e016      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007578:	2310      	movs	r3, #16
 800757a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757e:	e012      	b.n	80075a6 <UART_SetConfig+0x2e6>
 8007580:	efff69f3 	.word	0xefff69f3
 8007584:	40008000 	.word	0x40008000
 8007588:	40013800 	.word	0x40013800
 800758c:	40021000 	.word	0x40021000
 8007590:	40004400 	.word	0x40004400
 8007594:	40004800 	.word	0x40004800
 8007598:	40004c00 	.word	0x40004c00
 800759c:	40005000 	.word	0x40005000
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a9f      	ldr	r2, [pc, #636]	; (8007828 <UART_SetConfig+0x568>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d17a      	bne.n	80076a6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075b4:	2b08      	cmp	r3, #8
 80075b6:	d824      	bhi.n	8007602 <UART_SetConfig+0x342>
 80075b8:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0x300>)
 80075ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075be:	bf00      	nop
 80075c0:	080075e5 	.word	0x080075e5
 80075c4:	08007603 	.word	0x08007603
 80075c8:	080075ed 	.word	0x080075ed
 80075cc:	08007603 	.word	0x08007603
 80075d0:	080075f3 	.word	0x080075f3
 80075d4:	08007603 	.word	0x08007603
 80075d8:	08007603 	.word	0x08007603
 80075dc:	08007603 	.word	0x08007603
 80075e0:	080075fb 	.word	0x080075fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e4:	f7fe f816 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80075e8:	61f8      	str	r0, [r7, #28]
        break;
 80075ea:	e010      	b.n	800760e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075ec:	4b8f      	ldr	r3, [pc, #572]	; (800782c <UART_SetConfig+0x56c>)
 80075ee:	61fb      	str	r3, [r7, #28]
        break;
 80075f0:	e00d      	b.n	800760e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075f2:	f7fd ff77 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80075f6:	61f8      	str	r0, [r7, #28]
        break;
 80075f8:	e009      	b.n	800760e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	61fb      	str	r3, [r7, #28]
        break;
 8007600:	e005      	b.n	800760e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800760c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800760e:	69fb      	ldr	r3, [r7, #28]
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80fb 	beq.w	800780c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	4613      	mov	r3, r2
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4413      	add	r3, r2
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	429a      	cmp	r2, r3
 8007624:	d305      	bcc.n	8007632 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	429a      	cmp	r2, r3
 8007630:	d903      	bls.n	800763a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007638:	e0e8      	b.n	800780c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2200      	movs	r2, #0
 800763e:	461c      	mov	r4, r3
 8007640:	4615      	mov	r5, r2
 8007642:	f04f 0200 	mov.w	r2, #0
 8007646:	f04f 0300 	mov.w	r3, #0
 800764a:	022b      	lsls	r3, r5, #8
 800764c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007650:	0222      	lsls	r2, r4, #8
 8007652:	68f9      	ldr	r1, [r7, #12]
 8007654:	6849      	ldr	r1, [r1, #4]
 8007656:	0849      	lsrs	r1, r1, #1
 8007658:	2000      	movs	r0, #0
 800765a:	4688      	mov	r8, r1
 800765c:	4681      	mov	r9, r0
 800765e:	eb12 0a08 	adds.w	sl, r2, r8
 8007662:	eb43 0b09 	adc.w	fp, r3, r9
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007674:	4650      	mov	r0, sl
 8007676:	4659      	mov	r1, fp
 8007678:	f7f8 fe02 	bl	8000280 <__aeabi_uldivmod>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4613      	mov	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768a:	d308      	bcc.n	800769e <UART_SetConfig+0x3de>
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007692:	d204      	bcs.n	800769e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	60da      	str	r2, [r3, #12]
 800769c:	e0b6      	b.n	800780c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076a4:	e0b2      	b.n	800780c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ae:	d15e      	bne.n	800776e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80076b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d828      	bhi.n	800770a <UART_SetConfig+0x44a>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0x400>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076e5 	.word	0x080076e5
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	080076f5 	.word	0x080076f5
 80076cc:	0800770b 	.word	0x0800770b
 80076d0:	080076fb 	.word	0x080076fb
 80076d4:	0800770b 	.word	0x0800770b
 80076d8:	0800770b 	.word	0x0800770b
 80076dc:	0800770b 	.word	0x0800770b
 80076e0:	08007703 	.word	0x08007703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076e4:	f7fd ff96 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80076e8:	61f8      	str	r0, [r7, #28]
        break;
 80076ea:	e014      	b.n	8007716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076ec:	f7fd ffa8 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 80076f0:	61f8      	str	r0, [r7, #28]
        break;
 80076f2:	e010      	b.n	8007716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076f4:	4b4d      	ldr	r3, [pc, #308]	; (800782c <UART_SetConfig+0x56c>)
 80076f6:	61fb      	str	r3, [r7, #28]
        break;
 80076f8:	e00d      	b.n	8007716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076fa:	f7fd fef3 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80076fe:	61f8      	str	r0, [r7, #28]
        break;
 8007700:	e009      	b.n	8007716 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007706:	61fb      	str	r3, [r7, #28]
        break;
 8007708:	e005      	b.n	8007716 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d077      	beq.n	800780c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	005a      	lsls	r2, r3, #1
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	085b      	lsrs	r3, r3, #1
 8007726:	441a      	add	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b0f      	cmp	r3, #15
 8007736:	d916      	bls.n	8007766 <UART_SetConfig+0x4a6>
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800773e:	d212      	bcs.n	8007766 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	b29b      	uxth	r3, r3
 8007744:	f023 030f 	bic.w	r3, r3, #15
 8007748:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	b29b      	uxth	r3, r3
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	b29a      	uxth	r2, r3
 8007756:	8afb      	ldrh	r3, [r7, #22]
 8007758:	4313      	orrs	r3, r2
 800775a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	8afa      	ldrh	r2, [r7, #22]
 8007762:	60da      	str	r2, [r3, #12]
 8007764:	e052      	b.n	800780c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800776c:	e04e      	b.n	800780c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800776e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007772:	2b08      	cmp	r3, #8
 8007774:	d827      	bhi.n	80077c6 <UART_SetConfig+0x506>
 8007776:	a201      	add	r2, pc, #4	; (adr r2, 800777c <UART_SetConfig+0x4bc>)
 8007778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777c:	080077a1 	.word	0x080077a1
 8007780:	080077a9 	.word	0x080077a9
 8007784:	080077b1 	.word	0x080077b1
 8007788:	080077c7 	.word	0x080077c7
 800778c:	080077b7 	.word	0x080077b7
 8007790:	080077c7 	.word	0x080077c7
 8007794:	080077c7 	.word	0x080077c7
 8007798:	080077c7 	.word	0x080077c7
 800779c:	080077bf 	.word	0x080077bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a0:	f7fd ff38 	bl	8005614 <HAL_RCC_GetPCLK1Freq>
 80077a4:	61f8      	str	r0, [r7, #28]
        break;
 80077a6:	e014      	b.n	80077d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a8:	f7fd ff4a 	bl	8005640 <HAL_RCC_GetPCLK2Freq>
 80077ac:	61f8      	str	r0, [r7, #28]
        break;
 80077ae:	e010      	b.n	80077d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b0:	4b1e      	ldr	r3, [pc, #120]	; (800782c <UART_SetConfig+0x56c>)
 80077b2:	61fb      	str	r3, [r7, #28]
        break;
 80077b4:	e00d      	b.n	80077d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b6:	f7fd fe95 	bl	80054e4 <HAL_RCC_GetSysClockFreq>
 80077ba:	61f8      	str	r0, [r7, #28]
        break;
 80077bc:	e009      	b.n	80077d2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c2:	61fb      	str	r3, [r7, #28]
        break;
 80077c4:	e005      	b.n	80077d2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077d0:	bf00      	nop
    }

    if (pclk != 0U)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d019      	beq.n	800780c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	085a      	lsrs	r2, r3, #1
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	441a      	add	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	2b0f      	cmp	r3, #15
 80077f0:	d909      	bls.n	8007806 <UART_SetConfig+0x546>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077f8:	d205      	bcs.n	8007806 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60da      	str	r2, [r3, #12]
 8007804:	e002      	b.n	800780c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007818:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800781c:	4618      	mov	r0, r3
 800781e:	3728      	adds	r7, #40	; 0x28
 8007820:	46bd      	mov	sp, r7
 8007822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007826:	bf00      	nop
 8007828:	40008000 	.word	0x40008000
 800782c:	00f42400 	.word	0x00f42400

08007830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	430a      	orrs	r2, r1
 800789c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	f003 0308 	and.w	r3, r3, #8
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	430a      	orrs	r2, r1
 8007902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	d01a      	beq.n	8007946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800792e:	d10a      	bne.n	8007946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00a      	beq.n	8007968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	430a      	orrs	r2, r1
 8007966:	605a      	str	r2, [r3, #4]
  }
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007984:	f7fb ff06 	bl	8003794 <HAL_GetTick>
 8007988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 0308 	and.w	r3, r3, #8
 8007994:	2b08      	cmp	r3, #8
 8007996:	d10e      	bne.n	80079b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f82d 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e023      	b.n	80079fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b04      	cmp	r3, #4
 80079c2:	d10e      	bne.n	80079e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f817 	bl	8007a06 <UART_WaitOnFlagUntilTimeout>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e00d      	b.n	80079fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2220      	movs	r2, #32
 80079e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2220      	movs	r2, #32
 80079ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b09c      	sub	sp, #112	; 0x70
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a16:	e0a5      	b.n	8007b64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	f000 80a1 	beq.w	8007b64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a22:	f7fb feb7 	bl	8003794 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d13e      	bne.n	8007ab6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e6      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	f023 0301 	bic.w	r3, r3, #1
 8007a80:	663b      	str	r3, [r7, #96]	; 0x60
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a92:	e841 2300 	strex	r3, r2, [r1]
 8007a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1e5      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e067      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d04f      	beq.n	8007b64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad2:	d147      	bne.n	8007b64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007adc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e6      	bne.n	8007ade <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3308      	adds	r3, #8
 8007b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f023 0301 	bic.w	r3, r3, #1
 8007b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b30:	623a      	str	r2, [r7, #32]
 8007b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b34:	69f9      	ldr	r1, [r7, #28]
 8007b36:	6a3a      	ldr	r2, [r7, #32]
 8007b38:	e841 2300 	strex	r3, r2, [r1]
 8007b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e5      	bne.n	8007b10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e010      	b.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	69da      	ldr	r2, [r3, #28]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	bf0c      	ite	eq
 8007b74:	2301      	moveq	r3, #1
 8007b76:	2300      	movne	r3, #0
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	79fb      	ldrb	r3, [r7, #7]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	f43f af4a 	beq.w	8007a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3770      	adds	r7, #112	; 0x70
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007b94:	4904      	ldr	r1, [pc, #16]	; (8007ba8 <MX_FATFS_Init+0x18>)
 8007b96:	4805      	ldr	r0, [pc, #20]	; (8007bac <MX_FATFS_Init+0x1c>)
 8007b98:	f000 f8b0 	bl	8007cfc <FATFS_LinkDriver>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <MX_FATFS_Init+0x20>)
 8007ba2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ba4:	bf00      	nop
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	2000521c 	.word	0x2000521c
 8007bac:	2000000c 	.word	0x2000000c
 8007bb0:	20005218 	.word	0x20005218

08007bb4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007bbe:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <USER_initialize+0x24>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <USER_initialize+0x24>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	370c      	adds	r7, #12
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000009 	.word	0x20000009

08007bdc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	4603      	mov	r3, r0
 8007be4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007be6:	4b06      	ldr	r3, [pc, #24]	; (8007c00 <USER_status+0x24>)
 8007be8:	2201      	movs	r2, #1
 8007bea:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007bec:	4b04      	ldr	r3, [pc, #16]	; (8007c00 <USER_status+0x24>)
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000009 	.word	0x20000009

08007c04 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	607a      	str	r2, [r7, #4]
 8007c0e:	603b      	str	r3, [r7, #0]
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007c14:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007c22:	b480      	push	{r7}
 8007c24:	b085      	sub	sp, #20
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007c32:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3714      	adds	r7, #20
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	603a      	str	r2, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
    return res;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
	...

08007c64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c72:	2301      	movs	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007c7a:	4b1f      	ldr	r3, [pc, #124]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007c7c:	7a5b      	ldrb	r3, [r3, #9]
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d131      	bne.n	8007ce8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c84:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007c86:	7a5b      	ldrb	r3, [r3, #9]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007c8e:	2100      	movs	r1, #0
 8007c90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007c92:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007c94:	7a5b      	ldrb	r3, [r3, #9]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4413      	add	r3, r2
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007ca4:	7a5b      	ldrb	r3, [r3, #9]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007cac:	4413      	add	r3, r2
 8007cae:	79fa      	ldrb	r2, [r7, #7]
 8007cb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007cb4:	7a5b      	ldrb	r3, [r3, #9]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	1c5a      	adds	r2, r3, #1
 8007cba:	b2d1      	uxtb	r1, r2
 8007cbc:	4a0e      	ldr	r2, [pc, #56]	; (8007cf8 <FATFS_LinkDriverEx+0x94>)
 8007cbe:	7251      	strb	r1, [r2, #9]
 8007cc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cc2:	7dbb      	ldrb	r3, [r7, #22]
 8007cc4:	3330      	adds	r3, #48	; 0x30
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3301      	adds	r3, #1
 8007cd0:	223a      	movs	r2, #58	; 0x3a
 8007cd2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	222f      	movs	r2, #47	; 0x2f
 8007cda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3303      	adds	r3, #3
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20005220 	.word	0x20005220

08007cfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d06:	2200      	movs	r2, #0
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ffaa 	bl	8007c64 <FATFS_LinkDriverEx>
 8007d10:	4603      	mov	r3, r0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <std>:
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	b510      	push	{r4, lr}
 8007d20:	4604      	mov	r4, r0
 8007d22:	e9c0 3300 	strd	r3, r3, [r0]
 8007d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d2a:	6083      	str	r3, [r0, #8]
 8007d2c:	8181      	strh	r1, [r0, #12]
 8007d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8007d30:	81c2      	strh	r2, [r0, #14]
 8007d32:	6183      	str	r3, [r0, #24]
 8007d34:	4619      	mov	r1, r3
 8007d36:	2208      	movs	r2, #8
 8007d38:	305c      	adds	r0, #92	; 0x5c
 8007d3a:	f000 fa5b 	bl	80081f4 <memset>
 8007d3e:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <std+0x58>)
 8007d40:	6263      	str	r3, [r4, #36]	; 0x24
 8007d42:	4b0d      	ldr	r3, [pc, #52]	; (8007d78 <std+0x5c>)
 8007d44:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d46:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <std+0x60>)
 8007d48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <std+0x64>)
 8007d4c:	6323      	str	r3, [r4, #48]	; 0x30
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <std+0x68>)
 8007d50:	6224      	str	r4, [r4, #32]
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d006      	beq.n	8007d64 <std+0x48>
 8007d56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007d5a:	4294      	cmp	r4, r2
 8007d5c:	d002      	beq.n	8007d64 <std+0x48>
 8007d5e:	33d0      	adds	r3, #208	; 0xd0
 8007d60:	429c      	cmp	r4, r3
 8007d62:	d105      	bne.n	8007d70 <std+0x54>
 8007d64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d6c:	f000 bb64 	b.w	8008438 <__retarget_lock_init_recursive>
 8007d70:	bd10      	pop	{r4, pc}
 8007d72:	bf00      	nop
 8007d74:	08008025 	.word	0x08008025
 8007d78:	08008047 	.word	0x08008047
 8007d7c:	0800807f 	.word	0x0800807f
 8007d80:	080080a3 	.word	0x080080a3
 8007d84:	2000522c 	.word	0x2000522c

08007d88 <stdio_exit_handler>:
 8007d88:	4a02      	ldr	r2, [pc, #8]	; (8007d94 <stdio_exit_handler+0xc>)
 8007d8a:	4903      	ldr	r1, [pc, #12]	; (8007d98 <stdio_exit_handler+0x10>)
 8007d8c:	4803      	ldr	r0, [pc, #12]	; (8007d9c <stdio_exit_handler+0x14>)
 8007d8e:	f000 b869 	b.w	8007e64 <_fwalk_sglue>
 8007d92:	bf00      	nop
 8007d94:	20000020 	.word	0x20000020
 8007d98:	08008ffd 	.word	0x08008ffd
 8007d9c:	2000002c 	.word	0x2000002c

08007da0 <cleanup_stdio>:
 8007da0:	6841      	ldr	r1, [r0, #4]
 8007da2:	4b0c      	ldr	r3, [pc, #48]	; (8007dd4 <cleanup_stdio+0x34>)
 8007da4:	4299      	cmp	r1, r3
 8007da6:	b510      	push	{r4, lr}
 8007da8:	4604      	mov	r4, r0
 8007daa:	d001      	beq.n	8007db0 <cleanup_stdio+0x10>
 8007dac:	f001 f926 	bl	8008ffc <_fflush_r>
 8007db0:	68a1      	ldr	r1, [r4, #8]
 8007db2:	4b09      	ldr	r3, [pc, #36]	; (8007dd8 <cleanup_stdio+0x38>)
 8007db4:	4299      	cmp	r1, r3
 8007db6:	d002      	beq.n	8007dbe <cleanup_stdio+0x1e>
 8007db8:	4620      	mov	r0, r4
 8007dba:	f001 f91f 	bl	8008ffc <_fflush_r>
 8007dbe:	68e1      	ldr	r1, [r4, #12]
 8007dc0:	4b06      	ldr	r3, [pc, #24]	; (8007ddc <cleanup_stdio+0x3c>)
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	d004      	beq.n	8007dd0 <cleanup_stdio+0x30>
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dcc:	f001 b916 	b.w	8008ffc <_fflush_r>
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	bf00      	nop
 8007dd4:	2000522c 	.word	0x2000522c
 8007dd8:	20005294 	.word	0x20005294
 8007ddc:	200052fc 	.word	0x200052fc

08007de0 <global_stdio_init.part.0>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <global_stdio_init.part.0+0x30>)
 8007de4:	4c0b      	ldr	r4, [pc, #44]	; (8007e14 <global_stdio_init.part.0+0x34>)
 8007de6:	4a0c      	ldr	r2, [pc, #48]	; (8007e18 <global_stdio_init.part.0+0x38>)
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	4620      	mov	r0, r4
 8007dec:	2200      	movs	r2, #0
 8007dee:	2104      	movs	r1, #4
 8007df0:	f7ff ff94 	bl	8007d1c <std>
 8007df4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007df8:	2201      	movs	r2, #1
 8007dfa:	2109      	movs	r1, #9
 8007dfc:	f7ff ff8e 	bl	8007d1c <std>
 8007e00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007e04:	2202      	movs	r2, #2
 8007e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e0a:	2112      	movs	r1, #18
 8007e0c:	f7ff bf86 	b.w	8007d1c <std>
 8007e10:	20005364 	.word	0x20005364
 8007e14:	2000522c 	.word	0x2000522c
 8007e18:	08007d89 	.word	0x08007d89

08007e1c <__sfp_lock_acquire>:
 8007e1c:	4801      	ldr	r0, [pc, #4]	; (8007e24 <__sfp_lock_acquire+0x8>)
 8007e1e:	f000 bb0c 	b.w	800843a <__retarget_lock_acquire_recursive>
 8007e22:	bf00      	nop
 8007e24:	2000536d 	.word	0x2000536d

08007e28 <__sfp_lock_release>:
 8007e28:	4801      	ldr	r0, [pc, #4]	; (8007e30 <__sfp_lock_release+0x8>)
 8007e2a:	f000 bb07 	b.w	800843c <__retarget_lock_release_recursive>
 8007e2e:	bf00      	nop
 8007e30:	2000536d 	.word	0x2000536d

08007e34 <__sinit>:
 8007e34:	b510      	push	{r4, lr}
 8007e36:	4604      	mov	r4, r0
 8007e38:	f7ff fff0 	bl	8007e1c <__sfp_lock_acquire>
 8007e3c:	6a23      	ldr	r3, [r4, #32]
 8007e3e:	b11b      	cbz	r3, 8007e48 <__sinit+0x14>
 8007e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e44:	f7ff bff0 	b.w	8007e28 <__sfp_lock_release>
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <__sinit+0x28>)
 8007e4a:	6223      	str	r3, [r4, #32]
 8007e4c:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <__sinit+0x2c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1f5      	bne.n	8007e40 <__sinit+0xc>
 8007e54:	f7ff ffc4 	bl	8007de0 <global_stdio_init.part.0>
 8007e58:	e7f2      	b.n	8007e40 <__sinit+0xc>
 8007e5a:	bf00      	nop
 8007e5c:	08007da1 	.word	0x08007da1
 8007e60:	20005364 	.word	0x20005364

08007e64 <_fwalk_sglue>:
 8007e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e68:	4607      	mov	r7, r0
 8007e6a:	4688      	mov	r8, r1
 8007e6c:	4614      	mov	r4, r2
 8007e6e:	2600      	movs	r6, #0
 8007e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e74:	f1b9 0901 	subs.w	r9, r9, #1
 8007e78:	d505      	bpl.n	8007e86 <_fwalk_sglue+0x22>
 8007e7a:	6824      	ldr	r4, [r4, #0]
 8007e7c:	2c00      	cmp	r4, #0
 8007e7e:	d1f7      	bne.n	8007e70 <_fwalk_sglue+0xc>
 8007e80:	4630      	mov	r0, r6
 8007e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e86:	89ab      	ldrh	r3, [r5, #12]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d907      	bls.n	8007e9c <_fwalk_sglue+0x38>
 8007e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e90:	3301      	adds	r3, #1
 8007e92:	d003      	beq.n	8007e9c <_fwalk_sglue+0x38>
 8007e94:	4629      	mov	r1, r5
 8007e96:	4638      	mov	r0, r7
 8007e98:	47c0      	blx	r8
 8007e9a:	4306      	orrs	r6, r0
 8007e9c:	3568      	adds	r5, #104	; 0x68
 8007e9e:	e7e9      	b.n	8007e74 <_fwalk_sglue+0x10>

08007ea0 <iprintf>:
 8007ea0:	b40f      	push	{r0, r1, r2, r3}
 8007ea2:	b507      	push	{r0, r1, r2, lr}
 8007ea4:	4906      	ldr	r1, [pc, #24]	; (8007ec0 <iprintf+0x20>)
 8007ea6:	ab04      	add	r3, sp, #16
 8007ea8:	6808      	ldr	r0, [r1, #0]
 8007eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eae:	6881      	ldr	r1, [r0, #8]
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	f000 fd73 	bl	800899c <_vfiprintf_r>
 8007eb6:	b003      	add	sp, #12
 8007eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ebc:	b004      	add	sp, #16
 8007ebe:	4770      	bx	lr
 8007ec0:	20000078 	.word	0x20000078

08007ec4 <_puts_r>:
 8007ec4:	6a03      	ldr	r3, [r0, #32]
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	6884      	ldr	r4, [r0, #8]
 8007eca:	4605      	mov	r5, r0
 8007ecc:	460e      	mov	r6, r1
 8007ece:	b90b      	cbnz	r3, 8007ed4 <_puts_r+0x10>
 8007ed0:	f7ff ffb0 	bl	8007e34 <__sinit>
 8007ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ed6:	07db      	lsls	r3, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_puts_r+0x22>
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	0598      	lsls	r0, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_puts_r+0x22>
 8007ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee2:	f000 faaa 	bl	800843a <__retarget_lock_acquire_recursive>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	0719      	lsls	r1, r3, #28
 8007eea:	d513      	bpl.n	8007f14 <_puts_r+0x50>
 8007eec:	6923      	ldr	r3, [r4, #16]
 8007eee:	b18b      	cbz	r3, 8007f14 <_puts_r+0x50>
 8007ef0:	3e01      	subs	r6, #1
 8007ef2:	68a3      	ldr	r3, [r4, #8]
 8007ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	60a3      	str	r3, [r4, #8]
 8007efc:	b9e9      	cbnz	r1, 8007f3a <_puts_r+0x76>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da2e      	bge.n	8007f60 <_puts_r+0x9c>
 8007f02:	4622      	mov	r2, r4
 8007f04:	210a      	movs	r1, #10
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 f8cf 	bl	80080aa <__swbuf_r>
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	d007      	beq.n	8007f20 <_puts_r+0x5c>
 8007f10:	250a      	movs	r5, #10
 8007f12:	e007      	b.n	8007f24 <_puts_r+0x60>
 8007f14:	4621      	mov	r1, r4
 8007f16:	4628      	mov	r0, r5
 8007f18:	f000 f904 	bl	8008124 <__swsetup_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d0e7      	beq.n	8007ef0 <_puts_r+0x2c>
 8007f20:	f04f 35ff 	mov.w	r5, #4294967295
 8007f24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f26:	07da      	lsls	r2, r3, #31
 8007f28:	d405      	bmi.n	8007f36 <_puts_r+0x72>
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	059b      	lsls	r3, r3, #22
 8007f2e:	d402      	bmi.n	8007f36 <_puts_r+0x72>
 8007f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f32:	f000 fa83 	bl	800843c <__retarget_lock_release_recursive>
 8007f36:	4628      	mov	r0, r5
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	da04      	bge.n	8007f48 <_puts_r+0x84>
 8007f3e:	69a2      	ldr	r2, [r4, #24]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	dc06      	bgt.n	8007f52 <_puts_r+0x8e>
 8007f44:	290a      	cmp	r1, #10
 8007f46:	d004      	beq.n	8007f52 <_puts_r+0x8e>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	1c5a      	adds	r2, r3, #1
 8007f4c:	6022      	str	r2, [r4, #0]
 8007f4e:	7019      	strb	r1, [r3, #0]
 8007f50:	e7cf      	b.n	8007ef2 <_puts_r+0x2e>
 8007f52:	4622      	mov	r2, r4
 8007f54:	4628      	mov	r0, r5
 8007f56:	f000 f8a8 	bl	80080aa <__swbuf_r>
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d1c9      	bne.n	8007ef2 <_puts_r+0x2e>
 8007f5e:	e7df      	b.n	8007f20 <_puts_r+0x5c>
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	250a      	movs	r5, #10
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	701d      	strb	r5, [r3, #0]
 8007f6a:	e7db      	b.n	8007f24 <_puts_r+0x60>

08007f6c <puts>:
 8007f6c:	4b02      	ldr	r3, [pc, #8]	; (8007f78 <puts+0xc>)
 8007f6e:	4601      	mov	r1, r0
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	f7ff bfa7 	b.w	8007ec4 <_puts_r>
 8007f76:	bf00      	nop
 8007f78:	20000078 	.word	0x20000078

08007f7c <sniprintf>:
 8007f7c:	b40c      	push	{r2, r3}
 8007f7e:	b530      	push	{r4, r5, lr}
 8007f80:	4b17      	ldr	r3, [pc, #92]	; (8007fe0 <sniprintf+0x64>)
 8007f82:	1e0c      	subs	r4, r1, #0
 8007f84:	681d      	ldr	r5, [r3, #0]
 8007f86:	b09d      	sub	sp, #116	; 0x74
 8007f88:	da08      	bge.n	8007f9c <sniprintf+0x20>
 8007f8a:	238b      	movs	r3, #139	; 0x8b
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f92:	b01d      	add	sp, #116	; 0x74
 8007f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f98:	b002      	add	sp, #8
 8007f9a:	4770      	bx	lr
 8007f9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007fa4:	bf14      	ite	ne
 8007fa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007faa:	4623      	moveq	r3, r4
 8007fac:	9304      	str	r3, [sp, #16]
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fb4:	9002      	str	r0, [sp, #8]
 8007fb6:	9006      	str	r0, [sp, #24]
 8007fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007fbe:	ab21      	add	r3, sp, #132	; 0x84
 8007fc0:	a902      	add	r1, sp, #8
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	f000 fbc1 	bl	800874c <_svfiprintf_r>
 8007fca:	1c43      	adds	r3, r0, #1
 8007fcc:	bfbc      	itt	lt
 8007fce:	238b      	movlt	r3, #139	; 0x8b
 8007fd0:	602b      	strlt	r3, [r5, #0]
 8007fd2:	2c00      	cmp	r4, #0
 8007fd4:	d0dd      	beq.n	8007f92 <sniprintf+0x16>
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	701a      	strb	r2, [r3, #0]
 8007fdc:	e7d9      	b.n	8007f92 <sniprintf+0x16>
 8007fde:	bf00      	nop
 8007fe0:	20000078 	.word	0x20000078

08007fe4 <siprintf>:
 8007fe4:	b40e      	push	{r1, r2, r3}
 8007fe6:	b500      	push	{lr}
 8007fe8:	b09c      	sub	sp, #112	; 0x70
 8007fea:	ab1d      	add	r3, sp, #116	; 0x74
 8007fec:	9002      	str	r0, [sp, #8]
 8007fee:	9006      	str	r0, [sp, #24]
 8007ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ff4:	4809      	ldr	r0, [pc, #36]	; (800801c <siprintf+0x38>)
 8007ff6:	9107      	str	r1, [sp, #28]
 8007ff8:	9104      	str	r1, [sp, #16]
 8007ffa:	4909      	ldr	r1, [pc, #36]	; (8008020 <siprintf+0x3c>)
 8007ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008000:	9105      	str	r1, [sp, #20]
 8008002:	6800      	ldr	r0, [r0, #0]
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	a902      	add	r1, sp, #8
 8008008:	f000 fba0 	bl	800874c <_svfiprintf_r>
 800800c:	9b02      	ldr	r3, [sp, #8]
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	b01c      	add	sp, #112	; 0x70
 8008014:	f85d eb04 	ldr.w	lr, [sp], #4
 8008018:	b003      	add	sp, #12
 800801a:	4770      	bx	lr
 800801c:	20000078 	.word	0x20000078
 8008020:	ffff0208 	.word	0xffff0208

08008024 <__sread>:
 8008024:	b510      	push	{r4, lr}
 8008026:	460c      	mov	r4, r1
 8008028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800802c:	f000 f9b6 	bl	800839c <_read_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	bfab      	itete	ge
 8008034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008036:	89a3      	ldrhlt	r3, [r4, #12]
 8008038:	181b      	addge	r3, r3, r0
 800803a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800803e:	bfac      	ite	ge
 8008040:	6563      	strge	r3, [r4, #84]	; 0x54
 8008042:	81a3      	strhlt	r3, [r4, #12]
 8008044:	bd10      	pop	{r4, pc}

08008046 <__swrite>:
 8008046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800804a:	461f      	mov	r7, r3
 800804c:	898b      	ldrh	r3, [r1, #12]
 800804e:	05db      	lsls	r3, r3, #23
 8008050:	4605      	mov	r5, r0
 8008052:	460c      	mov	r4, r1
 8008054:	4616      	mov	r6, r2
 8008056:	d505      	bpl.n	8008064 <__swrite+0x1e>
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	2302      	movs	r3, #2
 800805e:	2200      	movs	r2, #0
 8008060:	f000 f98a 	bl	8008378 <_lseek_r>
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800806a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800806e:	81a3      	strh	r3, [r4, #12]
 8008070:	4632      	mov	r2, r6
 8008072:	463b      	mov	r3, r7
 8008074:	4628      	mov	r0, r5
 8008076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800807a:	f000 b9a1 	b.w	80083c0 <_write_r>

0800807e <__sseek>:
 800807e:	b510      	push	{r4, lr}
 8008080:	460c      	mov	r4, r1
 8008082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008086:	f000 f977 	bl	8008378 <_lseek_r>
 800808a:	1c43      	adds	r3, r0, #1
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	bf15      	itete	ne
 8008090:	6560      	strne	r0, [r4, #84]	; 0x54
 8008092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800809a:	81a3      	strheq	r3, [r4, #12]
 800809c:	bf18      	it	ne
 800809e:	81a3      	strhne	r3, [r4, #12]
 80080a0:	bd10      	pop	{r4, pc}

080080a2 <__sclose>:
 80080a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a6:	f000 b957 	b.w	8008358 <_close_r>

080080aa <__swbuf_r>:
 80080aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ac:	460e      	mov	r6, r1
 80080ae:	4614      	mov	r4, r2
 80080b0:	4605      	mov	r5, r0
 80080b2:	b118      	cbz	r0, 80080bc <__swbuf_r+0x12>
 80080b4:	6a03      	ldr	r3, [r0, #32]
 80080b6:	b90b      	cbnz	r3, 80080bc <__swbuf_r+0x12>
 80080b8:	f7ff febc 	bl	8007e34 <__sinit>
 80080bc:	69a3      	ldr	r3, [r4, #24]
 80080be:	60a3      	str	r3, [r4, #8]
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	071a      	lsls	r2, r3, #28
 80080c4:	d525      	bpl.n	8008112 <__swbuf_r+0x68>
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	b31b      	cbz	r3, 8008112 <__swbuf_r+0x68>
 80080ca:	6823      	ldr	r3, [r4, #0]
 80080cc:	6922      	ldr	r2, [r4, #16]
 80080ce:	1a98      	subs	r0, r3, r2
 80080d0:	6963      	ldr	r3, [r4, #20]
 80080d2:	b2f6      	uxtb	r6, r6
 80080d4:	4283      	cmp	r3, r0
 80080d6:	4637      	mov	r7, r6
 80080d8:	dc04      	bgt.n	80080e4 <__swbuf_r+0x3a>
 80080da:	4621      	mov	r1, r4
 80080dc:	4628      	mov	r0, r5
 80080de:	f000 ff8d 	bl	8008ffc <_fflush_r>
 80080e2:	b9e0      	cbnz	r0, 800811e <__swbuf_r+0x74>
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	60a3      	str	r3, [r4, #8]
 80080ea:	6823      	ldr	r3, [r4, #0]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	6022      	str	r2, [r4, #0]
 80080f0:	701e      	strb	r6, [r3, #0]
 80080f2:	6962      	ldr	r2, [r4, #20]
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d004      	beq.n	8008104 <__swbuf_r+0x5a>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	07db      	lsls	r3, r3, #31
 80080fe:	d506      	bpl.n	800810e <__swbuf_r+0x64>
 8008100:	2e0a      	cmp	r6, #10
 8008102:	d104      	bne.n	800810e <__swbuf_r+0x64>
 8008104:	4621      	mov	r1, r4
 8008106:	4628      	mov	r0, r5
 8008108:	f000 ff78 	bl	8008ffc <_fflush_r>
 800810c:	b938      	cbnz	r0, 800811e <__swbuf_r+0x74>
 800810e:	4638      	mov	r0, r7
 8008110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008112:	4621      	mov	r1, r4
 8008114:	4628      	mov	r0, r5
 8008116:	f000 f805 	bl	8008124 <__swsetup_r>
 800811a:	2800      	cmp	r0, #0
 800811c:	d0d5      	beq.n	80080ca <__swbuf_r+0x20>
 800811e:	f04f 37ff 	mov.w	r7, #4294967295
 8008122:	e7f4      	b.n	800810e <__swbuf_r+0x64>

08008124 <__swsetup_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <__swsetup_r+0xac>)
 8008128:	4605      	mov	r5, r0
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	460c      	mov	r4, r1
 800812e:	b118      	cbz	r0, 8008138 <__swsetup_r+0x14>
 8008130:	6a03      	ldr	r3, [r0, #32]
 8008132:	b90b      	cbnz	r3, 8008138 <__swsetup_r+0x14>
 8008134:	f7ff fe7e 	bl	8007e34 <__sinit>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800813e:	0718      	lsls	r0, r3, #28
 8008140:	d422      	bmi.n	8008188 <__swsetup_r+0x64>
 8008142:	06d9      	lsls	r1, r3, #27
 8008144:	d407      	bmi.n	8008156 <__swsetup_r+0x32>
 8008146:	2309      	movs	r3, #9
 8008148:	602b      	str	r3, [r5, #0]
 800814a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800814e:	81a3      	strh	r3, [r4, #12]
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e034      	b.n	80081c0 <__swsetup_r+0x9c>
 8008156:	0758      	lsls	r0, r3, #29
 8008158:	d512      	bpl.n	8008180 <__swsetup_r+0x5c>
 800815a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800815c:	b141      	cbz	r1, 8008170 <__swsetup_r+0x4c>
 800815e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008162:	4299      	cmp	r1, r3
 8008164:	d002      	beq.n	800816c <__swsetup_r+0x48>
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f996 	bl	8008498 <_free_r>
 800816c:	2300      	movs	r3, #0
 800816e:	6363      	str	r3, [r4, #52]	; 0x34
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008176:	81a3      	strh	r3, [r4, #12]
 8008178:	2300      	movs	r3, #0
 800817a:	6063      	str	r3, [r4, #4]
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	f043 0308 	orr.w	r3, r3, #8
 8008186:	81a3      	strh	r3, [r4, #12]
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	b94b      	cbnz	r3, 80081a0 <__swsetup_r+0x7c>
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008196:	d003      	beq.n	80081a0 <__swsetup_r+0x7c>
 8008198:	4621      	mov	r1, r4
 800819a:	4628      	mov	r0, r5
 800819c:	f000 ff8e 	bl	80090bc <__smakebuf_r>
 80081a0:	89a0      	ldrh	r0, [r4, #12]
 80081a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081a6:	f010 0301 	ands.w	r3, r0, #1
 80081aa:	d00a      	beq.n	80081c2 <__swsetup_r+0x9e>
 80081ac:	2300      	movs	r3, #0
 80081ae:	60a3      	str	r3, [r4, #8]
 80081b0:	6963      	ldr	r3, [r4, #20]
 80081b2:	425b      	negs	r3, r3
 80081b4:	61a3      	str	r3, [r4, #24]
 80081b6:	6923      	ldr	r3, [r4, #16]
 80081b8:	b943      	cbnz	r3, 80081cc <__swsetup_r+0xa8>
 80081ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081be:	d1c4      	bne.n	800814a <__swsetup_r+0x26>
 80081c0:	bd38      	pop	{r3, r4, r5, pc}
 80081c2:	0781      	lsls	r1, r0, #30
 80081c4:	bf58      	it	pl
 80081c6:	6963      	ldrpl	r3, [r4, #20]
 80081c8:	60a3      	str	r3, [r4, #8]
 80081ca:	e7f4      	b.n	80081b6 <__swsetup_r+0x92>
 80081cc:	2000      	movs	r0, #0
 80081ce:	e7f7      	b.n	80081c0 <__swsetup_r+0x9c>
 80081d0:	20000078 	.word	0x20000078

080081d4 <memcmp>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	3901      	subs	r1, #1
 80081d8:	4402      	add	r2, r0
 80081da:	4290      	cmp	r0, r2
 80081dc:	d101      	bne.n	80081e2 <memcmp+0xe>
 80081de:	2000      	movs	r0, #0
 80081e0:	e005      	b.n	80081ee <memcmp+0x1a>
 80081e2:	7803      	ldrb	r3, [r0, #0]
 80081e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d001      	beq.n	80081f0 <memcmp+0x1c>
 80081ec:	1b18      	subs	r0, r3, r4
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	3001      	adds	r0, #1
 80081f2:	e7f2      	b.n	80081da <memcmp+0x6>

080081f4 <memset>:
 80081f4:	4402      	add	r2, r0
 80081f6:	4603      	mov	r3, r0
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d100      	bne.n	80081fe <memset+0xa>
 80081fc:	4770      	bx	lr
 80081fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008202:	e7f9      	b.n	80081f8 <memset+0x4>

08008204 <strcat>:
 8008204:	b510      	push	{r4, lr}
 8008206:	4602      	mov	r2, r0
 8008208:	7814      	ldrb	r4, [r2, #0]
 800820a:	4613      	mov	r3, r2
 800820c:	3201      	adds	r2, #1
 800820e:	2c00      	cmp	r4, #0
 8008210:	d1fa      	bne.n	8008208 <strcat+0x4>
 8008212:	3b01      	subs	r3, #1
 8008214:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008218:	f803 2f01 	strb.w	r2, [r3, #1]!
 800821c:	2a00      	cmp	r2, #0
 800821e:	d1f9      	bne.n	8008214 <strcat+0x10>
 8008220:	bd10      	pop	{r4, pc}

08008222 <strncmp>:
 8008222:	b510      	push	{r4, lr}
 8008224:	b16a      	cbz	r2, 8008242 <strncmp+0x20>
 8008226:	3901      	subs	r1, #1
 8008228:	1884      	adds	r4, r0, r2
 800822a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800822e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008232:	429a      	cmp	r2, r3
 8008234:	d103      	bne.n	800823e <strncmp+0x1c>
 8008236:	42a0      	cmp	r0, r4
 8008238:	d001      	beq.n	800823e <strncmp+0x1c>
 800823a:	2a00      	cmp	r2, #0
 800823c:	d1f5      	bne.n	800822a <strncmp+0x8>
 800823e:	1ad0      	subs	r0, r2, r3
 8008240:	bd10      	pop	{r4, pc}
 8008242:	4610      	mov	r0, r2
 8008244:	e7fc      	b.n	8008240 <strncmp+0x1e>

08008246 <strncpy>:
 8008246:	b510      	push	{r4, lr}
 8008248:	3901      	subs	r1, #1
 800824a:	4603      	mov	r3, r0
 800824c:	b132      	cbz	r2, 800825c <strncpy+0x16>
 800824e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008252:	f803 4b01 	strb.w	r4, [r3], #1
 8008256:	3a01      	subs	r2, #1
 8008258:	2c00      	cmp	r4, #0
 800825a:	d1f7      	bne.n	800824c <strncpy+0x6>
 800825c:	441a      	add	r2, r3
 800825e:	2100      	movs	r1, #0
 8008260:	4293      	cmp	r3, r2
 8008262:	d100      	bne.n	8008266 <strncpy+0x20>
 8008264:	bd10      	pop	{r4, pc}
 8008266:	f803 1b01 	strb.w	r1, [r3], #1
 800826a:	e7f9      	b.n	8008260 <strncpy+0x1a>

0800826c <strtok>:
 800826c:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <strtok+0x5c>)
 800826e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008270:	681e      	ldr	r6, [r3, #0]
 8008272:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8008274:	4605      	mov	r5, r0
 8008276:	b9fc      	cbnz	r4, 80082b8 <strtok+0x4c>
 8008278:	2050      	movs	r0, #80	; 0x50
 800827a:	9101      	str	r1, [sp, #4]
 800827c:	f000 f958 	bl	8008530 <malloc>
 8008280:	9901      	ldr	r1, [sp, #4]
 8008282:	6470      	str	r0, [r6, #68]	; 0x44
 8008284:	4602      	mov	r2, r0
 8008286:	b920      	cbnz	r0, 8008292 <strtok+0x26>
 8008288:	4b10      	ldr	r3, [pc, #64]	; (80082cc <strtok+0x60>)
 800828a:	4811      	ldr	r0, [pc, #68]	; (80082d0 <strtok+0x64>)
 800828c:	215b      	movs	r1, #91	; 0x5b
 800828e:	f000 f8e5 	bl	800845c <__assert_func>
 8008292:	e9c0 4400 	strd	r4, r4, [r0]
 8008296:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800829a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800829e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80082a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80082a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80082aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80082ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80082b2:	6184      	str	r4, [r0, #24]
 80082b4:	7704      	strb	r4, [r0, #28]
 80082b6:	6244      	str	r4, [r0, #36]	; 0x24
 80082b8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80082ba:	2301      	movs	r3, #1
 80082bc:	4628      	mov	r0, r5
 80082be:	b002      	add	sp, #8
 80082c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80082c4:	f000 b806 	b.w	80082d4 <__strtok_r>
 80082c8:	20000078 	.word	0x20000078
 80082cc:	08009df0 	.word	0x08009df0
 80082d0:	08009e07 	.word	0x08009e07

080082d4 <__strtok_r>:
 80082d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d6:	b908      	cbnz	r0, 80082dc <__strtok_r+0x8>
 80082d8:	6810      	ldr	r0, [r2, #0]
 80082da:	b188      	cbz	r0, 8008300 <__strtok_r+0x2c>
 80082dc:	4604      	mov	r4, r0
 80082de:	4620      	mov	r0, r4
 80082e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80082e4:	460f      	mov	r7, r1
 80082e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80082ea:	b91e      	cbnz	r6, 80082f4 <__strtok_r+0x20>
 80082ec:	b965      	cbnz	r5, 8008308 <__strtok_r+0x34>
 80082ee:	6015      	str	r5, [r2, #0]
 80082f0:	4628      	mov	r0, r5
 80082f2:	e005      	b.n	8008300 <__strtok_r+0x2c>
 80082f4:	42b5      	cmp	r5, r6
 80082f6:	d1f6      	bne.n	80082e6 <__strtok_r+0x12>
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f0      	bne.n	80082de <__strtok_r+0xa>
 80082fc:	6014      	str	r4, [r2, #0]
 80082fe:	7003      	strb	r3, [r0, #0]
 8008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008302:	461c      	mov	r4, r3
 8008304:	e00c      	b.n	8008320 <__strtok_r+0x4c>
 8008306:	b915      	cbnz	r5, 800830e <__strtok_r+0x3a>
 8008308:	f814 3b01 	ldrb.w	r3, [r4], #1
 800830c:	460e      	mov	r6, r1
 800830e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008312:	42ab      	cmp	r3, r5
 8008314:	d1f7      	bne.n	8008306 <__strtok_r+0x32>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0f3      	beq.n	8008302 <__strtok_r+0x2e>
 800831a:	2300      	movs	r3, #0
 800831c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008320:	6014      	str	r4, [r2, #0]
 8008322:	e7ed      	b.n	8008300 <__strtok_r+0x2c>

08008324 <strtok_r>:
 8008324:	2301      	movs	r3, #1
 8008326:	f7ff bfd5 	b.w	80082d4 <__strtok_r>

0800832a <strstr>:
 800832a:	780a      	ldrb	r2, [r1, #0]
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	b96a      	cbnz	r2, 800834c <strstr+0x22>
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	429a      	cmp	r2, r3
 8008334:	d109      	bne.n	800834a <strstr+0x20>
 8008336:	460c      	mov	r4, r1
 8008338:	4605      	mov	r5, r0
 800833a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800833e:	2b00      	cmp	r3, #0
 8008340:	d0f6      	beq.n	8008330 <strstr+0x6>
 8008342:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008346:	429e      	cmp	r6, r3
 8008348:	d0f7      	beq.n	800833a <strstr+0x10>
 800834a:	3001      	adds	r0, #1
 800834c:	7803      	ldrb	r3, [r0, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1ef      	bne.n	8008332 <strstr+0x8>
 8008352:	4618      	mov	r0, r3
 8008354:	e7ec      	b.n	8008330 <strstr+0x6>
	...

08008358 <_close_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4d06      	ldr	r5, [pc, #24]	; (8008374 <_close_r+0x1c>)
 800835c:	2300      	movs	r3, #0
 800835e:	4604      	mov	r4, r0
 8008360:	4608      	mov	r0, r1
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	f7f9 fc14 	bl	8001b90 <_close>
 8008368:	1c43      	adds	r3, r0, #1
 800836a:	d102      	bne.n	8008372 <_close_r+0x1a>
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	b103      	cbz	r3, 8008372 <_close_r+0x1a>
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	bd38      	pop	{r3, r4, r5, pc}
 8008374:	20005368 	.word	0x20005368

08008378 <_lseek_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_lseek_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7f9 fc29 	bl	8001bde <_lseek>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_lseek_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_lseek_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20005368 	.word	0x20005368

0800839c <_read_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d07      	ldr	r5, [pc, #28]	; (80083bc <_read_r+0x20>)
 80083a0:	4604      	mov	r4, r0
 80083a2:	4608      	mov	r0, r1
 80083a4:	4611      	mov	r1, r2
 80083a6:	2200      	movs	r2, #0
 80083a8:	602a      	str	r2, [r5, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	f7f9 fbb4 	bl	8001b18 <_read>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_read_r+0x1e>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_read_r+0x1e>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	20005368 	.word	0x20005368

080083c0 <_write_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d07      	ldr	r5, [pc, #28]	; (80083e0 <_write_r+0x20>)
 80083c4:	4604      	mov	r4, r0
 80083c6:	4608      	mov	r0, r1
 80083c8:	4611      	mov	r1, r2
 80083ca:	2200      	movs	r2, #0
 80083cc:	602a      	str	r2, [r5, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	f7f9 fbc0 	bl	8001b54 <_write>
 80083d4:	1c43      	adds	r3, r0, #1
 80083d6:	d102      	bne.n	80083de <_write_r+0x1e>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	b103      	cbz	r3, 80083de <_write_r+0x1e>
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	bd38      	pop	{r3, r4, r5, pc}
 80083e0:	20005368 	.word	0x20005368

080083e4 <__errno>:
 80083e4:	4b01      	ldr	r3, [pc, #4]	; (80083ec <__errno+0x8>)
 80083e6:	6818      	ldr	r0, [r3, #0]
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	20000078 	.word	0x20000078

080083f0 <__libc_init_array>:
 80083f0:	b570      	push	{r4, r5, r6, lr}
 80083f2:	4d0d      	ldr	r5, [pc, #52]	; (8008428 <__libc_init_array+0x38>)
 80083f4:	4c0d      	ldr	r4, [pc, #52]	; (800842c <__libc_init_array+0x3c>)
 80083f6:	1b64      	subs	r4, r4, r5
 80083f8:	10a4      	asrs	r4, r4, #2
 80083fa:	2600      	movs	r6, #0
 80083fc:	42a6      	cmp	r6, r4
 80083fe:	d109      	bne.n	8008414 <__libc_init_array+0x24>
 8008400:	4d0b      	ldr	r5, [pc, #44]	; (8008430 <__libc_init_array+0x40>)
 8008402:	4c0c      	ldr	r4, [pc, #48]	; (8008434 <__libc_init_array+0x44>)
 8008404:	f000 ff64 	bl	80092d0 <_init>
 8008408:	1b64      	subs	r4, r4, r5
 800840a:	10a4      	asrs	r4, r4, #2
 800840c:	2600      	movs	r6, #0
 800840e:	42a6      	cmp	r6, r4
 8008410:	d105      	bne.n	800841e <__libc_init_array+0x2e>
 8008412:	bd70      	pop	{r4, r5, r6, pc}
 8008414:	f855 3b04 	ldr.w	r3, [r5], #4
 8008418:	4798      	blx	r3
 800841a:	3601      	adds	r6, #1
 800841c:	e7ee      	b.n	80083fc <__libc_init_array+0xc>
 800841e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008422:	4798      	blx	r3
 8008424:	3601      	adds	r6, #1
 8008426:	e7f2      	b.n	800840e <__libc_init_array+0x1e>
 8008428:	08009ed8 	.word	0x08009ed8
 800842c:	08009ed8 	.word	0x08009ed8
 8008430:	08009ed8 	.word	0x08009ed8
 8008434:	08009edc 	.word	0x08009edc

08008438 <__retarget_lock_init_recursive>:
 8008438:	4770      	bx	lr

0800843a <__retarget_lock_acquire_recursive>:
 800843a:	4770      	bx	lr

0800843c <__retarget_lock_release_recursive>:
 800843c:	4770      	bx	lr

0800843e <memcpy>:
 800843e:	440a      	add	r2, r1
 8008440:	4291      	cmp	r1, r2
 8008442:	f100 33ff 	add.w	r3, r0, #4294967295
 8008446:	d100      	bne.n	800844a <memcpy+0xc>
 8008448:	4770      	bx	lr
 800844a:	b510      	push	{r4, lr}
 800844c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008454:	4291      	cmp	r1, r2
 8008456:	d1f9      	bne.n	800844c <memcpy+0xe>
 8008458:	bd10      	pop	{r4, pc}
	...

0800845c <__assert_func>:
 800845c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800845e:	4614      	mov	r4, r2
 8008460:	461a      	mov	r2, r3
 8008462:	4b09      	ldr	r3, [pc, #36]	; (8008488 <__assert_func+0x2c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4605      	mov	r5, r0
 8008468:	68d8      	ldr	r0, [r3, #12]
 800846a:	b14c      	cbz	r4, 8008480 <__assert_func+0x24>
 800846c:	4b07      	ldr	r3, [pc, #28]	; (800848c <__assert_func+0x30>)
 800846e:	9100      	str	r1, [sp, #0]
 8008470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008474:	4906      	ldr	r1, [pc, #24]	; (8008490 <__assert_func+0x34>)
 8008476:	462b      	mov	r3, r5
 8008478:	f000 fde8 	bl	800904c <fiprintf>
 800847c:	f000 fea6 	bl	80091cc <abort>
 8008480:	4b04      	ldr	r3, [pc, #16]	; (8008494 <__assert_func+0x38>)
 8008482:	461c      	mov	r4, r3
 8008484:	e7f3      	b.n	800846e <__assert_func+0x12>
 8008486:	bf00      	nop
 8008488:	20000078 	.word	0x20000078
 800848c:	08009e61 	.word	0x08009e61
 8008490:	08009e6e 	.word	0x08009e6e
 8008494:	08009e9c 	.word	0x08009e9c

08008498 <_free_r>:
 8008498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800849a:	2900      	cmp	r1, #0
 800849c:	d044      	beq.n	8008528 <_free_r+0x90>
 800849e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a2:	9001      	str	r0, [sp, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f1a1 0404 	sub.w	r4, r1, #4
 80084aa:	bfb8      	it	lt
 80084ac:	18e4      	addlt	r4, r4, r3
 80084ae:	f000 f8e7 	bl	8008680 <__malloc_lock>
 80084b2:	4a1e      	ldr	r2, [pc, #120]	; (800852c <_free_r+0x94>)
 80084b4:	9801      	ldr	r0, [sp, #4]
 80084b6:	6813      	ldr	r3, [r2, #0]
 80084b8:	b933      	cbnz	r3, 80084c8 <_free_r+0x30>
 80084ba:	6063      	str	r3, [r4, #4]
 80084bc:	6014      	str	r4, [r2, #0]
 80084be:	b003      	add	sp, #12
 80084c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084c4:	f000 b8e2 	b.w	800868c <__malloc_unlock>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d908      	bls.n	80084de <_free_r+0x46>
 80084cc:	6825      	ldr	r5, [r4, #0]
 80084ce:	1961      	adds	r1, r4, r5
 80084d0:	428b      	cmp	r3, r1
 80084d2:	bf01      	itttt	eq
 80084d4:	6819      	ldreq	r1, [r3, #0]
 80084d6:	685b      	ldreq	r3, [r3, #4]
 80084d8:	1949      	addeq	r1, r1, r5
 80084da:	6021      	streq	r1, [r4, #0]
 80084dc:	e7ed      	b.n	80084ba <_free_r+0x22>
 80084de:	461a      	mov	r2, r3
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	b10b      	cbz	r3, 80084e8 <_free_r+0x50>
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	d9fa      	bls.n	80084de <_free_r+0x46>
 80084e8:	6811      	ldr	r1, [r2, #0]
 80084ea:	1855      	adds	r5, r2, r1
 80084ec:	42a5      	cmp	r5, r4
 80084ee:	d10b      	bne.n	8008508 <_free_r+0x70>
 80084f0:	6824      	ldr	r4, [r4, #0]
 80084f2:	4421      	add	r1, r4
 80084f4:	1854      	adds	r4, r2, r1
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	6011      	str	r1, [r2, #0]
 80084fa:	d1e0      	bne.n	80084be <_free_r+0x26>
 80084fc:	681c      	ldr	r4, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	6053      	str	r3, [r2, #4]
 8008502:	440c      	add	r4, r1
 8008504:	6014      	str	r4, [r2, #0]
 8008506:	e7da      	b.n	80084be <_free_r+0x26>
 8008508:	d902      	bls.n	8008510 <_free_r+0x78>
 800850a:	230c      	movs	r3, #12
 800850c:	6003      	str	r3, [r0, #0]
 800850e:	e7d6      	b.n	80084be <_free_r+0x26>
 8008510:	6825      	ldr	r5, [r4, #0]
 8008512:	1961      	adds	r1, r4, r5
 8008514:	428b      	cmp	r3, r1
 8008516:	bf04      	itt	eq
 8008518:	6819      	ldreq	r1, [r3, #0]
 800851a:	685b      	ldreq	r3, [r3, #4]
 800851c:	6063      	str	r3, [r4, #4]
 800851e:	bf04      	itt	eq
 8008520:	1949      	addeq	r1, r1, r5
 8008522:	6021      	streq	r1, [r4, #0]
 8008524:	6054      	str	r4, [r2, #4]
 8008526:	e7ca      	b.n	80084be <_free_r+0x26>
 8008528:	b003      	add	sp, #12
 800852a:	bd30      	pop	{r4, r5, pc}
 800852c:	20005370 	.word	0x20005370

08008530 <malloc>:
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <malloc+0xc>)
 8008532:	4601      	mov	r1, r0
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	f000 b823 	b.w	8008580 <_malloc_r>
 800853a:	bf00      	nop
 800853c:	20000078 	.word	0x20000078

08008540 <sbrk_aligned>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	4e0e      	ldr	r6, [pc, #56]	; (800857c <sbrk_aligned+0x3c>)
 8008544:	460c      	mov	r4, r1
 8008546:	6831      	ldr	r1, [r6, #0]
 8008548:	4605      	mov	r5, r0
 800854a:	b911      	cbnz	r1, 8008552 <sbrk_aligned+0x12>
 800854c:	f000 fe2e 	bl	80091ac <_sbrk_r>
 8008550:	6030      	str	r0, [r6, #0]
 8008552:	4621      	mov	r1, r4
 8008554:	4628      	mov	r0, r5
 8008556:	f000 fe29 	bl	80091ac <_sbrk_r>
 800855a:	1c43      	adds	r3, r0, #1
 800855c:	d00a      	beq.n	8008574 <sbrk_aligned+0x34>
 800855e:	1cc4      	adds	r4, r0, #3
 8008560:	f024 0403 	bic.w	r4, r4, #3
 8008564:	42a0      	cmp	r0, r4
 8008566:	d007      	beq.n	8008578 <sbrk_aligned+0x38>
 8008568:	1a21      	subs	r1, r4, r0
 800856a:	4628      	mov	r0, r5
 800856c:	f000 fe1e 	bl	80091ac <_sbrk_r>
 8008570:	3001      	adds	r0, #1
 8008572:	d101      	bne.n	8008578 <sbrk_aligned+0x38>
 8008574:	f04f 34ff 	mov.w	r4, #4294967295
 8008578:	4620      	mov	r0, r4
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	20005374 	.word	0x20005374

08008580 <_malloc_r>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	1ccd      	adds	r5, r1, #3
 8008586:	f025 0503 	bic.w	r5, r5, #3
 800858a:	3508      	adds	r5, #8
 800858c:	2d0c      	cmp	r5, #12
 800858e:	bf38      	it	cc
 8008590:	250c      	movcc	r5, #12
 8008592:	2d00      	cmp	r5, #0
 8008594:	4607      	mov	r7, r0
 8008596:	db01      	blt.n	800859c <_malloc_r+0x1c>
 8008598:	42a9      	cmp	r1, r5
 800859a:	d905      	bls.n	80085a8 <_malloc_r+0x28>
 800859c:	230c      	movs	r3, #12
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	2600      	movs	r6, #0
 80085a2:	4630      	mov	r0, r6
 80085a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800867c <_malloc_r+0xfc>
 80085ac:	f000 f868 	bl	8008680 <__malloc_lock>
 80085b0:	f8d8 3000 	ldr.w	r3, [r8]
 80085b4:	461c      	mov	r4, r3
 80085b6:	bb5c      	cbnz	r4, 8008610 <_malloc_r+0x90>
 80085b8:	4629      	mov	r1, r5
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff ffc0 	bl	8008540 <sbrk_aligned>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	4604      	mov	r4, r0
 80085c4:	d155      	bne.n	8008672 <_malloc_r+0xf2>
 80085c6:	f8d8 4000 	ldr.w	r4, [r8]
 80085ca:	4626      	mov	r6, r4
 80085cc:	2e00      	cmp	r6, #0
 80085ce:	d145      	bne.n	800865c <_malloc_r+0xdc>
 80085d0:	2c00      	cmp	r4, #0
 80085d2:	d048      	beq.n	8008666 <_malloc_r+0xe6>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	4631      	mov	r1, r6
 80085d8:	4638      	mov	r0, r7
 80085da:	eb04 0903 	add.w	r9, r4, r3
 80085de:	f000 fde5 	bl	80091ac <_sbrk_r>
 80085e2:	4581      	cmp	r9, r0
 80085e4:	d13f      	bne.n	8008666 <_malloc_r+0xe6>
 80085e6:	6821      	ldr	r1, [r4, #0]
 80085e8:	1a6d      	subs	r5, r5, r1
 80085ea:	4629      	mov	r1, r5
 80085ec:	4638      	mov	r0, r7
 80085ee:	f7ff ffa7 	bl	8008540 <sbrk_aligned>
 80085f2:	3001      	adds	r0, #1
 80085f4:	d037      	beq.n	8008666 <_malloc_r+0xe6>
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	442b      	add	r3, r5
 80085fa:	6023      	str	r3, [r4, #0]
 80085fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d038      	beq.n	8008676 <_malloc_r+0xf6>
 8008604:	685a      	ldr	r2, [r3, #4]
 8008606:	42a2      	cmp	r2, r4
 8008608:	d12b      	bne.n	8008662 <_malloc_r+0xe2>
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
 800860e:	e00f      	b.n	8008630 <_malloc_r+0xb0>
 8008610:	6822      	ldr	r2, [r4, #0]
 8008612:	1b52      	subs	r2, r2, r5
 8008614:	d41f      	bmi.n	8008656 <_malloc_r+0xd6>
 8008616:	2a0b      	cmp	r2, #11
 8008618:	d917      	bls.n	800864a <_malloc_r+0xca>
 800861a:	1961      	adds	r1, r4, r5
 800861c:	42a3      	cmp	r3, r4
 800861e:	6025      	str	r5, [r4, #0]
 8008620:	bf18      	it	ne
 8008622:	6059      	strne	r1, [r3, #4]
 8008624:	6863      	ldr	r3, [r4, #4]
 8008626:	bf08      	it	eq
 8008628:	f8c8 1000 	streq.w	r1, [r8]
 800862c:	5162      	str	r2, [r4, r5]
 800862e:	604b      	str	r3, [r1, #4]
 8008630:	4638      	mov	r0, r7
 8008632:	f104 060b 	add.w	r6, r4, #11
 8008636:	f000 f829 	bl	800868c <__malloc_unlock>
 800863a:	f026 0607 	bic.w	r6, r6, #7
 800863e:	1d23      	adds	r3, r4, #4
 8008640:	1af2      	subs	r2, r6, r3
 8008642:	d0ae      	beq.n	80085a2 <_malloc_r+0x22>
 8008644:	1b9b      	subs	r3, r3, r6
 8008646:	50a3      	str	r3, [r4, r2]
 8008648:	e7ab      	b.n	80085a2 <_malloc_r+0x22>
 800864a:	42a3      	cmp	r3, r4
 800864c:	6862      	ldr	r2, [r4, #4]
 800864e:	d1dd      	bne.n	800860c <_malloc_r+0x8c>
 8008650:	f8c8 2000 	str.w	r2, [r8]
 8008654:	e7ec      	b.n	8008630 <_malloc_r+0xb0>
 8008656:	4623      	mov	r3, r4
 8008658:	6864      	ldr	r4, [r4, #4]
 800865a:	e7ac      	b.n	80085b6 <_malloc_r+0x36>
 800865c:	4634      	mov	r4, r6
 800865e:	6876      	ldr	r6, [r6, #4]
 8008660:	e7b4      	b.n	80085cc <_malloc_r+0x4c>
 8008662:	4613      	mov	r3, r2
 8008664:	e7cc      	b.n	8008600 <_malloc_r+0x80>
 8008666:	230c      	movs	r3, #12
 8008668:	603b      	str	r3, [r7, #0]
 800866a:	4638      	mov	r0, r7
 800866c:	f000 f80e 	bl	800868c <__malloc_unlock>
 8008670:	e797      	b.n	80085a2 <_malloc_r+0x22>
 8008672:	6025      	str	r5, [r4, #0]
 8008674:	e7dc      	b.n	8008630 <_malloc_r+0xb0>
 8008676:	605b      	str	r3, [r3, #4]
 8008678:	deff      	udf	#255	; 0xff
 800867a:	bf00      	nop
 800867c:	20005370 	.word	0x20005370

08008680 <__malloc_lock>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__malloc_lock+0x8>)
 8008682:	f7ff beda 	b.w	800843a <__retarget_lock_acquire_recursive>
 8008686:	bf00      	nop
 8008688:	2000536c 	.word	0x2000536c

0800868c <__malloc_unlock>:
 800868c:	4801      	ldr	r0, [pc, #4]	; (8008694 <__malloc_unlock+0x8>)
 800868e:	f7ff bed5 	b.w	800843c <__retarget_lock_release_recursive>
 8008692:	bf00      	nop
 8008694:	2000536c 	.word	0x2000536c

08008698 <__ssputs_r>:
 8008698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800869c:	688e      	ldr	r6, [r1, #8]
 800869e:	461f      	mov	r7, r3
 80086a0:	42be      	cmp	r6, r7
 80086a2:	680b      	ldr	r3, [r1, #0]
 80086a4:	4682      	mov	sl, r0
 80086a6:	460c      	mov	r4, r1
 80086a8:	4690      	mov	r8, r2
 80086aa:	d82c      	bhi.n	8008706 <__ssputs_r+0x6e>
 80086ac:	898a      	ldrh	r2, [r1, #12]
 80086ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086b2:	d026      	beq.n	8008702 <__ssputs_r+0x6a>
 80086b4:	6965      	ldr	r5, [r4, #20]
 80086b6:	6909      	ldr	r1, [r1, #16]
 80086b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086bc:	eba3 0901 	sub.w	r9, r3, r1
 80086c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80086c4:	1c7b      	adds	r3, r7, #1
 80086c6:	444b      	add	r3, r9
 80086c8:	106d      	asrs	r5, r5, #1
 80086ca:	429d      	cmp	r5, r3
 80086cc:	bf38      	it	cc
 80086ce:	461d      	movcc	r5, r3
 80086d0:	0553      	lsls	r3, r2, #21
 80086d2:	d527      	bpl.n	8008724 <__ssputs_r+0x8c>
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7ff ff53 	bl	8008580 <_malloc_r>
 80086da:	4606      	mov	r6, r0
 80086dc:	b360      	cbz	r0, 8008738 <__ssputs_r+0xa0>
 80086de:	6921      	ldr	r1, [r4, #16]
 80086e0:	464a      	mov	r2, r9
 80086e2:	f7ff feac 	bl	800843e <memcpy>
 80086e6:	89a3      	ldrh	r3, [r4, #12]
 80086e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086f0:	81a3      	strh	r3, [r4, #12]
 80086f2:	6126      	str	r6, [r4, #16]
 80086f4:	6165      	str	r5, [r4, #20]
 80086f6:	444e      	add	r6, r9
 80086f8:	eba5 0509 	sub.w	r5, r5, r9
 80086fc:	6026      	str	r6, [r4, #0]
 80086fe:	60a5      	str	r5, [r4, #8]
 8008700:	463e      	mov	r6, r7
 8008702:	42be      	cmp	r6, r7
 8008704:	d900      	bls.n	8008708 <__ssputs_r+0x70>
 8008706:	463e      	mov	r6, r7
 8008708:	6820      	ldr	r0, [r4, #0]
 800870a:	4632      	mov	r2, r6
 800870c:	4641      	mov	r1, r8
 800870e:	f000 fd11 	bl	8009134 <memmove>
 8008712:	68a3      	ldr	r3, [r4, #8]
 8008714:	1b9b      	subs	r3, r3, r6
 8008716:	60a3      	str	r3, [r4, #8]
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	4433      	add	r3, r6
 800871c:	6023      	str	r3, [r4, #0]
 800871e:	2000      	movs	r0, #0
 8008720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008724:	462a      	mov	r2, r5
 8008726:	f000 fd58 	bl	80091da <_realloc_r>
 800872a:	4606      	mov	r6, r0
 800872c:	2800      	cmp	r0, #0
 800872e:	d1e0      	bne.n	80086f2 <__ssputs_r+0x5a>
 8008730:	6921      	ldr	r1, [r4, #16]
 8008732:	4650      	mov	r0, sl
 8008734:	f7ff feb0 	bl	8008498 <_free_r>
 8008738:	230c      	movs	r3, #12
 800873a:	f8ca 3000 	str.w	r3, [sl]
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008744:	81a3      	strh	r3, [r4, #12]
 8008746:	f04f 30ff 	mov.w	r0, #4294967295
 800874a:	e7e9      	b.n	8008720 <__ssputs_r+0x88>

0800874c <_svfiprintf_r>:
 800874c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	4698      	mov	r8, r3
 8008752:	898b      	ldrh	r3, [r1, #12]
 8008754:	061b      	lsls	r3, r3, #24
 8008756:	b09d      	sub	sp, #116	; 0x74
 8008758:	4607      	mov	r7, r0
 800875a:	460d      	mov	r5, r1
 800875c:	4614      	mov	r4, r2
 800875e:	d50e      	bpl.n	800877e <_svfiprintf_r+0x32>
 8008760:	690b      	ldr	r3, [r1, #16]
 8008762:	b963      	cbnz	r3, 800877e <_svfiprintf_r+0x32>
 8008764:	2140      	movs	r1, #64	; 0x40
 8008766:	f7ff ff0b 	bl	8008580 <_malloc_r>
 800876a:	6028      	str	r0, [r5, #0]
 800876c:	6128      	str	r0, [r5, #16]
 800876e:	b920      	cbnz	r0, 800877a <_svfiprintf_r+0x2e>
 8008770:	230c      	movs	r3, #12
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	f04f 30ff 	mov.w	r0, #4294967295
 8008778:	e0d0      	b.n	800891c <_svfiprintf_r+0x1d0>
 800877a:	2340      	movs	r3, #64	; 0x40
 800877c:	616b      	str	r3, [r5, #20]
 800877e:	2300      	movs	r3, #0
 8008780:	9309      	str	r3, [sp, #36]	; 0x24
 8008782:	2320      	movs	r3, #32
 8008784:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008788:	f8cd 800c 	str.w	r8, [sp, #12]
 800878c:	2330      	movs	r3, #48	; 0x30
 800878e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008934 <_svfiprintf_r+0x1e8>
 8008792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008796:	f04f 0901 	mov.w	r9, #1
 800879a:	4623      	mov	r3, r4
 800879c:	469a      	mov	sl, r3
 800879e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a2:	b10a      	cbz	r2, 80087a8 <_svfiprintf_r+0x5c>
 80087a4:	2a25      	cmp	r2, #37	; 0x25
 80087a6:	d1f9      	bne.n	800879c <_svfiprintf_r+0x50>
 80087a8:	ebba 0b04 	subs.w	fp, sl, r4
 80087ac:	d00b      	beq.n	80087c6 <_svfiprintf_r+0x7a>
 80087ae:	465b      	mov	r3, fp
 80087b0:	4622      	mov	r2, r4
 80087b2:	4629      	mov	r1, r5
 80087b4:	4638      	mov	r0, r7
 80087b6:	f7ff ff6f 	bl	8008698 <__ssputs_r>
 80087ba:	3001      	adds	r0, #1
 80087bc:	f000 80a9 	beq.w	8008912 <_svfiprintf_r+0x1c6>
 80087c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c2:	445a      	add	r2, fp
 80087c4:	9209      	str	r2, [sp, #36]	; 0x24
 80087c6:	f89a 3000 	ldrb.w	r3, [sl]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 80a1 	beq.w	8008912 <_svfiprintf_r+0x1c6>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f04f 32ff 	mov.w	r2, #4294967295
 80087d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087da:	f10a 0a01 	add.w	sl, sl, #1
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	9307      	str	r3, [sp, #28]
 80087e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087e6:	931a      	str	r3, [sp, #104]	; 0x68
 80087e8:	4654      	mov	r4, sl
 80087ea:	2205      	movs	r2, #5
 80087ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f0:	4850      	ldr	r0, [pc, #320]	; (8008934 <_svfiprintf_r+0x1e8>)
 80087f2:	f7f7 fcf5 	bl	80001e0 <memchr>
 80087f6:	9a04      	ldr	r2, [sp, #16]
 80087f8:	b9d8      	cbnz	r0, 8008832 <_svfiprintf_r+0xe6>
 80087fa:	06d0      	lsls	r0, r2, #27
 80087fc:	bf44      	itt	mi
 80087fe:	2320      	movmi	r3, #32
 8008800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008804:	0711      	lsls	r1, r2, #28
 8008806:	bf44      	itt	mi
 8008808:	232b      	movmi	r3, #43	; 0x2b
 800880a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880e:	f89a 3000 	ldrb.w	r3, [sl]
 8008812:	2b2a      	cmp	r3, #42	; 0x2a
 8008814:	d015      	beq.n	8008842 <_svfiprintf_r+0xf6>
 8008816:	9a07      	ldr	r2, [sp, #28]
 8008818:	4654      	mov	r4, sl
 800881a:	2000      	movs	r0, #0
 800881c:	f04f 0c0a 	mov.w	ip, #10
 8008820:	4621      	mov	r1, r4
 8008822:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008826:	3b30      	subs	r3, #48	; 0x30
 8008828:	2b09      	cmp	r3, #9
 800882a:	d94d      	bls.n	80088c8 <_svfiprintf_r+0x17c>
 800882c:	b1b0      	cbz	r0, 800885c <_svfiprintf_r+0x110>
 800882e:	9207      	str	r2, [sp, #28]
 8008830:	e014      	b.n	800885c <_svfiprintf_r+0x110>
 8008832:	eba0 0308 	sub.w	r3, r0, r8
 8008836:	fa09 f303 	lsl.w	r3, r9, r3
 800883a:	4313      	orrs	r3, r2
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	46a2      	mov	sl, r4
 8008840:	e7d2      	b.n	80087e8 <_svfiprintf_r+0x9c>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	1d19      	adds	r1, r3, #4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	9103      	str	r1, [sp, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	bfbb      	ittet	lt
 800884e:	425b      	neglt	r3, r3
 8008850:	f042 0202 	orrlt.w	r2, r2, #2
 8008854:	9307      	strge	r3, [sp, #28]
 8008856:	9307      	strlt	r3, [sp, #28]
 8008858:	bfb8      	it	lt
 800885a:	9204      	strlt	r2, [sp, #16]
 800885c:	7823      	ldrb	r3, [r4, #0]
 800885e:	2b2e      	cmp	r3, #46	; 0x2e
 8008860:	d10c      	bne.n	800887c <_svfiprintf_r+0x130>
 8008862:	7863      	ldrb	r3, [r4, #1]
 8008864:	2b2a      	cmp	r3, #42	; 0x2a
 8008866:	d134      	bne.n	80088d2 <_svfiprintf_r+0x186>
 8008868:	9b03      	ldr	r3, [sp, #12]
 800886a:	1d1a      	adds	r2, r3, #4
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	9203      	str	r2, [sp, #12]
 8008870:	2b00      	cmp	r3, #0
 8008872:	bfb8      	it	lt
 8008874:	f04f 33ff 	movlt.w	r3, #4294967295
 8008878:	3402      	adds	r4, #2
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008944 <_svfiprintf_r+0x1f8>
 8008880:	7821      	ldrb	r1, [r4, #0]
 8008882:	2203      	movs	r2, #3
 8008884:	4650      	mov	r0, sl
 8008886:	f7f7 fcab 	bl	80001e0 <memchr>
 800888a:	b138      	cbz	r0, 800889c <_svfiprintf_r+0x150>
 800888c:	9b04      	ldr	r3, [sp, #16]
 800888e:	eba0 000a 	sub.w	r0, r0, sl
 8008892:	2240      	movs	r2, #64	; 0x40
 8008894:	4082      	lsls	r2, r0
 8008896:	4313      	orrs	r3, r2
 8008898:	3401      	adds	r4, #1
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	4825      	ldr	r0, [pc, #148]	; (8008938 <_svfiprintf_r+0x1ec>)
 80088a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088a6:	2206      	movs	r2, #6
 80088a8:	f7f7 fc9a 	bl	80001e0 <memchr>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d038      	beq.n	8008922 <_svfiprintf_r+0x1d6>
 80088b0:	4b22      	ldr	r3, [pc, #136]	; (800893c <_svfiprintf_r+0x1f0>)
 80088b2:	bb1b      	cbnz	r3, 80088fc <_svfiprintf_r+0x1b0>
 80088b4:	9b03      	ldr	r3, [sp, #12]
 80088b6:	3307      	adds	r3, #7
 80088b8:	f023 0307 	bic.w	r3, r3, #7
 80088bc:	3308      	adds	r3, #8
 80088be:	9303      	str	r3, [sp, #12]
 80088c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c2:	4433      	add	r3, r6
 80088c4:	9309      	str	r3, [sp, #36]	; 0x24
 80088c6:	e768      	b.n	800879a <_svfiprintf_r+0x4e>
 80088c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088cc:	460c      	mov	r4, r1
 80088ce:	2001      	movs	r0, #1
 80088d0:	e7a6      	b.n	8008820 <_svfiprintf_r+0xd4>
 80088d2:	2300      	movs	r3, #0
 80088d4:	3401      	adds	r4, #1
 80088d6:	9305      	str	r3, [sp, #20]
 80088d8:	4619      	mov	r1, r3
 80088da:	f04f 0c0a 	mov.w	ip, #10
 80088de:	4620      	mov	r0, r4
 80088e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088e4:	3a30      	subs	r2, #48	; 0x30
 80088e6:	2a09      	cmp	r2, #9
 80088e8:	d903      	bls.n	80088f2 <_svfiprintf_r+0x1a6>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0c6      	beq.n	800887c <_svfiprintf_r+0x130>
 80088ee:	9105      	str	r1, [sp, #20]
 80088f0:	e7c4      	b.n	800887c <_svfiprintf_r+0x130>
 80088f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80088f6:	4604      	mov	r4, r0
 80088f8:	2301      	movs	r3, #1
 80088fa:	e7f0      	b.n	80088de <_svfiprintf_r+0x192>
 80088fc:	ab03      	add	r3, sp, #12
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462a      	mov	r2, r5
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <_svfiprintf_r+0x1f4>)
 8008904:	a904      	add	r1, sp, #16
 8008906:	4638      	mov	r0, r7
 8008908:	f3af 8000 	nop.w
 800890c:	1c42      	adds	r2, r0, #1
 800890e:	4606      	mov	r6, r0
 8008910:	d1d6      	bne.n	80088c0 <_svfiprintf_r+0x174>
 8008912:	89ab      	ldrh	r3, [r5, #12]
 8008914:	065b      	lsls	r3, r3, #25
 8008916:	f53f af2d 	bmi.w	8008774 <_svfiprintf_r+0x28>
 800891a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800891c:	b01d      	add	sp, #116	; 0x74
 800891e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008922:	ab03      	add	r3, sp, #12
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	462a      	mov	r2, r5
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <_svfiprintf_r+0x1f4>)
 800892a:	a904      	add	r1, sp, #16
 800892c:	4638      	mov	r0, r7
 800892e:	f000 f9bd 	bl	8008cac <_printf_i>
 8008932:	e7eb      	b.n	800890c <_svfiprintf_r+0x1c0>
 8008934:	08009e9d 	.word	0x08009e9d
 8008938:	08009ea7 	.word	0x08009ea7
 800893c:	00000000 	.word	0x00000000
 8008940:	08008699 	.word	0x08008699
 8008944:	08009ea3 	.word	0x08009ea3

08008948 <__sfputc_r>:
 8008948:	6893      	ldr	r3, [r2, #8]
 800894a:	3b01      	subs	r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	b410      	push	{r4}
 8008950:	6093      	str	r3, [r2, #8]
 8008952:	da08      	bge.n	8008966 <__sfputc_r+0x1e>
 8008954:	6994      	ldr	r4, [r2, #24]
 8008956:	42a3      	cmp	r3, r4
 8008958:	db01      	blt.n	800895e <__sfputc_r+0x16>
 800895a:	290a      	cmp	r1, #10
 800895c:	d103      	bne.n	8008966 <__sfputc_r+0x1e>
 800895e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008962:	f7ff bba2 	b.w	80080aa <__swbuf_r>
 8008966:	6813      	ldr	r3, [r2, #0]
 8008968:	1c58      	adds	r0, r3, #1
 800896a:	6010      	str	r0, [r2, #0]
 800896c:	7019      	strb	r1, [r3, #0]
 800896e:	4608      	mov	r0, r1
 8008970:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008974:	4770      	bx	lr

08008976 <__sfputs_r>:
 8008976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008978:	4606      	mov	r6, r0
 800897a:	460f      	mov	r7, r1
 800897c:	4614      	mov	r4, r2
 800897e:	18d5      	adds	r5, r2, r3
 8008980:	42ac      	cmp	r4, r5
 8008982:	d101      	bne.n	8008988 <__sfputs_r+0x12>
 8008984:	2000      	movs	r0, #0
 8008986:	e007      	b.n	8008998 <__sfputs_r+0x22>
 8008988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800898c:	463a      	mov	r2, r7
 800898e:	4630      	mov	r0, r6
 8008990:	f7ff ffda 	bl	8008948 <__sfputc_r>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d1f3      	bne.n	8008980 <__sfputs_r+0xa>
 8008998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800899c <_vfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	460d      	mov	r5, r1
 80089a2:	b09d      	sub	sp, #116	; 0x74
 80089a4:	4614      	mov	r4, r2
 80089a6:	4698      	mov	r8, r3
 80089a8:	4606      	mov	r6, r0
 80089aa:	b118      	cbz	r0, 80089b4 <_vfiprintf_r+0x18>
 80089ac:	6a03      	ldr	r3, [r0, #32]
 80089ae:	b90b      	cbnz	r3, 80089b4 <_vfiprintf_r+0x18>
 80089b0:	f7ff fa40 	bl	8007e34 <__sinit>
 80089b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b6:	07d9      	lsls	r1, r3, #31
 80089b8:	d405      	bmi.n	80089c6 <_vfiprintf_r+0x2a>
 80089ba:	89ab      	ldrh	r3, [r5, #12]
 80089bc:	059a      	lsls	r2, r3, #22
 80089be:	d402      	bmi.n	80089c6 <_vfiprintf_r+0x2a>
 80089c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089c2:	f7ff fd3a 	bl	800843a <__retarget_lock_acquire_recursive>
 80089c6:	89ab      	ldrh	r3, [r5, #12]
 80089c8:	071b      	lsls	r3, r3, #28
 80089ca:	d501      	bpl.n	80089d0 <_vfiprintf_r+0x34>
 80089cc:	692b      	ldr	r3, [r5, #16]
 80089ce:	b99b      	cbnz	r3, 80089f8 <_vfiprintf_r+0x5c>
 80089d0:	4629      	mov	r1, r5
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7ff fba6 	bl	8008124 <__swsetup_r>
 80089d8:	b170      	cbz	r0, 80089f8 <_vfiprintf_r+0x5c>
 80089da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089dc:	07dc      	lsls	r4, r3, #31
 80089de:	d504      	bpl.n	80089ea <_vfiprintf_r+0x4e>
 80089e0:	f04f 30ff 	mov.w	r0, #4294967295
 80089e4:	b01d      	add	sp, #116	; 0x74
 80089e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ea:	89ab      	ldrh	r3, [r5, #12]
 80089ec:	0598      	lsls	r0, r3, #22
 80089ee:	d4f7      	bmi.n	80089e0 <_vfiprintf_r+0x44>
 80089f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089f2:	f7ff fd23 	bl	800843c <__retarget_lock_release_recursive>
 80089f6:	e7f3      	b.n	80089e0 <_vfiprintf_r+0x44>
 80089f8:	2300      	movs	r3, #0
 80089fa:	9309      	str	r3, [sp, #36]	; 0x24
 80089fc:	2320      	movs	r3, #32
 80089fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a06:	2330      	movs	r3, #48	; 0x30
 8008a08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008bbc <_vfiprintf_r+0x220>
 8008a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a10:	f04f 0901 	mov.w	r9, #1
 8008a14:	4623      	mov	r3, r4
 8008a16:	469a      	mov	sl, r3
 8008a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a1c:	b10a      	cbz	r2, 8008a22 <_vfiprintf_r+0x86>
 8008a1e:	2a25      	cmp	r2, #37	; 0x25
 8008a20:	d1f9      	bne.n	8008a16 <_vfiprintf_r+0x7a>
 8008a22:	ebba 0b04 	subs.w	fp, sl, r4
 8008a26:	d00b      	beq.n	8008a40 <_vfiprintf_r+0xa4>
 8008a28:	465b      	mov	r3, fp
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7ff ffa1 	bl	8008976 <__sfputs_r>
 8008a34:	3001      	adds	r0, #1
 8008a36:	f000 80a9 	beq.w	8008b8c <_vfiprintf_r+0x1f0>
 8008a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a3c:	445a      	add	r2, fp
 8008a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a40:	f89a 3000 	ldrb.w	r3, [sl]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80a1 	beq.w	8008b8c <_vfiprintf_r+0x1f0>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a54:	f10a 0a01 	add.w	sl, sl, #1
 8008a58:	9304      	str	r3, [sp, #16]
 8008a5a:	9307      	str	r3, [sp, #28]
 8008a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a60:	931a      	str	r3, [sp, #104]	; 0x68
 8008a62:	4654      	mov	r4, sl
 8008a64:	2205      	movs	r2, #5
 8008a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a6a:	4854      	ldr	r0, [pc, #336]	; (8008bbc <_vfiprintf_r+0x220>)
 8008a6c:	f7f7 fbb8 	bl	80001e0 <memchr>
 8008a70:	9a04      	ldr	r2, [sp, #16]
 8008a72:	b9d8      	cbnz	r0, 8008aac <_vfiprintf_r+0x110>
 8008a74:	06d1      	lsls	r1, r2, #27
 8008a76:	bf44      	itt	mi
 8008a78:	2320      	movmi	r3, #32
 8008a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a7e:	0713      	lsls	r3, r2, #28
 8008a80:	bf44      	itt	mi
 8008a82:	232b      	movmi	r3, #43	; 0x2b
 8008a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a88:	f89a 3000 	ldrb.w	r3, [sl]
 8008a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a8e:	d015      	beq.n	8008abc <_vfiprintf_r+0x120>
 8008a90:	9a07      	ldr	r2, [sp, #28]
 8008a92:	4654      	mov	r4, sl
 8008a94:	2000      	movs	r0, #0
 8008a96:	f04f 0c0a 	mov.w	ip, #10
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa0:	3b30      	subs	r3, #48	; 0x30
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d94d      	bls.n	8008b42 <_vfiprintf_r+0x1a6>
 8008aa6:	b1b0      	cbz	r0, 8008ad6 <_vfiprintf_r+0x13a>
 8008aa8:	9207      	str	r2, [sp, #28]
 8008aaa:	e014      	b.n	8008ad6 <_vfiprintf_r+0x13a>
 8008aac:	eba0 0308 	sub.w	r3, r0, r8
 8008ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	9304      	str	r3, [sp, #16]
 8008ab8:	46a2      	mov	sl, r4
 8008aba:	e7d2      	b.n	8008a62 <_vfiprintf_r+0xc6>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d19      	adds	r1, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9103      	str	r1, [sp, #12]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	bfbb      	ittet	lt
 8008ac8:	425b      	neglt	r3, r3
 8008aca:	f042 0202 	orrlt.w	r2, r2, #2
 8008ace:	9307      	strge	r3, [sp, #28]
 8008ad0:	9307      	strlt	r3, [sp, #28]
 8008ad2:	bfb8      	it	lt
 8008ad4:	9204      	strlt	r2, [sp, #16]
 8008ad6:	7823      	ldrb	r3, [r4, #0]
 8008ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8008ada:	d10c      	bne.n	8008af6 <_vfiprintf_r+0x15a>
 8008adc:	7863      	ldrb	r3, [r4, #1]
 8008ade:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae0:	d134      	bne.n	8008b4c <_vfiprintf_r+0x1b0>
 8008ae2:	9b03      	ldr	r3, [sp, #12]
 8008ae4:	1d1a      	adds	r2, r3, #4
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	9203      	str	r2, [sp, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfb8      	it	lt
 8008aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8008af2:	3402      	adds	r4, #2
 8008af4:	9305      	str	r3, [sp, #20]
 8008af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008bcc <_vfiprintf_r+0x230>
 8008afa:	7821      	ldrb	r1, [r4, #0]
 8008afc:	2203      	movs	r2, #3
 8008afe:	4650      	mov	r0, sl
 8008b00:	f7f7 fb6e 	bl	80001e0 <memchr>
 8008b04:	b138      	cbz	r0, 8008b16 <_vfiprintf_r+0x17a>
 8008b06:	9b04      	ldr	r3, [sp, #16]
 8008b08:	eba0 000a 	sub.w	r0, r0, sl
 8008b0c:	2240      	movs	r2, #64	; 0x40
 8008b0e:	4082      	lsls	r2, r0
 8008b10:	4313      	orrs	r3, r2
 8008b12:	3401      	adds	r4, #1
 8008b14:	9304      	str	r3, [sp, #16]
 8008b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b1a:	4829      	ldr	r0, [pc, #164]	; (8008bc0 <_vfiprintf_r+0x224>)
 8008b1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b20:	2206      	movs	r2, #6
 8008b22:	f7f7 fb5d 	bl	80001e0 <memchr>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d03f      	beq.n	8008baa <_vfiprintf_r+0x20e>
 8008b2a:	4b26      	ldr	r3, [pc, #152]	; (8008bc4 <_vfiprintf_r+0x228>)
 8008b2c:	bb1b      	cbnz	r3, 8008b76 <_vfiprintf_r+0x1da>
 8008b2e:	9b03      	ldr	r3, [sp, #12]
 8008b30:	3307      	adds	r3, #7
 8008b32:	f023 0307 	bic.w	r3, r3, #7
 8008b36:	3308      	adds	r3, #8
 8008b38:	9303      	str	r3, [sp, #12]
 8008b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b3c:	443b      	add	r3, r7
 8008b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b40:	e768      	b.n	8008a14 <_vfiprintf_r+0x78>
 8008b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b46:	460c      	mov	r4, r1
 8008b48:	2001      	movs	r0, #1
 8008b4a:	e7a6      	b.n	8008a9a <_vfiprintf_r+0xfe>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	3401      	adds	r4, #1
 8008b50:	9305      	str	r3, [sp, #20]
 8008b52:	4619      	mov	r1, r3
 8008b54:	f04f 0c0a 	mov.w	ip, #10
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b5e:	3a30      	subs	r2, #48	; 0x30
 8008b60:	2a09      	cmp	r2, #9
 8008b62:	d903      	bls.n	8008b6c <_vfiprintf_r+0x1d0>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0c6      	beq.n	8008af6 <_vfiprintf_r+0x15a>
 8008b68:	9105      	str	r1, [sp, #20]
 8008b6a:	e7c4      	b.n	8008af6 <_vfiprintf_r+0x15a>
 8008b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b70:	4604      	mov	r4, r0
 8008b72:	2301      	movs	r3, #1
 8008b74:	e7f0      	b.n	8008b58 <_vfiprintf_r+0x1bc>
 8008b76:	ab03      	add	r3, sp, #12
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	462a      	mov	r2, r5
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <_vfiprintf_r+0x22c>)
 8008b7e:	a904      	add	r1, sp, #16
 8008b80:	4630      	mov	r0, r6
 8008b82:	f3af 8000 	nop.w
 8008b86:	4607      	mov	r7, r0
 8008b88:	1c78      	adds	r0, r7, #1
 8008b8a:	d1d6      	bne.n	8008b3a <_vfiprintf_r+0x19e>
 8008b8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b8e:	07d9      	lsls	r1, r3, #31
 8008b90:	d405      	bmi.n	8008b9e <_vfiprintf_r+0x202>
 8008b92:	89ab      	ldrh	r3, [r5, #12]
 8008b94:	059a      	lsls	r2, r3, #22
 8008b96:	d402      	bmi.n	8008b9e <_vfiprintf_r+0x202>
 8008b98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b9a:	f7ff fc4f 	bl	800843c <__retarget_lock_release_recursive>
 8008b9e:	89ab      	ldrh	r3, [r5, #12]
 8008ba0:	065b      	lsls	r3, r3, #25
 8008ba2:	f53f af1d 	bmi.w	80089e0 <_vfiprintf_r+0x44>
 8008ba6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ba8:	e71c      	b.n	80089e4 <_vfiprintf_r+0x48>
 8008baa:	ab03      	add	r3, sp, #12
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	462a      	mov	r2, r5
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <_vfiprintf_r+0x22c>)
 8008bb2:	a904      	add	r1, sp, #16
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f000 f879 	bl	8008cac <_printf_i>
 8008bba:	e7e4      	b.n	8008b86 <_vfiprintf_r+0x1ea>
 8008bbc:	08009e9d 	.word	0x08009e9d
 8008bc0:	08009ea7 	.word	0x08009ea7
 8008bc4:	00000000 	.word	0x00000000
 8008bc8:	08008977 	.word	0x08008977
 8008bcc:	08009ea3 	.word	0x08009ea3

08008bd0 <_printf_common>:
 8008bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	4699      	mov	r9, r3
 8008bd8:	688a      	ldr	r2, [r1, #8]
 8008bda:	690b      	ldr	r3, [r1, #16]
 8008bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008be0:	4293      	cmp	r3, r2
 8008be2:	bfb8      	it	lt
 8008be4:	4613      	movlt	r3, r2
 8008be6:	6033      	str	r3, [r6, #0]
 8008be8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bec:	4607      	mov	r7, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	b10a      	cbz	r2, 8008bf6 <_printf_common+0x26>
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	6033      	str	r3, [r6, #0]
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	0699      	lsls	r1, r3, #26
 8008bfa:	bf42      	ittt	mi
 8008bfc:	6833      	ldrmi	r3, [r6, #0]
 8008bfe:	3302      	addmi	r3, #2
 8008c00:	6033      	strmi	r3, [r6, #0]
 8008c02:	6825      	ldr	r5, [r4, #0]
 8008c04:	f015 0506 	ands.w	r5, r5, #6
 8008c08:	d106      	bne.n	8008c18 <_printf_common+0x48>
 8008c0a:	f104 0a19 	add.w	sl, r4, #25
 8008c0e:	68e3      	ldr	r3, [r4, #12]
 8008c10:	6832      	ldr	r2, [r6, #0]
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	42ab      	cmp	r3, r5
 8008c16:	dc26      	bgt.n	8008c66 <_printf_common+0x96>
 8008c18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c1c:	1e13      	subs	r3, r2, #0
 8008c1e:	6822      	ldr	r2, [r4, #0]
 8008c20:	bf18      	it	ne
 8008c22:	2301      	movne	r3, #1
 8008c24:	0692      	lsls	r2, r2, #26
 8008c26:	d42b      	bmi.n	8008c80 <_printf_common+0xb0>
 8008c28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c2c:	4649      	mov	r1, r9
 8008c2e:	4638      	mov	r0, r7
 8008c30:	47c0      	blx	r8
 8008c32:	3001      	adds	r0, #1
 8008c34:	d01e      	beq.n	8008c74 <_printf_common+0xa4>
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	6922      	ldr	r2, [r4, #16]
 8008c3a:	f003 0306 	and.w	r3, r3, #6
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	bf02      	ittt	eq
 8008c42:	68e5      	ldreq	r5, [r4, #12]
 8008c44:	6833      	ldreq	r3, [r6, #0]
 8008c46:	1aed      	subeq	r5, r5, r3
 8008c48:	68a3      	ldr	r3, [r4, #8]
 8008c4a:	bf0c      	ite	eq
 8008c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c50:	2500      	movne	r5, #0
 8008c52:	4293      	cmp	r3, r2
 8008c54:	bfc4      	itt	gt
 8008c56:	1a9b      	subgt	r3, r3, r2
 8008c58:	18ed      	addgt	r5, r5, r3
 8008c5a:	2600      	movs	r6, #0
 8008c5c:	341a      	adds	r4, #26
 8008c5e:	42b5      	cmp	r5, r6
 8008c60:	d11a      	bne.n	8008c98 <_printf_common+0xc8>
 8008c62:	2000      	movs	r0, #0
 8008c64:	e008      	b.n	8008c78 <_printf_common+0xa8>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4652      	mov	r2, sl
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	47c0      	blx	r8
 8008c70:	3001      	adds	r0, #1
 8008c72:	d103      	bne.n	8008c7c <_printf_common+0xac>
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c7c:	3501      	adds	r5, #1
 8008c7e:	e7c6      	b.n	8008c0e <_printf_common+0x3e>
 8008c80:	18e1      	adds	r1, r4, r3
 8008c82:	1c5a      	adds	r2, r3, #1
 8008c84:	2030      	movs	r0, #48	; 0x30
 8008c86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c8a:	4422      	add	r2, r4
 8008c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c94:	3302      	adds	r3, #2
 8008c96:	e7c7      	b.n	8008c28 <_printf_common+0x58>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4649      	mov	r1, r9
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	47c0      	blx	r8
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	d0e6      	beq.n	8008c74 <_printf_common+0xa4>
 8008ca6:	3601      	adds	r6, #1
 8008ca8:	e7d9      	b.n	8008c5e <_printf_common+0x8e>
	...

08008cac <_printf_i>:
 8008cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	7e0f      	ldrb	r7, [r1, #24]
 8008cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cb4:	2f78      	cmp	r7, #120	; 0x78
 8008cb6:	4691      	mov	r9, r2
 8008cb8:	4680      	mov	r8, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	469a      	mov	sl, r3
 8008cbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cc2:	d807      	bhi.n	8008cd4 <_printf_i+0x28>
 8008cc4:	2f62      	cmp	r7, #98	; 0x62
 8008cc6:	d80a      	bhi.n	8008cde <_printf_i+0x32>
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	f000 80d4 	beq.w	8008e76 <_printf_i+0x1ca>
 8008cce:	2f58      	cmp	r7, #88	; 0x58
 8008cd0:	f000 80c0 	beq.w	8008e54 <_printf_i+0x1a8>
 8008cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cdc:	e03a      	b.n	8008d54 <_printf_i+0xa8>
 8008cde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ce2:	2b15      	cmp	r3, #21
 8008ce4:	d8f6      	bhi.n	8008cd4 <_printf_i+0x28>
 8008ce6:	a101      	add	r1, pc, #4	; (adr r1, 8008cec <_printf_i+0x40>)
 8008ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cec:	08008d45 	.word	0x08008d45
 8008cf0:	08008d59 	.word	0x08008d59
 8008cf4:	08008cd5 	.word	0x08008cd5
 8008cf8:	08008cd5 	.word	0x08008cd5
 8008cfc:	08008cd5 	.word	0x08008cd5
 8008d00:	08008cd5 	.word	0x08008cd5
 8008d04:	08008d59 	.word	0x08008d59
 8008d08:	08008cd5 	.word	0x08008cd5
 8008d0c:	08008cd5 	.word	0x08008cd5
 8008d10:	08008cd5 	.word	0x08008cd5
 8008d14:	08008cd5 	.word	0x08008cd5
 8008d18:	08008e5d 	.word	0x08008e5d
 8008d1c:	08008d85 	.word	0x08008d85
 8008d20:	08008e17 	.word	0x08008e17
 8008d24:	08008cd5 	.word	0x08008cd5
 8008d28:	08008cd5 	.word	0x08008cd5
 8008d2c:	08008e7f 	.word	0x08008e7f
 8008d30:	08008cd5 	.word	0x08008cd5
 8008d34:	08008d85 	.word	0x08008d85
 8008d38:	08008cd5 	.word	0x08008cd5
 8008d3c:	08008cd5 	.word	0x08008cd5
 8008d40:	08008e1f 	.word	0x08008e1f
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	1d1a      	adds	r2, r3, #4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	602a      	str	r2, [r5, #0]
 8008d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d54:	2301      	movs	r3, #1
 8008d56:	e09f      	b.n	8008e98 <_printf_i+0x1ec>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	0607      	lsls	r7, r0, #24
 8008d5e:	f103 0104 	add.w	r1, r3, #4
 8008d62:	6029      	str	r1, [r5, #0]
 8008d64:	d501      	bpl.n	8008d6a <_printf_i+0xbe>
 8008d66:	681e      	ldr	r6, [r3, #0]
 8008d68:	e003      	b.n	8008d72 <_printf_i+0xc6>
 8008d6a:	0646      	lsls	r6, r0, #25
 8008d6c:	d5fb      	bpl.n	8008d66 <_printf_i+0xba>
 8008d6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d72:	2e00      	cmp	r6, #0
 8008d74:	da03      	bge.n	8008d7e <_printf_i+0xd2>
 8008d76:	232d      	movs	r3, #45	; 0x2d
 8008d78:	4276      	negs	r6, r6
 8008d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d7e:	485a      	ldr	r0, [pc, #360]	; (8008ee8 <_printf_i+0x23c>)
 8008d80:	230a      	movs	r3, #10
 8008d82:	e012      	b.n	8008daa <_printf_i+0xfe>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	6820      	ldr	r0, [r4, #0]
 8008d88:	1d19      	adds	r1, r3, #4
 8008d8a:	6029      	str	r1, [r5, #0]
 8008d8c:	0605      	lsls	r5, r0, #24
 8008d8e:	d501      	bpl.n	8008d94 <_printf_i+0xe8>
 8008d90:	681e      	ldr	r6, [r3, #0]
 8008d92:	e002      	b.n	8008d9a <_printf_i+0xee>
 8008d94:	0641      	lsls	r1, r0, #25
 8008d96:	d5fb      	bpl.n	8008d90 <_printf_i+0xe4>
 8008d98:	881e      	ldrh	r6, [r3, #0]
 8008d9a:	4853      	ldr	r0, [pc, #332]	; (8008ee8 <_printf_i+0x23c>)
 8008d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d9e:	bf0c      	ite	eq
 8008da0:	2308      	moveq	r3, #8
 8008da2:	230a      	movne	r3, #10
 8008da4:	2100      	movs	r1, #0
 8008da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008daa:	6865      	ldr	r5, [r4, #4]
 8008dac:	60a5      	str	r5, [r4, #8]
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	bfa2      	ittt	ge
 8008db2:	6821      	ldrge	r1, [r4, #0]
 8008db4:	f021 0104 	bicge.w	r1, r1, #4
 8008db8:	6021      	strge	r1, [r4, #0]
 8008dba:	b90e      	cbnz	r6, 8008dc0 <_printf_i+0x114>
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	d04b      	beq.n	8008e58 <_printf_i+0x1ac>
 8008dc0:	4615      	mov	r5, r2
 8008dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dca:	5dc7      	ldrb	r7, [r0, r7]
 8008dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dd0:	4637      	mov	r7, r6
 8008dd2:	42bb      	cmp	r3, r7
 8008dd4:	460e      	mov	r6, r1
 8008dd6:	d9f4      	bls.n	8008dc2 <_printf_i+0x116>
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d10b      	bne.n	8008df4 <_printf_i+0x148>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	07de      	lsls	r6, r3, #31
 8008de0:	d508      	bpl.n	8008df4 <_printf_i+0x148>
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	6861      	ldr	r1, [r4, #4]
 8008de6:	4299      	cmp	r1, r3
 8008de8:	bfde      	ittt	le
 8008dea:	2330      	movle	r3, #48	; 0x30
 8008dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008df4:	1b52      	subs	r2, r2, r5
 8008df6:	6122      	str	r2, [r4, #16]
 8008df8:	f8cd a000 	str.w	sl, [sp]
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	aa03      	add	r2, sp, #12
 8008e00:	4621      	mov	r1, r4
 8008e02:	4640      	mov	r0, r8
 8008e04:	f7ff fee4 	bl	8008bd0 <_printf_common>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d14a      	bne.n	8008ea2 <_printf_i+0x1f6>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	b004      	add	sp, #16
 8008e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	f043 0320 	orr.w	r3, r3, #32
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	4833      	ldr	r0, [pc, #204]	; (8008eec <_printf_i+0x240>)
 8008e20:	2778      	movs	r7, #120	; 0x78
 8008e22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e26:	6823      	ldr	r3, [r4, #0]
 8008e28:	6829      	ldr	r1, [r5, #0]
 8008e2a:	061f      	lsls	r7, r3, #24
 8008e2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e30:	d402      	bmi.n	8008e38 <_printf_i+0x18c>
 8008e32:	065f      	lsls	r7, r3, #25
 8008e34:	bf48      	it	mi
 8008e36:	b2b6      	uxthmi	r6, r6
 8008e38:	07df      	lsls	r7, r3, #31
 8008e3a:	bf48      	it	mi
 8008e3c:	f043 0320 	orrmi.w	r3, r3, #32
 8008e40:	6029      	str	r1, [r5, #0]
 8008e42:	bf48      	it	mi
 8008e44:	6023      	strmi	r3, [r4, #0]
 8008e46:	b91e      	cbnz	r6, 8008e50 <_printf_i+0x1a4>
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	f023 0320 	bic.w	r3, r3, #32
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	2310      	movs	r3, #16
 8008e52:	e7a7      	b.n	8008da4 <_printf_i+0xf8>
 8008e54:	4824      	ldr	r0, [pc, #144]	; (8008ee8 <_printf_i+0x23c>)
 8008e56:	e7e4      	b.n	8008e22 <_printf_i+0x176>
 8008e58:	4615      	mov	r5, r2
 8008e5a:	e7bd      	b.n	8008dd8 <_printf_i+0x12c>
 8008e5c:	682b      	ldr	r3, [r5, #0]
 8008e5e:	6826      	ldr	r6, [r4, #0]
 8008e60:	6961      	ldr	r1, [r4, #20]
 8008e62:	1d18      	adds	r0, r3, #4
 8008e64:	6028      	str	r0, [r5, #0]
 8008e66:	0635      	lsls	r5, r6, #24
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	d501      	bpl.n	8008e70 <_printf_i+0x1c4>
 8008e6c:	6019      	str	r1, [r3, #0]
 8008e6e:	e002      	b.n	8008e76 <_printf_i+0x1ca>
 8008e70:	0670      	lsls	r0, r6, #25
 8008e72:	d5fb      	bpl.n	8008e6c <_printf_i+0x1c0>
 8008e74:	8019      	strh	r1, [r3, #0]
 8008e76:	2300      	movs	r3, #0
 8008e78:	6123      	str	r3, [r4, #16]
 8008e7a:	4615      	mov	r5, r2
 8008e7c:	e7bc      	b.n	8008df8 <_printf_i+0x14c>
 8008e7e:	682b      	ldr	r3, [r5, #0]
 8008e80:	1d1a      	adds	r2, r3, #4
 8008e82:	602a      	str	r2, [r5, #0]
 8008e84:	681d      	ldr	r5, [r3, #0]
 8008e86:	6862      	ldr	r2, [r4, #4]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7f7 f9a8 	bl	80001e0 <memchr>
 8008e90:	b108      	cbz	r0, 8008e96 <_printf_i+0x1ea>
 8008e92:	1b40      	subs	r0, r0, r5
 8008e94:	6060      	str	r0, [r4, #4]
 8008e96:	6863      	ldr	r3, [r4, #4]
 8008e98:	6123      	str	r3, [r4, #16]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea0:	e7aa      	b.n	8008df8 <_printf_i+0x14c>
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	462a      	mov	r2, r5
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	4640      	mov	r0, r8
 8008eaa:	47d0      	blx	sl
 8008eac:	3001      	adds	r0, #1
 8008eae:	d0ad      	beq.n	8008e0c <_printf_i+0x160>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	079b      	lsls	r3, r3, #30
 8008eb4:	d413      	bmi.n	8008ede <_printf_i+0x232>
 8008eb6:	68e0      	ldr	r0, [r4, #12]
 8008eb8:	9b03      	ldr	r3, [sp, #12]
 8008eba:	4298      	cmp	r0, r3
 8008ebc:	bfb8      	it	lt
 8008ebe:	4618      	movlt	r0, r3
 8008ec0:	e7a6      	b.n	8008e10 <_printf_i+0x164>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	47d0      	blx	sl
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d09d      	beq.n	8008e0c <_printf_i+0x160>
 8008ed0:	3501      	adds	r5, #1
 8008ed2:	68e3      	ldr	r3, [r4, #12]
 8008ed4:	9903      	ldr	r1, [sp, #12]
 8008ed6:	1a5b      	subs	r3, r3, r1
 8008ed8:	42ab      	cmp	r3, r5
 8008eda:	dcf2      	bgt.n	8008ec2 <_printf_i+0x216>
 8008edc:	e7eb      	b.n	8008eb6 <_printf_i+0x20a>
 8008ede:	2500      	movs	r5, #0
 8008ee0:	f104 0619 	add.w	r6, r4, #25
 8008ee4:	e7f5      	b.n	8008ed2 <_printf_i+0x226>
 8008ee6:	bf00      	nop
 8008ee8:	08009eae 	.word	0x08009eae
 8008eec:	08009ebf 	.word	0x08009ebf

08008ef0 <__sflush_r>:
 8008ef0:	898a      	ldrh	r2, [r1, #12]
 8008ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	0710      	lsls	r0, r2, #28
 8008efa:	460c      	mov	r4, r1
 8008efc:	d458      	bmi.n	8008fb0 <__sflush_r+0xc0>
 8008efe:	684b      	ldr	r3, [r1, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	dc05      	bgt.n	8008f10 <__sflush_r+0x20>
 8008f04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dc02      	bgt.n	8008f10 <__sflush_r+0x20>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f12:	2e00      	cmp	r6, #0
 8008f14:	d0f9      	beq.n	8008f0a <__sflush_r+0x1a>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f1c:	682f      	ldr	r7, [r5, #0]
 8008f1e:	6a21      	ldr	r1, [r4, #32]
 8008f20:	602b      	str	r3, [r5, #0]
 8008f22:	d032      	beq.n	8008f8a <__sflush_r+0x9a>
 8008f24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f26:	89a3      	ldrh	r3, [r4, #12]
 8008f28:	075a      	lsls	r2, r3, #29
 8008f2a:	d505      	bpl.n	8008f38 <__sflush_r+0x48>
 8008f2c:	6863      	ldr	r3, [r4, #4]
 8008f2e:	1ac0      	subs	r0, r0, r3
 8008f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f32:	b10b      	cbz	r3, 8008f38 <__sflush_r+0x48>
 8008f34:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f36:	1ac0      	subs	r0, r0, r3
 8008f38:	2300      	movs	r3, #0
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f3e:	6a21      	ldr	r1, [r4, #32]
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b0      	blx	r6
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	d106      	bne.n	8008f58 <__sflush_r+0x68>
 8008f4a:	6829      	ldr	r1, [r5, #0]
 8008f4c:	291d      	cmp	r1, #29
 8008f4e:	d82b      	bhi.n	8008fa8 <__sflush_r+0xb8>
 8008f50:	4a29      	ldr	r2, [pc, #164]	; (8008ff8 <__sflush_r+0x108>)
 8008f52:	410a      	asrs	r2, r1
 8008f54:	07d6      	lsls	r6, r2, #31
 8008f56:	d427      	bmi.n	8008fa8 <__sflush_r+0xb8>
 8008f58:	2200      	movs	r2, #0
 8008f5a:	6062      	str	r2, [r4, #4]
 8008f5c:	04d9      	lsls	r1, r3, #19
 8008f5e:	6922      	ldr	r2, [r4, #16]
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	d504      	bpl.n	8008f6e <__sflush_r+0x7e>
 8008f64:	1c42      	adds	r2, r0, #1
 8008f66:	d101      	bne.n	8008f6c <__sflush_r+0x7c>
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	b903      	cbnz	r3, 8008f6e <__sflush_r+0x7e>
 8008f6c:	6560      	str	r0, [r4, #84]	; 0x54
 8008f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f70:	602f      	str	r7, [r5, #0]
 8008f72:	2900      	cmp	r1, #0
 8008f74:	d0c9      	beq.n	8008f0a <__sflush_r+0x1a>
 8008f76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f7a:	4299      	cmp	r1, r3
 8008f7c:	d002      	beq.n	8008f84 <__sflush_r+0x94>
 8008f7e:	4628      	mov	r0, r5
 8008f80:	f7ff fa8a 	bl	8008498 <_free_r>
 8008f84:	2000      	movs	r0, #0
 8008f86:	6360      	str	r0, [r4, #52]	; 0x34
 8008f88:	e7c0      	b.n	8008f0c <__sflush_r+0x1c>
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	47b0      	blx	r6
 8008f90:	1c41      	adds	r1, r0, #1
 8008f92:	d1c8      	bne.n	8008f26 <__sflush_r+0x36>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0c5      	beq.n	8008f26 <__sflush_r+0x36>
 8008f9a:	2b1d      	cmp	r3, #29
 8008f9c:	d001      	beq.n	8008fa2 <__sflush_r+0xb2>
 8008f9e:	2b16      	cmp	r3, #22
 8008fa0:	d101      	bne.n	8008fa6 <__sflush_r+0xb6>
 8008fa2:	602f      	str	r7, [r5, #0]
 8008fa4:	e7b1      	b.n	8008f0a <__sflush_r+0x1a>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fac:	81a3      	strh	r3, [r4, #12]
 8008fae:	e7ad      	b.n	8008f0c <__sflush_r+0x1c>
 8008fb0:	690f      	ldr	r7, [r1, #16]
 8008fb2:	2f00      	cmp	r7, #0
 8008fb4:	d0a9      	beq.n	8008f0a <__sflush_r+0x1a>
 8008fb6:	0793      	lsls	r3, r2, #30
 8008fb8:	680e      	ldr	r6, [r1, #0]
 8008fba:	bf08      	it	eq
 8008fbc:	694b      	ldreq	r3, [r1, #20]
 8008fbe:	600f      	str	r7, [r1, #0]
 8008fc0:	bf18      	it	ne
 8008fc2:	2300      	movne	r3, #0
 8008fc4:	eba6 0807 	sub.w	r8, r6, r7
 8008fc8:	608b      	str	r3, [r1, #8]
 8008fca:	f1b8 0f00 	cmp.w	r8, #0
 8008fce:	dd9c      	ble.n	8008f0a <__sflush_r+0x1a>
 8008fd0:	6a21      	ldr	r1, [r4, #32]
 8008fd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fd4:	4643      	mov	r3, r8
 8008fd6:	463a      	mov	r2, r7
 8008fd8:	4628      	mov	r0, r5
 8008fda:	47b0      	blx	r6
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	dc06      	bgt.n	8008fee <__sflush_r+0xfe>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fe6:	81a3      	strh	r3, [r4, #12]
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	e78e      	b.n	8008f0c <__sflush_r+0x1c>
 8008fee:	4407      	add	r7, r0
 8008ff0:	eba8 0800 	sub.w	r8, r8, r0
 8008ff4:	e7e9      	b.n	8008fca <__sflush_r+0xda>
 8008ff6:	bf00      	nop
 8008ff8:	dfbffffe 	.word	0xdfbffffe

08008ffc <_fflush_r>:
 8008ffc:	b538      	push	{r3, r4, r5, lr}
 8008ffe:	690b      	ldr	r3, [r1, #16]
 8009000:	4605      	mov	r5, r0
 8009002:	460c      	mov	r4, r1
 8009004:	b913      	cbnz	r3, 800900c <_fflush_r+0x10>
 8009006:	2500      	movs	r5, #0
 8009008:	4628      	mov	r0, r5
 800900a:	bd38      	pop	{r3, r4, r5, pc}
 800900c:	b118      	cbz	r0, 8009016 <_fflush_r+0x1a>
 800900e:	6a03      	ldr	r3, [r0, #32]
 8009010:	b90b      	cbnz	r3, 8009016 <_fflush_r+0x1a>
 8009012:	f7fe ff0f 	bl	8007e34 <__sinit>
 8009016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0f3      	beq.n	8009006 <_fflush_r+0xa>
 800901e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009020:	07d0      	lsls	r0, r2, #31
 8009022:	d404      	bmi.n	800902e <_fflush_r+0x32>
 8009024:	0599      	lsls	r1, r3, #22
 8009026:	d402      	bmi.n	800902e <_fflush_r+0x32>
 8009028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800902a:	f7ff fa06 	bl	800843a <__retarget_lock_acquire_recursive>
 800902e:	4628      	mov	r0, r5
 8009030:	4621      	mov	r1, r4
 8009032:	f7ff ff5d 	bl	8008ef0 <__sflush_r>
 8009036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009038:	07da      	lsls	r2, r3, #31
 800903a:	4605      	mov	r5, r0
 800903c:	d4e4      	bmi.n	8009008 <_fflush_r+0xc>
 800903e:	89a3      	ldrh	r3, [r4, #12]
 8009040:	059b      	lsls	r3, r3, #22
 8009042:	d4e1      	bmi.n	8009008 <_fflush_r+0xc>
 8009044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009046:	f7ff f9f9 	bl	800843c <__retarget_lock_release_recursive>
 800904a:	e7dd      	b.n	8009008 <_fflush_r+0xc>

0800904c <fiprintf>:
 800904c:	b40e      	push	{r1, r2, r3}
 800904e:	b503      	push	{r0, r1, lr}
 8009050:	4601      	mov	r1, r0
 8009052:	ab03      	add	r3, sp, #12
 8009054:	4805      	ldr	r0, [pc, #20]	; (800906c <fiprintf+0x20>)
 8009056:	f853 2b04 	ldr.w	r2, [r3], #4
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	f7ff fc9d 	bl	800899c <_vfiprintf_r>
 8009062:	b002      	add	sp, #8
 8009064:	f85d eb04 	ldr.w	lr, [sp], #4
 8009068:	b003      	add	sp, #12
 800906a:	4770      	bx	lr
 800906c:	20000078 	.word	0x20000078

08009070 <__swhatbuf_r>:
 8009070:	b570      	push	{r4, r5, r6, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	2900      	cmp	r1, #0
 800907a:	b096      	sub	sp, #88	; 0x58
 800907c:	4615      	mov	r5, r2
 800907e:	461e      	mov	r6, r3
 8009080:	da0d      	bge.n	800909e <__swhatbuf_r+0x2e>
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009088:	f04f 0100 	mov.w	r1, #0
 800908c:	bf0c      	ite	eq
 800908e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009092:	2340      	movne	r3, #64	; 0x40
 8009094:	2000      	movs	r0, #0
 8009096:	6031      	str	r1, [r6, #0]
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	b016      	add	sp, #88	; 0x58
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	466a      	mov	r2, sp
 80090a0:	f000 f862 	bl	8009168 <_fstat_r>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	dbec      	blt.n	8009082 <__swhatbuf_r+0x12>
 80090a8:	9901      	ldr	r1, [sp, #4]
 80090aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80090ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80090b2:	4259      	negs	r1, r3
 80090b4:	4159      	adcs	r1, r3
 80090b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090ba:	e7eb      	b.n	8009094 <__swhatbuf_r+0x24>

080090bc <__smakebuf_r>:
 80090bc:	898b      	ldrh	r3, [r1, #12]
 80090be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090c0:	079d      	lsls	r5, r3, #30
 80090c2:	4606      	mov	r6, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	d507      	bpl.n	80090d8 <__smakebuf_r+0x1c>
 80090c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	2301      	movs	r3, #1
 80090d2:	6163      	str	r3, [r4, #20]
 80090d4:	b002      	add	sp, #8
 80090d6:	bd70      	pop	{r4, r5, r6, pc}
 80090d8:	ab01      	add	r3, sp, #4
 80090da:	466a      	mov	r2, sp
 80090dc:	f7ff ffc8 	bl	8009070 <__swhatbuf_r>
 80090e0:	9900      	ldr	r1, [sp, #0]
 80090e2:	4605      	mov	r5, r0
 80090e4:	4630      	mov	r0, r6
 80090e6:	f7ff fa4b 	bl	8008580 <_malloc_r>
 80090ea:	b948      	cbnz	r0, 8009100 <__smakebuf_r+0x44>
 80090ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090f0:	059a      	lsls	r2, r3, #22
 80090f2:	d4ef      	bmi.n	80090d4 <__smakebuf_r+0x18>
 80090f4:	f023 0303 	bic.w	r3, r3, #3
 80090f8:	f043 0302 	orr.w	r3, r3, #2
 80090fc:	81a3      	strh	r3, [r4, #12]
 80090fe:	e7e3      	b.n	80090c8 <__smakebuf_r+0xc>
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	6020      	str	r0, [r4, #0]
 8009104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009108:	81a3      	strh	r3, [r4, #12]
 800910a:	9b00      	ldr	r3, [sp, #0]
 800910c:	6163      	str	r3, [r4, #20]
 800910e:	9b01      	ldr	r3, [sp, #4]
 8009110:	6120      	str	r0, [r4, #16]
 8009112:	b15b      	cbz	r3, 800912c <__smakebuf_r+0x70>
 8009114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009118:	4630      	mov	r0, r6
 800911a:	f000 f837 	bl	800918c <_isatty_r>
 800911e:	b128      	cbz	r0, 800912c <__smakebuf_r+0x70>
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	431d      	orrs	r5, r3
 8009130:	81a5      	strh	r5, [r4, #12]
 8009132:	e7cf      	b.n	80090d4 <__smakebuf_r+0x18>

08009134 <memmove>:
 8009134:	4288      	cmp	r0, r1
 8009136:	b510      	push	{r4, lr}
 8009138:	eb01 0402 	add.w	r4, r1, r2
 800913c:	d902      	bls.n	8009144 <memmove+0x10>
 800913e:	4284      	cmp	r4, r0
 8009140:	4623      	mov	r3, r4
 8009142:	d807      	bhi.n	8009154 <memmove+0x20>
 8009144:	1e43      	subs	r3, r0, #1
 8009146:	42a1      	cmp	r1, r4
 8009148:	d008      	beq.n	800915c <memmove+0x28>
 800914a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800914e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009152:	e7f8      	b.n	8009146 <memmove+0x12>
 8009154:	4402      	add	r2, r0
 8009156:	4601      	mov	r1, r0
 8009158:	428a      	cmp	r2, r1
 800915a:	d100      	bne.n	800915e <memmove+0x2a>
 800915c:	bd10      	pop	{r4, pc}
 800915e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009166:	e7f7      	b.n	8009158 <memmove+0x24>

08009168 <_fstat_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d07      	ldr	r5, [pc, #28]	; (8009188 <_fstat_r+0x20>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	4611      	mov	r1, r2
 8009174:	602b      	str	r3, [r5, #0]
 8009176:	f7f8 fd17 	bl	8001ba8 <_fstat>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d102      	bne.n	8009184 <_fstat_r+0x1c>
 800917e:	682b      	ldr	r3, [r5, #0]
 8009180:	b103      	cbz	r3, 8009184 <_fstat_r+0x1c>
 8009182:	6023      	str	r3, [r4, #0]
 8009184:	bd38      	pop	{r3, r4, r5, pc}
 8009186:	bf00      	nop
 8009188:	20005368 	.word	0x20005368

0800918c <_isatty_r>:
 800918c:	b538      	push	{r3, r4, r5, lr}
 800918e:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_isatty_r+0x1c>)
 8009190:	2300      	movs	r3, #0
 8009192:	4604      	mov	r4, r0
 8009194:	4608      	mov	r0, r1
 8009196:	602b      	str	r3, [r5, #0]
 8009198:	f7f8 fd16 	bl	8001bc8 <_isatty>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_isatty_r+0x1a>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_isatty_r+0x1a>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20005368 	.word	0x20005368

080091ac <_sbrk_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d06      	ldr	r5, [pc, #24]	; (80091c8 <_sbrk_r+0x1c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7f8 fd1e 	bl	8001bf8 <_sbrk>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_sbrk_r+0x1a>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_sbrk_r+0x1a>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20005368 	.word	0x20005368

080091cc <abort>:
 80091cc:	b508      	push	{r3, lr}
 80091ce:	2006      	movs	r0, #6
 80091d0:	f000 f85a 	bl	8009288 <raise>
 80091d4:	2001      	movs	r0, #1
 80091d6:	f7f8 fc95 	bl	8001b04 <_exit>

080091da <_realloc_r>:
 80091da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091de:	4680      	mov	r8, r0
 80091e0:	4614      	mov	r4, r2
 80091e2:	460e      	mov	r6, r1
 80091e4:	b921      	cbnz	r1, 80091f0 <_realloc_r+0x16>
 80091e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ea:	4611      	mov	r1, r2
 80091ec:	f7ff b9c8 	b.w	8008580 <_malloc_r>
 80091f0:	b92a      	cbnz	r2, 80091fe <_realloc_r+0x24>
 80091f2:	f7ff f951 	bl	8008498 <_free_r>
 80091f6:	4625      	mov	r5, r4
 80091f8:	4628      	mov	r0, r5
 80091fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091fe:	f000 f85f 	bl	80092c0 <_malloc_usable_size_r>
 8009202:	4284      	cmp	r4, r0
 8009204:	4607      	mov	r7, r0
 8009206:	d802      	bhi.n	800920e <_realloc_r+0x34>
 8009208:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800920c:	d812      	bhi.n	8009234 <_realloc_r+0x5a>
 800920e:	4621      	mov	r1, r4
 8009210:	4640      	mov	r0, r8
 8009212:	f7ff f9b5 	bl	8008580 <_malloc_r>
 8009216:	4605      	mov	r5, r0
 8009218:	2800      	cmp	r0, #0
 800921a:	d0ed      	beq.n	80091f8 <_realloc_r+0x1e>
 800921c:	42bc      	cmp	r4, r7
 800921e:	4622      	mov	r2, r4
 8009220:	4631      	mov	r1, r6
 8009222:	bf28      	it	cs
 8009224:	463a      	movcs	r2, r7
 8009226:	f7ff f90a 	bl	800843e <memcpy>
 800922a:	4631      	mov	r1, r6
 800922c:	4640      	mov	r0, r8
 800922e:	f7ff f933 	bl	8008498 <_free_r>
 8009232:	e7e1      	b.n	80091f8 <_realloc_r+0x1e>
 8009234:	4635      	mov	r5, r6
 8009236:	e7df      	b.n	80091f8 <_realloc_r+0x1e>

08009238 <_raise_r>:
 8009238:	291f      	cmp	r1, #31
 800923a:	b538      	push	{r3, r4, r5, lr}
 800923c:	4604      	mov	r4, r0
 800923e:	460d      	mov	r5, r1
 8009240:	d904      	bls.n	800924c <_raise_r+0x14>
 8009242:	2316      	movs	r3, #22
 8009244:	6003      	str	r3, [r0, #0]
 8009246:	f04f 30ff 	mov.w	r0, #4294967295
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800924e:	b112      	cbz	r2, 8009256 <_raise_r+0x1e>
 8009250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009254:	b94b      	cbnz	r3, 800926a <_raise_r+0x32>
 8009256:	4620      	mov	r0, r4
 8009258:	f000 f830 	bl	80092bc <_getpid_r>
 800925c:	462a      	mov	r2, r5
 800925e:	4601      	mov	r1, r0
 8009260:	4620      	mov	r0, r4
 8009262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009266:	f000 b817 	b.w	8009298 <_kill_r>
 800926a:	2b01      	cmp	r3, #1
 800926c:	d00a      	beq.n	8009284 <_raise_r+0x4c>
 800926e:	1c59      	adds	r1, r3, #1
 8009270:	d103      	bne.n	800927a <_raise_r+0x42>
 8009272:	2316      	movs	r3, #22
 8009274:	6003      	str	r3, [r0, #0]
 8009276:	2001      	movs	r0, #1
 8009278:	e7e7      	b.n	800924a <_raise_r+0x12>
 800927a:	2400      	movs	r4, #0
 800927c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009280:	4628      	mov	r0, r5
 8009282:	4798      	blx	r3
 8009284:	2000      	movs	r0, #0
 8009286:	e7e0      	b.n	800924a <_raise_r+0x12>

08009288 <raise>:
 8009288:	4b02      	ldr	r3, [pc, #8]	; (8009294 <raise+0xc>)
 800928a:	4601      	mov	r1, r0
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f7ff bfd3 	b.w	8009238 <_raise_r>
 8009292:	bf00      	nop
 8009294:	20000078 	.word	0x20000078

08009298 <_kill_r>:
 8009298:	b538      	push	{r3, r4, r5, lr}
 800929a:	4d07      	ldr	r5, [pc, #28]	; (80092b8 <_kill_r+0x20>)
 800929c:	2300      	movs	r3, #0
 800929e:	4604      	mov	r4, r0
 80092a0:	4608      	mov	r0, r1
 80092a2:	4611      	mov	r1, r2
 80092a4:	602b      	str	r3, [r5, #0]
 80092a6:	f7f8 fc1d 	bl	8001ae4 <_kill>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	d102      	bne.n	80092b4 <_kill_r+0x1c>
 80092ae:	682b      	ldr	r3, [r5, #0]
 80092b0:	b103      	cbz	r3, 80092b4 <_kill_r+0x1c>
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	bd38      	pop	{r3, r4, r5, pc}
 80092b6:	bf00      	nop
 80092b8:	20005368 	.word	0x20005368

080092bc <_getpid_r>:
 80092bc:	f7f8 bc0a 	b.w	8001ad4 <_getpid>

080092c0 <_malloc_usable_size_r>:
 80092c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092c4:	1f18      	subs	r0, r3, #4
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	bfbc      	itt	lt
 80092ca:	580b      	ldrlt	r3, [r1, r0]
 80092cc:	18c0      	addlt	r0, r0, r3
 80092ce:	4770      	bx	lr

080092d0 <_init>:
 80092d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092d2:	bf00      	nop
 80092d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d6:	bc08      	pop	{r3}
 80092d8:	469e      	mov	lr, r3
 80092da:	4770      	bx	lr

080092dc <_fini>:
 80092dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092de:	bf00      	nop
 80092e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092e2:	bc08      	pop	{r3}
 80092e4:	469e      	mov	lr, r3
 80092e6:	4770      	bx	lr
